=== –§–∞–π–ª: App.css ===
```css
#root {
  max-width: 1280px;
  margin: 0 auto;
  padding: 2rem;
  text-align: center;
}

.logo {
  height: 6em;
  padding: 1.5em;
  will-change: filter;
  transition: filter 300ms;
}
.logo:hover {
  filter: drop-shadow(0 0 2em #646cffaa);
}
.logo.react:hover {
  filter: drop-shadow(0 0 2em #61dafbaa);
}

@keyframes logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

@media (prefers-reduced-motion: no-preference) {
  a:nth-of-type(2) .logo {
    animation: logo-spin infinite 20s linear;
  }
}

.card {
  padding: 2em;
}

.read-the-docs {
  color: #888;
}
```

=== –§–∞–π–ª: vite-env.d.ts ===
```typescript
/// <reference types="vite/client" />
```

=== –§–∞–π–ª: App.tsx ===
```typescript
import { QueryClient, QueryClientProvider } from '@tanstack/react-query'
import { ReactQueryDevtools } from '@tanstack/react-query-devtools'
import { AppRouter } from './router/AppRouter'
import './styles/base.module.scss'

const queryClient = new QueryClient({
	defaultOptions: {
		queries: {
			refetchOnWindowFocus: false,
			retry: 1,
		},
	},
})

export function App() {
	return (
		<QueryClientProvider client={queryClient}>
			<AppRouter />
			<ReactQueryDevtools initialIsOpen={false} />
		</QueryClientProvider>
	)
}
```

=== –§–∞–π–ª: main.tsx ===
```typescript
import { StrictMode } from 'react'
import { createRoot } from 'react-dom/client'
import { App } from './App.tsx'

createRoot(document.getElementById('root')!).render(
	<StrictMode>
		<App />
	</StrictMode>
)
```

=== –§–∞–π–ª: pages/HomePage/HomePage.tsx ===
```typescript
import { Button } from 'antd'
import { Emoji } from 'emoji-picker-react'
import { CalendarCheck, HeartPulse, NotebookPen, PawPrint } from 'lucide-react'
import { useNavigate } from 'react-router-dom'
import { AnimatedEmoji } from './AnimatedEmoji'
import styles from './HomePage.module.scss'

export default function HomePage() {
	const navigate = useNavigate()
	// –ê–Ω–∏–º–∞—Ü–∏–∏

	return (
		<div className={styles.homeContainer}>
			{/* –ì–µ—Ä–æ–π-—Å–µ–∫—Ü–∏—è */}
			<section className={styles.heroSection}>
				<div className={styles.heroContent}>
					<h1>
						<span className={styles.highlight}>PetHealth</span> - –≤–∞—à –Ω–∞–¥—ë–∂–Ω—ã–π
						–ø–æ–º–æ—â–Ω–∏–∫ –≤ –∑–∞–±–æ—Ç–µ –æ –ø–∏—Ç–æ–º—Ü–∞—Ö <Emoji unified='1f415' size={24} />{' '}
						<Emoji unified='1f408' size={24} />
					</h1>
					<p className={styles.subtitle}>
						–•—Ä–∞–Ω–∏—Ç–µ –≤—Å—é –º–µ–¥–∏—Ü–∏–Ω—Å–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –∑–∞–ø–∏—Å–∏ –∏ –≤–∞–∂–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã –≤ –æ–¥–Ω–æ–º
						—É–¥–æ–±–Ω–æ–º –º–µ—Å—Ç–µ
					</p>
					<div className={styles.ctaButtons}>
						<Button
							type='primary'
							size='large'
							onClick={() => navigate('/auth/register')}
							className={styles.primaryButton}
						>
							–ù–∞—á–∞—Ç—å —Å–µ–π—á–∞—Å
						</Button>
						<Button
							size='large'
							onClick={() => navigate('/auth/login')}
							className={styles.secondaryButton}
						>
							–í–æ–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç
						</Button>
					</div>
				</div>
				<div className={styles.heroIllustration}>
					<div className={styles.petAnimation}>
						<AnimatedEmoji
							emoji='1f43e'
							animation='pulse'
							size={64}
							style={{ margin: '20px 0' }}
						/>
					</div>
				</div>
			</section>

			{/* –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ */}
			<section className={styles.featuresSection}>
				<h2>
					–ü–æ—á–µ–º—É –≤—ã–±–∏—Ä–∞—é—Ç –Ω–∞—Å? <span className={styles.emoji}>‚ú®</span>
				</h2>
				<div className={styles.featuresGrid}>
					<div className={styles.featureCard}>
						<div className={styles.featureIcon}>
							<PawPrint size={40} color='#3182ce' />
						</div>
						<h3>–ü—Ä–æ—Ñ–∏–ª–∏ –ø–∏—Ç–æ–º—Ü–µ–≤</h3>
						<p>
							–°–æ–∑–¥–∞–≤–∞–π—Ç–µ –ø–æ–¥—Ä–æ–±–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–∏—Ç–æ–º—Ü–∞ —Å —Ñ–æ—Ç–æ,
							–º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∏ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—è–º–∏
						</p>
					</div>

					<div className={styles.featureCard}>
						<div className={styles.featureIcon}>
							<NotebookPen size={40} color='#3182ce' />
						</div>
						<h3>–î–Ω–µ–≤–Ω–∏–∫ –∑–¥–æ—Ä–æ–≤—å—è</h3>
						<p>
							–í–µ–¥–∏—Ç–µ –∑–∞–ø–∏—Å–∏ –æ –ø–æ—Å–µ—â–µ–Ω–∏—è—Ö –≤–µ—Ç–µ—Ä–∏–Ω–∞—Ä–∞, –ø—Ä–∏–≤–∏–≤–∫–∞—Ö, –ø–∏—Ç–∞–Ω–∏–∏ –∏
							–ø–æ–≤–µ–¥–µ–Ω–∏–∏ –≤–∞—à–µ–≥–æ –ª—é–±–∏–º—Ü–∞
						</p>
					</div>

					<div className={styles.featureCard}>
						<div className={styles.featureIcon}>
							<CalendarCheck size={40} color='#3182ce' />
						</div>
						<h3>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è</h3>
						<p>
							–ü–æ–ª—É—á–∞–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤–∞–∂–Ω—ã—Ö —Å–æ–±—ã—Ç–∏—è—Ö: –ø—Ä–∏–≤–∏–≤–∫–∞—Ö, –æ–±—Ä–∞–±–æ—Ç–∫–∞—Ö –æ—Ç
							–ø–∞—Ä–∞–∑–∏—Ç–æ–≤ –∏ –≤–∏–∑–∏—Ç–∞—Ö –∫ –≤—Ä–∞—á—É
						</p>
					</div>

					<div className={styles.featureCard}>
						<div className={styles.featureIcon}>
							<HeartPulse size={40} color='#3182ce' />
						</div>
						<h3>–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è –∫–∞—Ä—Ç–∞</h3>
						<p>
							–•—Ä–∞–Ω–∏—Ç–µ –≤—Å–µ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã, —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–æ–≤ –∏
							–Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –≤—Ä–∞—á–µ–π –≤ –æ–¥–Ω–æ–º –º–µ—Å—Ç–µ
						</p>
					</div>
				</div>
			</section>

			{/* –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç */}
			<section className={styles.howItWorks}>
				<h2>
					–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç? <span className={styles.emoji}>ü§î</span>
				</h2>
				<div className={styles.steps}>
					<div className={styles.step}>
						<div className={styles.stepNumber}>1</div>
						<div className={styles.stepContent}>
							<h3>–°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å –ø–∏—Ç–æ–º—Ü–∞</h3>
							<p>–î–æ–±–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ, –ø–æ—Ä–æ–¥—É, –≤–æ–∑—Ä–∞—Å—Ç –∏ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –≤–∞—à–µ–≥–æ –ª—é–±–∏–º—Ü–∞</p>
						</div>
					</div>
					<div className={styles.step}>
						<div className={styles.stepNumber}>2</div>
						<div className={styles.stepContent}>
							<h3>–î–æ–±–∞–≤–ª—è–π—Ç–µ –∑–∞–ø–∏—Å–∏</h3>
							<p>
								–§–∏–∫—Å–∏—Ä—É–π—Ç–µ –≤–∞–∂–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è, –ø–æ—Å–µ—â–µ–Ω–∏—è –≤—Ä–∞—á–∞ –∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤
								—Å–æ—Å—Ç–æ—è–Ω–∏–∏
							</p>
						</div>
					</div>
					<div className={styles.step}>
						<div className={styles.stepNumber}>3</div>
						<div className={styles.stepContent}>
							<h3>–ü–æ–ª—É—á–∞–π—Ç–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è</h3>
							<p>–°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–∏—Ç –≤–∞—Å –æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –ø—Ä–æ—Ü–µ–¥—É—Ä–∞—Ö –∏ –≤–∏–∑–∏—Ç–∞—Ö</p>
						</div>
					</div>
				</div>
			</section>

			{/* –û—Ç–∑—ã–≤—ã */}
			<section className={styles.testimonials}>
				<h2>
					–ß—Ç–æ –≥–æ–≤–æ—Ä—è—Ç –Ω–∞—à–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏?{' '}
					<span className={styles.emoji}>üí¨</span>
				</h2>
				<div className={styles.testimonialCards}>
					<div className={styles.testimonial}>
						<div className={styles.quote}>‚Äú</div>
						<p>
							–¢–µ–ø–µ—Ä—å –≤—Å–µ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ –∫–∞—Ä—Ç—ã –º–æ–∏—Ö —Ç—Ä—ë—Ö –∫–æ—à–µ–∫ –≤ –æ–¥–Ω–æ–º –º–µ—Å—Ç–µ. –ë–æ–ª—å—à–µ
							–Ω–µ –Ω—É–∂–Ω–æ –∏—Å–∫–∞—Ç—å –±—É–º–∞–∂–Ω—ã–µ –∑–∞–ø–∏—Å–∏!
						</p>
						<div className={styles.author}>- –ê–Ω–Ω–∞, –≤–ª–∞–¥–µ–ª–µ—Ü –∫–æ—à–µ–∫</div>
					</div>
					<div className={styles.testimonial}>
						<div className={styles.quote}>‚Äú</div>
						<p>
							–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø—Ä–∏–≤–∏–≤–∫–∞—Ö —Å–ø–∞—Å–∞—é—Ç! –ù–∏ —Ä–∞–∑—É –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏–ª–∏ –≤–∞–∫—Ü–∏–Ω–∞—Ü–∏—é
							—Å —Ç–µ—Ö –ø–æ—Ä –∫–∞–∫ –ø–æ–ª—å–∑—É–µ–º—Å—è —Å–µ—Ä–≤–∏—Å–æ–º.
						</p>
						<div className={styles.author}>- –ú–∞–∫—Å–∏–º, –≤–ª–∞–¥–µ–ª–µ—Ü —Å–æ–±–∞–∫–∏</div>
					</div>
				</div>
			</section>

			{/* –§–∏–Ω–∞–ª—å–Ω—ã–π CTA */}
			<section className={styles.finalCta}>
				<h2>
					–ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å –∑–∞–±–æ—Ç–∏—Ç—å—Å—è –æ –ø–∏—Ç–æ–º—Ü–µ –ø—Ä–æ—â–µ?{' '}
					<span className={styles.emoji}>üöÄ</span>
				</h2>
				<Button
					type='primary'
					size='large'
					onClick={() => navigate('/auth/register')}
					className={styles.ctaButton}
				>
					–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ
				</Button>
			</section>
		</div>
	)
}
```

=== –§–∞–π–ª: pages/HomePage/AnimatedEmoji.tsx ===
```typescript
import { Emoji, EmojiStyle } from 'emoji-picker-react'
import { CSSProperties, useEffect, useState } from 'react'

interface AnimatedEmojiProps {
	emoji: string
	size?: number
	animation?: 'bounce' | 'pulse' | 'spin' | 'float'
	speed?: number
	style?: CSSProperties
}

export const AnimatedEmoji = ({
	emoji,
	size = 24,
	animation = 'bounce',
	speed = 2,
	style = {},
}: AnimatedEmojiProps) => {
	const [key, setKey] = useState(0) // –î–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ä–µ—Ä–µ–Ω–¥–µ—Ä–∞

	// –ê–Ω–∏–º–∞—Ü–∏–∏
	const animations = {
		bounce: `
      @keyframes bounce {
        0%, 100% { transform: translateY(0); }
        50% { transform: translateY(-15px); }
      }
      animation: bounce ${speed}s infinite;
    `,
		pulse: `
      @keyframes pulse {
        0%, 100% { transform: scale(1); }
        50% { transform: scale(1.2); }
      }
      animation: pulse ${speed}s infinite;
    `,
		spin: `
      @keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
      }
      animation: spin ${speed}s linear infinite;
    `,
		float: `
      @keyframes float {
        0%, 100% { transform: translateY(0) rotate(0deg); }
        25% { transform: translateY(-10px) rotate(5deg); }
        75% { transform: translateY(-10px) rotate(-5deg); }
      }
      animation: float ${speed}s ease-in-out infinite;
    `,
	}

	// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π —Ä–µ—Ä–µ–Ω–¥–µ—Ä –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–≤–æ–π—Å—Ç–≤
	useEffect(() => {
		setKey(prev => prev + 1)
	}, [emoji, size, animation, speed])

	return (
		<div
			key={key}
			style={{
				display: 'inline-block',
				...style,
				cssText: animations[animation],
			}}
		>
			<Emoji
				unified={emoji}
				size={size}
				emojiStyle={EmojiStyle.APPLE} // –ò–ª–∏ TWITTER, GOOGLE –∏ –¥—Ä.
			/>
		</div>
	)
}
```

=== –§–∞–π–ª: pages/HomePage/HomePage.module.scss ===
```scss
.homeContainer {
	max-width: 1200px;
	margin: 0 auto;
	padding: 2rem 1rem;
	color: #2d3748;
}

/* –ì–µ—Ä–æ–π-—Å–µ–∫—Ü–∏—è */
.heroSection {
	display: flex;
	align-items: center;
	gap: 2rem;
	margin-bottom: 4rem;
	padding: 2rem 0;
}

.heroContent {
	flex: 1;
	font-family: 'Roboto', 'Segoe UI Emoji', 'Apple Color Emoji',
		'Noto Color Emoji', sans-serif;
}

.heroIllustration {
	flex: 1;
	display: flex;
	justify-content: center;
}

.highlight {
	color: #3182ce;
	font-weight: 700;
}

.emoji {
	font-size: 1.2em;
}

h1 {
	font-size: 2.5rem;
	line-height: 1.2;
	margin-bottom: 1.5rem;
	color: #2b6cb0;
}

.subtitle {
	font-size: 1.2rem;
	color: #4a5568;
	margin-bottom: 2rem;
	max-width: 600px;
}

.ctaButtons {
	display: flex;
	gap: 1rem;
	margin-top: 2rem;
}

.primaryButton {
	background-color: #3182ce;
	border-color: #3182ce;
	&:hover {
		background-color: #2b6cb0;
		border-color: #2b6cb0;
	}
}

.secondaryButton {
	color: #3182ce;
	border-color: #3182ce;
	&:hover {
		color: #2b6cb0;
		border-color: #2b6cb0;
	}
}

.petAnimation {
	font-size: 5rem;
	animation: bounce 2s infinite;
	font-family: 'Apple Color Emoji', 'Segoe UI Emoji', 'Noto Color Emoji',
		sans-serif;
}

@keyframes bounce {
	0%,
	100% {
		transform: translateY(0);
	}
	50% {
		transform: translateY(-20px);
	}
}

/* –°–µ–∫—Ü–∏—è –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤ */
.featuresSection {
	margin: 5rem 0;
	text-align: center;
}

.featuresGrid {
	display: grid;
	grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
	gap: 2rem;
	margin-top: 3rem;
}

.featureCard {
	background: #ffffff;
	border-radius: 12px;
	padding: 2rem;
	box-shadow: 0 4px 6px rgba(49, 130, 206, 0.1);
	transition: transform 0.3s ease;
	border: 1px solid #ebf5ff;

	&:hover {
		transform: translateY(-5px);
		box-shadow: 0 6px 12px rgba(49, 130, 206, 0.15);
	}
}

.featureIcon {
	margin-bottom: 1.5rem;
}

/* –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç */
.howItWorks {
	margin: 5rem 0;
	background: #ebf5ff;
	padding: 3rem;
	border-radius: 12px;
}

.steps {
	margin-top: 2rem;
}

.step {
	display: flex;
	align-items: flex-start;
	gap: 1.5rem;
	margin-bottom: 2rem;
}

.stepNumber {
	background: #3182ce;
	color: white;
	width: 30px;
	height: 30px;
	border-radius: 50%;
	display: flex;
	align-items: center;
	justify-content: center;
	font-weight: bold;
	flex-shrink: 0;
}

/* –û—Ç–∑—ã–≤—ã */
.testimonials {
	margin: 5rem 0;
}

.testimonialCards {
	display: grid;
	grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
	gap: 2rem;
	margin-top: 2rem;
}

.testimonial {
	background: white;
	padding: 2rem;
	border-radius: 12px;
	box-shadow: 0 4px 6px rgba(49, 130, 206, 0.1);
	position: relative;
	border: 1px solid #ebf5ff;
}

.quote {
	font-size: 4rem;
	color: #3182ce;
	opacity: 0.2;
	position: absolute;
	top: 0;
	left: 1rem;
	line-height: 1;
}

.author {
	margin-top: 1rem;
	font-style: italic;
	color: #4a5568;
}

/* –§–∏–Ω–∞–ª—å–Ω—ã–π CTA */
.finalCta {
	text-align: center;
	margin: 5rem 0;
	padding: 3rem;
	background: linear-gradient(135deg, #ebf5ff 0%, #bee3f8 100%);
	border-radius: 12px;
}

.ctaButton {
	background-color: #3182ce;
	border-color: #3182ce;
	padding: 0 2rem;
	height: 50px;
	font-size: 1.1rem;
	margin-top: 1.5rem;

	&:hover {
		background-color: #2b6cb0;
		border-color: #2b6cb0;
	}
}

/* –ê–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å */
@media (max-width: 768px) {
	.heroSection {
		flex-direction: column;
		text-align: center;
	}

	.subtitle {
		margin-left: auto;
		margin-right: auto;
	}

	.ctaButtons {
		justify-content: center;
	}

	.howItWorks {
		padding: 2rem 1rem;
	}
}
```

=== –§–∞–π–ª: pages/ProfilePage/ProfilePage.module.scss ===
```scss
.profileContainer {
	max-width: 1200px;
	margin: 0 auto;
	padding: 2rem;
}

.profileSection {
	display: grid;
	grid-template-columns: 200px 1fr;
	gap: 2rem;
	margin-bottom: 3rem;
}

.animalsSection {
	margin-top: 3rem;
}

.animalsHeader {
	display: flex;
	justify-content: space-between;
	align-items: center;
	margin-bottom: 1.5rem;
}

.animalsGrid {
	display: grid;
	grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
	gap: 1.5rem;
}

.animalImage {
	height: 150px;
	object-fit: cover;
}

.noImage {
	height: 150px;
	background: #f0f0f0;
	display: flex;
	align-items: center;
	justify-content: center;
	color: #666;
}
```

=== –§–∞–π–ª: pages/ProfilePage/ProfilePage.tsx ===
```typescript
import { AddAnimalModal } from '@/components/AddAnimalModal/AddAnimalModal'
import { UserAvatarUpload } from '@/components/UserAvatarUpload/UserAvatarUpload'
import { useUserAnimals } from '@/features/animal/hooks/useUserAnimals'
import { useUser } from '@/features/user/hooks/useUser'
import { PlusOutlined } from '@ant-design/icons'
import { Button, Card, Form, Input, message } from 'antd'
import { useEffect, useState } from 'react'
import { useNavigate } from 'react-router-dom'
import styles from './ProfilePage.module.scss'

interface ProfileFormValues {
	firstName?: string
	lastName?: string
	city?: string
	aboutMe?: string
}

export default function ProfilePage() {
	const [isModalOpen, setIsModalOpen] = useState(false)
	const { currentUser, isPending, updateUser } = useUser()
	const {
		data: animals = [],
		isPending: isAnimalsLoading,
		refetch,
	} = useUserAnimals()
	const [form] = Form.useForm<ProfileFormValues>()
	const navigate = useNavigate()
	useEffect(() => {
		if (currentUser) {
			form.setFieldsValue({
				firstName: currentUser.firstName,
				lastName: currentUser.lastName,
				city: currentUser.city,
				aboutMe: currentUser.aboutMe,
			})
		}
	}, [currentUser, form])

	const onFinish = async (values: ProfileFormValues) => {
		try {
			await updateUser(values)
			message.success('–ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª—ë–Ω!')
		} catch (error) {
			message.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è')
			console.error('Update error:', error)
		}
	}

	const handleAnimalCreated = () => {
		refetch()
		setIsModalOpen(false)
	}

	if (isPending) return <div>–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è...</div>

	return (
		<div className={styles.profileContainer}>
			<h1>–ü—Ä–æ—Ñ–∏–ª—å</h1>

			<div className={styles.profileSection}>
				<UserAvatarUpload currentPhotoUrl={currentUser?.photoUrl} />

				<Form form={form} onFinish={onFinish} layout='vertical'>
					<Form.Item name='firstName' label='–ò–º—è'>
						<Input />
					</Form.Item>
					<Form.Item name='lastName' label='–§–∞–º–∏–ª–∏—è'>
						<Input />
					</Form.Item>
					<Form.Item name='city' label='–ì–æ—Ä–æ–¥'>
						<Input />
					</Form.Item>
					<Form.Item name='aboutMe' label='–û —Å–µ–±–µ'>
						<Input.TextArea rows={4} />
					</Form.Item>
					<Button type='primary' htmlType='submit'>
						–°–æ—Ö—Ä–∞–Ω–∏—Ç—å
					</Button>
				</Form>
			</div>

			<div className={styles.animalsSection}>
				<div className={styles.animalsHeader}>
					<h2>–ú–æ–∏ –∂–∏–≤–æ—Ç–Ω—ã–µ</h2>
					<Button
						type='primary'
						icon={<PlusOutlined />}
						onClick={() => setIsModalOpen(true)}
					>
						–î–æ–±–∞–≤–∏—Ç—å
					</Button>
				</div>

				{isAnimalsLoading ? (
					<div>–ó–∞–≥—Ä—É–∑–∫–∞ –∂–∏–≤–æ—Ç–Ω—ã—Ö...</div>
				) : (
					<div className={styles.animalsGrid}>
						{animals.map(animal => (
							<Card
								key={animal.id}
								hoverable
								onClick={() => navigate(`/animals/${animal.id}`)}
								cover={
									animal.photos?.[0] ? (
										<img
											alt={animal.name}
											src={animal.photos[0]}
											className={styles.animalImage}
										/>
									) : (
										<div className={styles.noImage}>–ù–µ—Ç —Ñ–æ—Ç–æ</div>
									)
								}
							>
								<Card.Meta title={animal.name} />
							</Card>
						))}
					</div>
				)}
			</div>

			<AddAnimalModal
				open={isModalOpen}
				onClose={() => setIsModalOpen(false)}
				onAnimalCreated={handleAnimalCreated}
			/>
		</div>
	)
}
```

=== –§–∞–π–ª: pages/ActivateAccountPage/ActivateAccountPage.tsx ===
```typescript
import { useAuth } from '@/features/auth/hooks/useAuth'
import { Button, Form, Input, message } from 'antd'
import { useNavigate } from 'react-router-dom'
import styles from './ActivateAccountPage.module.scss'

export default function ActivateAccountPage() {
	const [form] = Form.useForm()
	const { activate, isActivating } = useAuth()
	const navigate = useNavigate()

	const onFinish = async (values: { token: string }) => {
		try {
			await activate(values.token)
			message.success('–ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!')
			navigate('/auth/login')
		} catch (error) {
			message.error(`–û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏: ${error ?? '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è'}`)
		}
	}

	return (
		<div className={styles.activateContainer}>
			<h1>–ê–∫—Ç–∏–≤–∞—Ü–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞</h1>
			<p>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏, –≤—ã—Å–ª–∞–Ω–Ω—ã–π –Ω–∞ –≤–∞—à—É –ø–æ—á—Ç—É.</p>

			<Form
				form={form}
				layout='vertical'
				onFinish={onFinish}
				className={styles.activateForm}
			>
				<Form.Item
					name='token'
					rules={[
						{ required: true, message: '–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–∑ –ø–∏—Å—å–º–∞' },
						{ len: 6, message: '–ö–æ–¥ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 6 —Å–∏–º–≤–æ–ª–æ–≤' },
					]}
					className={styles.otpFormItem}
				>
					<div className={styles.otpContainer}>
						<Input.OTP
							length={6}
							type='numeric'
							formatter={str => str.toUpperCase()}
							className={styles.otpInput}
							autoFocus
						/>
					</div>
				</Form.Item>

				<Form.Item>
					<Button
						type='primary'
						htmlType='submit'
						loading={isActivating}
						block
						size='large'
					>
						–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å
					</Button>
				</Form.Item>
			</Form>
		</div>
	)
}
```

=== –§–∞–π–ª: pages/ActivateAccountPage/ActivateAccountPage.module.scss ===
```scss
.activateContainer {
	max-width: 400px;
	margin: 0 auto;
	padding: 2rem;
	background: #fff;
	border: 1px solid #f0f0f0;
	border-radius: 8px;
	box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);

	h1 {
		margin-bottom: 1rem;
		text-align: center;
		color: #333;
	}

	p {
		text-align: center;
		margin-bottom: 2rem;
		color: #666;
	}
	.otpFormItem {
		.ant-form-item-control {
			display: flex;
			flex-direction: column;
			align-items: center;

			/* –°—Ç–∏–ª–∏ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π –æ–± –æ—à–∏–±–∫–∞—Ö */
			.ant-form-item-explain {
				text-align: center;
				width: 100%;
				margin-top: 8px;

				.ant-form-item-explain-error {
					display: inline-block;
					text-align: center;
				}
			}
		}
	}
}

.activateForm {
	.ant-form-item {
		margin-bottom: 1.5rem;

		&:last-child {
			margin-top: 2rem;
		}
	}
}

/* –ù–æ–≤—ã–µ —Å—Ç–∏–ª–∏ –¥–ª—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ OTP */
.otpContainer {
	display: flex;
	justify-content: center;
	width: 100%;
	margin: 1rem 0;
}

/* –°—Ç–∏–ª–∏ –¥–ª—è —Å–∞–º–æ–≥–æ OTP */
.otpInput {
	.ant-input-otp-input {
		width: 48px !important;
		height: 48px !important;
		font-size: 18px !important;
		text-align: center;
		border-radius: 8px;
		border: 2px solid #d9d9d9;
		transition: all 0.3s;

		&:focus {
			border-color: #1890ff;
			box-shadow: 0 0 0 2px rgba(24, 144, 255, 0.2);
		}
	}
}

.ant-btn {
	height: 48px;
	font-size: 16px;
}
```

=== –§–∞–π–ª: pages/LoginPage/LoginPage.tsx ===
```typescript
import { useAuth } from '@/features/auth/hooks/useAuth'
import { Button, Form, Input, message } from 'antd'
import axios from 'axios'
import { useNavigate } from 'react-router-dom'
import styles from './LoginPage.module.scss'

interface LoginFormValues {
	identifier: string
	password: string
}

export default function LoginPage() {
	const [form] = Form.useForm<LoginFormValues>()
	const { login, isLoggingIn } = useAuth()
	const navigate = useNavigate()

	async function onFinish(values: LoginFormValues) {
		try {
			await login({
				indentifier: values.identifier,
				password: values.password,
			})
			message.success('–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!')
			navigate('/')
		} catch (error: unknown) {
			if (axios.isAxiosError(error)) {
				const serverMsg = error.response?.data?.error || error.message
				message.error(`–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ${serverMsg}`)
			} else {
				message.error('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.')
			}
		}
	}

	return (
		<div className={styles.loginContainer}>
			<h1>–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è</h1>
			<Form
				form={form}
				layout='vertical'
				onFinish={onFinish}
				className={styles.loginForm}
			>
				<Form.Item
					label='Email –∏–ª–∏ Username'
					name='identifier'
					rules={[{ required: true, message: '–í–≤–µ–¥–∏—Ç–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä' }]}
				>
					<Input placeholder='–í–≤–µ–¥–∏—Ç–µ email –∏–ª–∏ username' />
				</Form.Item>

				<Form.Item
					label='–ü–∞—Ä–æ–ª—å'
					name='password'
					rules={[{ required: true, message: '–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å' }]}
				>
					<Input.Password placeholder='–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å' />
				</Form.Item>

				<Form.Item>
					<Button
						type='primary'
						htmlType='submit'
						loading={isLoggingIn}
						block // –î–µ–ª–∞–µ—Ç –∫–Ω–æ–ø–∫—É –Ω–∞ –≤—Å—é —à–∏—Ä–∏–Ω—É
					>
						–í–æ–π—Ç–∏
					</Button>
				</Form.Item>
			</Form>
		</div>
	)
}
```

=== –§–∞–π–ª: pages/LoginPage/LoginPage.module.scss ===
```scss
/* –û–±—â–∏–µ —Å—Ç–∏–ª–∏ –¥–ª—è –æ–±–æ–∏—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ */
.registerContainer,
.loginContainer {
	max-width: 400px;
	margin: 0 auto;
	padding: 2rem;
	background-color: #fff;
	border: 1px solid #ddd;
	border-radius: 8px;
	box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);

	h1 {
		text-align: center;
		margin-bottom: 2rem;
		color: #333;
	}
}

/* –°—Ç–∏–ª–∏ –¥–ª—è —Ñ–æ—Ä–º */
.registerForm,
.loginForm {
	.ant-form-item {
		margin-bottom: 1.5rem;

		&:last-child {
			margin-bottom: 0;
		}
	}

	.ant-btn {
		height: 40px;
		font-weight: 500;
	}
}

/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Ç–∏–ª–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è */
.confirm-password {
	margin-top: -0.5rem;
}
```

=== –§–∞–π–ª: pages/DiaryPage/DiaryPage.tsx ===
```typescript
import { useUserAnimals } from '@/features/animal/hooks/useUserAnimals'
import { CalendarOutlined } from '@ant-design/icons'
import { Button, Card, Col, Row, Typography } from 'antd'
import dayjs from 'dayjs'
import { useNavigate } from 'react-router-dom'
import styles from './DiaryPage.module.scss'

const { Title, Text } = Typography

export default function DiaryPage() {
	const { data: animals = [], isPending } = useUserAnimals()
	const navigate = useNavigate()

	if (isPending) return <div>–ó–∞–≥—Ä—É–∑–∫–∞ –∂–∏–≤–æ—Ç–Ω—ã—Ö...</div>

	return (
		<div className={styles.container}>
			<Title level={2}>–î–Ω–µ–≤–Ω–∏–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∂–∏–≤–æ—Ç–Ω—ã—Ö</Title>

			<Row gutter={[16, 16]} className={styles.animalsGrid}>
				{animals.map(animal => (
					<Col xs={24} sm={12} md={8} lg={6} key={animal.id}>
						<Card
							hoverable
							cover={
								animal.photos?.[0] ? (
									<img
										alt={animal.name}
										src={animal.photos[0]}
										className={styles.animalImage}
									/>
								) : (
									<div className={styles.noImage}>–ù–µ—Ç —Ñ–æ—Ç–æ</div>
								)
							}
							actions={[
								<Button
									type='link'
									icon={<CalendarOutlined />}
									onClick={() => navigate(`/animals/${animal.id}/diary`)}
								>
									–î–Ω–µ–≤–Ω–∏–∫
								</Button>,
							]}
						>
							<Card.Meta
								title={animal.name}
								description={
									<Text type='secondary'>
										{animal.birthDate
											? `${dayjs().diff(animal.birthDate, 'year')} –ª–µ—Ç`
											: '–í–æ–∑—Ä–∞—Å—Ç –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω'}
									</Text>
								}
							/>
						</Card>
					</Col>
				))}
			</Row>
		</div>
	)
}
```

=== –§–∞–π–ª: pages/DiaryPage/DiaryPage.module.scss ===
```scss

```

=== –§–∞–π–ª: pages/NotFoundPage/NotFoundPage.tsx ===
```typescript
import styles from './NotFoundPage.module.scss'

export default function NotFoundPage() {
	return (
		<div className={styles.homeContainer}>
			<h1>NotFoundPage —Å—Ç—Ä–∞–Ω–∏—Ü–∞</h1>
			<p>–¢—É—Ç –±—É–¥–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç...</p>
		</div>
	)
}
```

=== –§–∞–π–ª: pages/NotFoundPage/NotFoundPage.module.scss ===
```scss

```

=== –§–∞–π–ª: pages/AnimalPage/AnimalPage.module.scss ===
```scss
.container {
	max-width: 1200px;
	margin: 0 auto;
	padding: 20px;
}

.backButton {
	margin-bottom: 20px;
}

.sectionsContainer {
	display: grid;
	grid-template-columns: 1fr;
	gap: 20px;
}

.section {
	margin-bottom: 20px;
}

.cardTitleWithButton {
	display: flex;
	justify-content: space-between;
	align-items: center;
}

.attributesList {
	display: flex;
	flex-direction: column;
	gap: 8px;
	margin-top: 15px;
}

.attributeItem {
	display: flex;
	justify-content: space-between;
	align-items: center;
	padding: 8px;
	border: 1px solid #f0f0f0;
	border-radius: 4px;
}

.attributeContent {
	flex-grow: 1;
}

.newAttribute {
	display: grid;
	grid-template-columns: 1fr 1fr auto;
	gap: 10px;
	margin-bottom: 15px;
	align-items: center;
}

.tip {
	grid-column: 1 / -1;
	font-size: 0.8em;
	color: #666;
}

.photosGrid {
	display: grid;
	grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));
	gap: 15px;
	margin-top: 15px;
}

.photoWrapper {
	position: relative;
	border: 1px solid #f0f0f0;
	border-radius: 4px;
	overflow: hidden;
	height: 150px;
}

.photoActions {
	position: absolute;
	bottom: 5px;
	right: 5px;
	display: flex;
	gap: 5px;
}

.viewIcon,
.deleteIcon {
	background: rgba(0, 0, 0, 0.5);
	color: white;
	padding: 5px;
	border-radius: 50%;
	cursor: pointer;
	font-size: 16px;
}

.deleteIcon:hover {
	color: #ff4d4f;
}

.documentsList {
	display: flex;
	flex-direction: column;
	gap: 8px;
	margin-top: 15px;
}

.documentItem {
	display: flex;
	justify-content: space-between;
	align-items: center;
	padding: 8px;
	border: 1px solid #f0f0f0;
	border-radius: 4px;
}

.darkIcon {
	color: rgba(0, 0, 0, 0.85);
}

.photoModal {
	display: flex;
	flex-direction: column;
	align-items: center;
	gap: 15px;
}
.pageHeader {
	display: flex;
	justify-content: space-between;
	align-items: center;
	margin-bottom: 20px;
}
.photoNavigation {
	display: flex;
	justify-content: center;
	align-items: center;
	gap: 20px;
	padding: 15px;
}
```

=== –§–∞–π–ª: pages/AnimalPage/AnimalPage.tsx ===
```typescript
import { FileUpload } from '@/components/FileUpload/FileUpload'
import { animalApi } from '@/features/animal/api/animalApi'
import { exportApi } from '@/features/animal/api/exportApi'
import {
	AnimalResponse,
	AnimalUpdateRequest,
} from '@/features/animal/api/types'
import {
	BookOutlined,
	DeleteOutlined,
	EditOutlined,
	EyeOutlined,
	FilePdfOutlined,
	PlusOutlined,
	UploadOutlined,
} from '@ant-design/icons'
import { useMutation, useQuery, useQueryClient } from '@tanstack/react-query'
import {
	Button,
	Card,
	DatePicker,
	Form,
	Image,
	Input,
	InputNumber,
	message,
	Modal,
	Space,
	Typography,
} from 'antd'
import dayjs from 'dayjs'
import { useState } from 'react'
import { useNavigate, useParams } from 'react-router-dom'
import styles from './AnimalPage.module.scss'

const { Title, Text } = Typography

export const AnimalPage = () => {
	const { id } = useParams<{ id: string }>()
	const navigate = useNavigate()
	const queryClient = useQueryClient()
	const [form] = Form.useForm()
	const [isEditing, setIsEditing] = useState(false)
	const [isPhotoModalOpen, setIsPhotoModalOpen] = useState(false)
	const [selectedPhotoIndex, setSelectedPhotoIndex] = useState(0)
	const [newAttribute, setNewAttribute] = useState<{
		name: string
		value: string
	}>({ name: '', value: '' })

	// –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∂–∏–≤–æ—Ç–Ω–æ–≥–æ
	const { data: animal, isPending } = useQuery<AnimalResponse>({
		queryKey: ['animal', id],
		queryFn: () => animalApi.getAnimal(Number(id!)),
	})

	// –ú—É—Ç–∞—Ü–∏–∏
	const updateAnimal = useMutation({
		mutationFn: (data: AnimalUpdateRequest) =>
			animalApi.updateAnimal(Number(id!), data),
		onSuccess: () => {
			message.success('–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!')
			queryClient.invalidateQueries({ queryKey: ['animal', id] })
			setIsEditing(false)
		},
	})

	const addPhoto = useMutation({
		mutationFn: (file: File) => animalApi.uploadAnimalPhoto(Number(id!), file),
		onSuccess: () => {
			message.success('–§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!')
			queryClient.invalidateQueries({ queryKey: ['animal', id] })
		},
	})

	const deletePhoto = useMutation({
		mutationFn: (photoUrl: string) => animalApi.deleteAnimalPhoto(photoUrl),
		onSuccess: () => {
			message.success('–§–æ—Ç–æ —É–¥–∞–ª–µ–Ω–æ!')
			queryClient.invalidateQueries({ queryKey: ['animal', id] })
		},
	})

	const addDocument = useMutation({
		mutationFn: ({ file, type }: { file: File; type: string }) =>
			animalApi.uploadAnimalDocument(Number(id!), file, type),
		onSuccess: () => {
			message.success('–î–æ–∫—É–º–µ–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω!')
			queryClient.invalidateQueries({ queryKey: ['animal', id] })
		},
	})

	const deleteDocument = useMutation({
		mutationFn: (documentUrl: string) =>
			animalApi.deleteAnimalDocument(documentUrl),
		onSuccess: () => {
			message.success('–î–æ–∫—É–º–µ–Ω—Ç —É–¥–∞–ª–µ–Ω!')
			queryClient.invalidateQueries({ queryKey: ['animal', id] })
		},
	})

	const addAttribute = useMutation({
		mutationFn: (data: { name: string; value: string }) =>
			animalApi.addAttribute(Number(id!), data),
		onSuccess: () => {
			message.success('–ê—Ç—Ä–∏–±—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω!')
			queryClient.invalidateQueries({ queryKey: ['animal', id] })
			setNewAttribute({ name: '', value: '' })
		},
	})

	const deleteAttribute = useMutation({
		mutationFn: (attributeId: number) =>
			animalApi.deleteAttribute(Number(id!), attributeId),
		onSuccess: () => {
			message.success('–ê—Ç—Ä–∏–±—É—Ç —É–¥–∞–ª–µ–Ω!')
			queryClient.invalidateQueries({ queryKey: ['animal', id] })
		},
	})
	const exportToPdf = useMutation({
		mutationFn: () => exportApi.exportAnimalToPdf(Number(id!)),
		onSuccess: (pdfBlob: Blob) => {
			const url = window.URL.createObjectURL(pdfBlob)
			const link = document.createElement('a')
			link.href = url
			link.setAttribute('download', `animal_${animal?.name}_report.pdf`)
			document.body.appendChild(link)
			link.click()
			document.body.removeChild(link)

			// –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –ø–∞–º—è—Ç—å
			setTimeout(() => {
				window.URL.revokeObjectURL(url)
			}, 100)
		},
		onError: error => {
			console.error('Export failed:', error)
			message.error('–ù–µ —É–¥–∞–ª–æ—Å—å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ PDF')
		},
	})
	// const exportToPdf = useMutation({
	// 	mutationFn: () => exportApi.exportAnimalToPdf(Number(id!)),
	// 	onSuccess: pdfData => {
	// 		const blob = new Blob([pdfData], { type: 'application/pdf' })
	// 		const url = window.URL.createObjectURL(blob)
	// 		const link = document.createElement('a')
	// 		link.href = url
	// 		link.setAttribute('download', `animal_${animal?.name}_report.pdf`)
	// 		document.body.appendChild(link)
	// 		link.click()
	// 		document.body.removeChild(link)
	// 	},
	// })
	const handleSave = () => {
		const values = form.getFieldsValue()
		updateAnimal.mutate({
			...values,
			birthDate: values.birthDate?.format('YYYY-MM-DD'),
		})
	}

	const handleAddAttribute = () => {
		if (!newAttribute.name || !newAttribute.value) {
			message.warning('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –∑–Ω–∞—á–µ–Ω–∏–µ –∞—Ç—Ä–∏–±—É—Ç–∞')
			return
		}
		addAttribute.mutate(newAttribute)
	}

	const handleDeletePhoto = (photoUrl: string, e: React.MouseEvent) => {
		e.stopPropagation()
		deletePhoto.mutate(photoUrl)
	}

	const handleDeleteDocument = (documentUrl: string) => {
		deleteDocument.mutate(documentUrl)
	}

	if (isPending) return <div>–ó–∞–≥—Ä—É–∑–∫–∞...</div>
	if (!animal) return <div>–ñ–∏–≤–æ—Ç–Ω–æ–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</div>

	return (
		<div className={styles.container}>
			<Button onClick={() => navigate(-1)} className={styles.backButton}>
				–ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É
			</Button>
			<Space>
				<Button
					type='default'
					icon={<BookOutlined />}
					onClick={() => navigate(`/animals/${id}/diary`)}
				>
					–î–Ω–µ–≤–Ω–∏–∫
				</Button>
				<Button
					type='primary'
					icon={<FilePdfOutlined />}
					onClick={() => exportToPdf.mutate()}
					loading={exportToPdf.isPending}
				>
					–≠–∫—Å–ø–æ—Ä—Ç –≤ PDF
				</Button>
			</Space>
			<Title level={2}>{animal.name}</Title>

			<div className={styles.sectionsContainer}>
				{/* –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
				<Card
					title='–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è'
					extra={
						isEditing ? null : (
							<EditOutlined onClick={() => setIsEditing(true)} />
						)
					}
					className={styles.section}
				>
					{isEditing ? (
						<Form
							form={form}
							initialValues={{
								name: animal.name,
								description: animal.description,
								birthDate: animal.birthDate ? dayjs(animal.birthDate) : null,
								mass: animal.mass,
							}}
							layout='vertical'
						>
							<Form.Item name='name' label='–ò–º—è'>
								<Input />
							</Form.Item>
							<Form.Item name='description' label='–û–ø–∏—Å–∞–Ω–∏–µ'>
								<Input.TextArea rows={3} />
							</Form.Item>
							<Form.Item name='birthDate' label='–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è'>
								<DatePicker style={{ width: '100%' }} />
							</Form.Item>
							<Form.Item name='mass' label='–í–µ—Å (–∫–≥)'>
								<Input type='number' />
							</Form.Item>
							<Form.Item name='height' label='–†–æ—Å—Ç (—Å–º)'>
								<Input type='number' step='0.1' />
							</Form.Item>

							<Form.Item name='temperature' label='–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (¬∞C)'>
								<Input type='number' step='0.1' />
							</Form.Item>

							<Form.Item name='activityLevel' label='–£—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (1-10)'>
								<InputNumber min={1} max={10} />
							</Form.Item>

							<Form.Item name='appetiteLevel' label='–£—Ä–æ–≤–µ–Ω—å –∞–ø–ø–µ—Ç–∏—Ç–∞ (1-10)'>
								<InputNumber min={1} max={10} />
							</Form.Item>
							<Space>
								<Button type='primary' onClick={handleSave}>
									–°–æ—Ö—Ä–∞–Ω–∏—Ç—å
								</Button>
								<Button onClick={() => setIsEditing(false)}>–û—Ç–º–µ–Ω–∞</Button>
							</Space>
						</Form>
					) : (
						<>
							<p>
								<Text strong>–û–ø–∏—Å–∞–Ω–∏–µ:</Text> {animal.description || '‚Äî'}
							</p>
							<p>
								<Text strong>–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è:</Text> {animal.birthDate || '‚Äî'}
							</p>
							<p>
								<Text strong>–í–µ—Å:</Text>{' '}
								{animal.mass ? `${animal.mass} –∫–≥` : '‚Äî'}
							</p>
						</>
					)}
				</Card>

				{/* –ê—Ç—Ä–∏–±—É—Ç—ã */}
				<Card
					title={
						<div className={styles.cardTitleWithButton}>
							<span>–ê—Ç—Ä–∏–±—É—Ç—ã</span>
						</div>
					}
					className={styles.section}
				>
					{newAttribute.name !== undefined && (
						<div className={styles.newAttribute}>
							<Input
								placeholder='–ù–∞–∑–≤–∞–Ω–∏–µ –∞—Ç—Ä–∏–±—É—Ç–∞'
								value={newAttribute.name}
								onChange={e =>
									setNewAttribute({ ...newAttribute, name: e.target.value })
								}
							/>
							<Input
								placeholder='–ó–Ω–∞—á–µ–Ω–∏–µ'
								value={newAttribute.value}
								onChange={e =>
									setNewAttribute({ ...newAttribute, value: e.target.value })
								}
							/>
							<Button
								type='primary'
								icon={<PlusOutlined />}
								onClick={handleAddAttribute}
							>
								–î–æ–±–∞–≤–∏—Ç—å
							</Button>
							<Text type='secondary' className={styles.tip}>
								–ü—Ä–∏–º–µ—Ä—ã: –ü–æ—Ä–æ–¥–∞, –¶–≤–µ—Ç, –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏, –ê–ª–ª–µ—Ä–≥–∏–∏
							</Text>
						</div>
					)}

					<div className={styles.attributesList}>
						{animal.attributes.map(attr => (
							<div key={attr.id} className={styles.attributeItem}>
								<div className={styles.attributeContent}>
									<Text strong>{attr.name}:</Text> {attr.value || '‚Äî'}
								</div>
								<Button
									type='text'
									danger
									icon={<DeleteOutlined />}
									onClick={() => deleteAttribute.mutate(attr.id)}
									loading={deleteAttribute.isPending}
								/>
							</div>
						))}
						{animal.attributes.length === 0 && (
							<Text type='secondary'>–ù–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∞—Ç—Ä–∏–±—É—Ç–æ–≤</Text>
						)}
					</div>
				</Card>

				{/* –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ */}
				<Card title='–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏' className={styles.section}>
					<FileUpload
						beforeUpload={(file: File) => {
							addPhoto.mutate(file)
							return false
						}}
						accept='image/*'
						showUploadList={false}
						buttonText={'–î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ +'}
						buttonIcon={undefined}
					>
						<Button
							type='text'
							icon={<UploadOutlined className={styles.darkIcon} />}
						>
							–î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ
						</Button>
					</FileUpload>

					<div className={styles.photosGrid}>
						{animal.photos.map((photo, index) => (
							<div key={index} className={styles.photoWrapper}>
								<Image
									src={photo}
									alt={`–§–æ—Ç–æ ${animal.name}`}
									width={150}
									height={150}
									preview={{
										visible: false,
										onVisibleChange: visible => {
											if (visible) {
												setSelectedPhotoIndex(index)
												setIsPhotoModalOpen(true)
											}
										},
									}}
								/>
								<div className={styles.photoActions}>
									<EyeOutlined
										className={styles.viewIcon}
										onClick={() => {
											setSelectedPhotoIndex(index)
											setIsPhotoModalOpen(true)
										}}
									/>
									<DeleteOutlined
										className={styles.deleteIcon}
										onClick={e => handleDeletePhoto(photo, e)}
									/>
								</div>
							</div>
						))}
						{animal.photos.length === 0 && (
							<Text type='secondary'>–ù–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ñ–æ—Ç–æ</Text>
						)}
					</div>
				</Card>

				{/* –î–æ–∫—É–º–µ–Ω—Ç—ã */}
				<Card title='–î–æ–∫—É–º–µ–Ω—Ç—ã' className={styles.section}>
					<FileUpload
						beforeUpload={(file: File) => {
							addDocument.mutate({ file, type: 'OTHER' })
							return false
						}}
						accept='.pdf,.doc,.docx'
						showUploadList={false}
						buttonText={'–î–æ–±–∞–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç +'}
						buttonIcon={undefined}
					>
						<Button
							type='text'
							icon={<UploadOutlined className={styles.darkIcon} />}
						>
							–î–æ–±–∞–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç
						</Button>
					</FileUpload>

					<div className={styles.documentsList}>
						{animal.documents.map((doc, index) => (
							<div key={index} className={styles.documentItem}>
								<a href={doc} target='_blank' rel='noopener noreferrer'>
									–î–æ–∫—É–º–µ–Ω—Ç {index + 1}
								</a>
								<Button
									type='text'
									danger
									icon={<DeleteOutlined />}
									onClick={() => handleDeleteDocument(doc)}
									loading={deleteDocument.isPending}
								/>
							</div>
						))}
						{animal.documents.length === 0 && (
							<Text type='secondary'>–ù–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤</Text>
						)}
					</div>
				</Card>
			</div>

			{/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ñ–æ—Ç–æ */}
			<Modal
				open={isPhotoModalOpen}
				footer={null}
				onCancel={() => setIsPhotoModalOpen(false)}
				width='80vw'
				bodyStyle={{ padding: 0 }}
			>
				<div className={styles.photoModal}>
					<Image
						src={animal.photos[selectedPhotoIndex]}
						alt={`–§–æ—Ç–æ ${animal.name}`}
						style={{ maxHeight: '80vh', objectFit: 'contain' }}
					/>
					{animal.photos.length > 1 && (
						<div className={styles.photoNavigation}>
							<Button
								onClick={() =>
									setSelectedPhotoIndex(
										prev =>
											(prev - 1 + animal.photos.length) % animal.photos.length
									)
								}
							>
								–ù–∞–∑–∞–¥
							</Button>
							<span>
								{selectedPhotoIndex + 1} / {animal.photos.length}
							</span>
							<Button
								onClick={() =>
									setSelectedPhotoIndex(
										prev => (prev + 1) % animal.photos.length
									)
								}
							>
								–í–ø–µ—Ä–µ–¥
							</Button>
						</div>
					)}
				</div>
			</Modal>
		</div>
	)
}
```

=== –§–∞–π–ª: pages/RegisterPage/RegisterPage.tsx ===
```typescript
import { useAuth } from '@/features/auth/hooks/useAuth'
import { Button, Form, Input, message } from 'antd'
import axios from 'axios'
import { useNavigate } from 'react-router-dom'
import styles from './RegisterPage.module.scss'

interface RegisterFormValues {
	username: string
	email: string
	password: string
	confirmPassword: string
}

export default function RegisterPage() {
	const [form] = Form.useForm<RegisterFormValues>()
	const { register, isRegistering } = useAuth()
	const navigate = useNavigate()

	async function onFinish(values: RegisterFormValues) {
		try {
			await register({
				username: values.username,
				email: values.email,
				password: values.password,
			})
			message.success(
				'–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ—á—Ç—É –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏.'
			)
			navigate('/auth/activate')
		} catch (error: unknown) {
			if (axios.isAxiosError(error)) {
				const serverMsg = error.response?.data?.error || error.message
				message.error(`–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ${serverMsg}`)
			} else {
				message.error('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.')
			}
		}
	}

	return (
		<div className={styles.registerContainer}>
			<h1>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è</h1>
			<Form
				form={form}
				layout='vertical'
				onFinish={onFinish}
				className={styles.registerForm}
			>
				<Form.Item
					label='–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
					name='username'
					rules={[{ required: true, message: '–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' }]}
				>
					<Input placeholder='–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' />
				</Form.Item>

				<Form.Item
					label='Email'
					name='email'
					rules={[
						{ required: true, message: '–í–≤–µ–¥–∏—Ç–µ email' },
						{ type: 'email', message: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email' },
					]}
				>
					<Input placeholder='–í–≤–µ–¥–∏—Ç–µ email' />
				</Form.Item>

				<Form.Item
					label='–ü–∞—Ä–æ–ª—å'
					name='password'
					rules={[
						{ required: true, message: '–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å' },
						{ min: 6, message: '–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 6 —Å–∏–º–≤–æ–ª–æ–≤' },
					]}
				>
					<Input.Password placeholder='–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å' />
				</Form.Item>

				<Form.Item
					label='–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å'
					name='confirmPassword'
					dependencies={['password']}
					rules={[
						{ required: true, message: '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å' },
						({ getFieldValue }) => ({
							validator(_, value) {
								if (!value || getFieldValue('password') === value) {
									return Promise.resolve()
								}
								return Promise.reject(new Error('–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç!'))
							},
						}),
					]}
				>
					<Input.Password placeholder='–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–∞—Ä–æ–ª—å' />
				</Form.Item>

				<Form.Item>
					<Button
						type='primary'
						htmlType='submit'
						loading={isRegistering}
						block // –î–µ–ª–∞–µ—Ç –∫–Ω–æ–ø–∫—É –Ω–∞ –≤—Å—é —à–∏—Ä–∏–Ω—É
					>
						–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è
					</Button>
				</Form.Item>
			</Form>
		</div>
	)
}
```

=== –§–∞–π–ª: pages/RegisterPage/RegisterPage.module.scss ===
```scss
/* –û–±—â–∏–µ —Å—Ç–∏–ª–∏ –¥–ª—è –æ–±–æ–∏—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ */
.registerContainer,
.loginContainer {
	max-width: 400px;
	margin: 0 auto;
	padding: 2rem;
	background-color: #fff;
	border: 1px solid #ddd;
	border-radius: 8px;
	box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);

	h1 {
		text-align: center;
		margin-bottom: 2rem;
		color: #333;
	}
}

/* –°—Ç–∏–ª–∏ –¥–ª—è —Ñ–æ—Ä–º */
.registerForm,
.loginForm {
	.ant-form-item {
		margin-bottom: 1.5rem;

		&:last-child {
			margin-bottom: 0;
		}
	}

	.ant-btn {
		height: 40px;
		font-weight: 500;
	}
}

/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Ç–∏–ª–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è */
.confirm-password {
	margin-top: -0.5rem;
}
```

=== –§–∞–π–ª: pages/AnimalDiaryPage/AnimalDiaryPage.tsx ===
```typescript
// pages/AnimalDiaryPage/AnimalDiaryPage.tsx
import { FileUpload } from '@/components/FileUpload/FileUpload'
import { ParameterHistory } from '@/components/ParametrHistory/ParameterHistory'
import { diaryApi } from '@/features/diary/api/diaryApi'
import { StatusLogCreateRequest } from '@/features/diary/api/types'
import { useMutation, useQuery, useQueryClient } from '@tanstack/react-query'
import {
	Button,
	Calendar,
	Card,
	Form,
	Image,
	Input,
	message,
	Modal,
	Typography,
} from 'antd'
import dayjs, { Dayjs } from 'dayjs'
import { useState } from 'react'
import { useNavigate, useParams } from 'react-router-dom'
import styles from './AnimalDiaryPage.module.scss'

const { Title } = Typography

export const AnimalDiaryPage = () => {
	const { id } = useParams<{ id: string }>()
	const navigate = useNavigate()
	const queryClient = useQueryClient()
	const [form] = Form.useForm()
	const [selectedDate, setSelectedDate] = useState<Dayjs>(dayjs())
	const [isPhotoModalOpen, setIsPhotoModalOpen] = useState(false)
	const [selectedPhotoIndex, setSelectedPhotoIndex] = useState(0)

	// –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π –¥–Ω–µ–≤–Ω–∏–∫–∞
	const { data: diaryEntries } = useQuery({
		queryKey: ['diaryEntries', id],
		queryFn: () => diaryApi.getStatusLogs(Number(id!)),
	})

	// –ú—É—Ç–∞—Ü–∏–∏
	const createMutation = useMutation({
		mutationFn: (data: StatusLogCreateRequest) =>
			diaryApi.createStatusLog(Number(id!), data),
		onSuccess: () => {
			queryClient.invalidateQueries({ queryKey: ['diaryEntries', id] })
		},
	})

	const updateMutation = useMutation({
		mutationFn: (data: StatusLogCreateRequest) => {
			const entry = diaryEntries?.data?.find(e =>
				dayjs(e.logDate).isSame(selectedDate, 'day')
			)
			if (!entry) throw new Error('–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞')
			return diaryApi.updateStatusLog(Number(id!), entry.id, data)
		},
		onSuccess: () => {
			queryClient.invalidateQueries({ queryKey: ['diaryEntries', id] })
		},
	})

	const addPhotoMutation = useMutation({
		mutationFn: async (file: File) => {
			const entry = diaryEntries?.data?.find(e =>
				dayjs(e.logDate).isSame(selectedDate, 'day')
			)
			if (!entry) throw new Error('–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞')
			return diaryApi.addStatusLogPhoto(Number(id!), entry.id, file)
		},
		onSuccess: () => {
			queryClient.invalidateQueries({ queryKey: ['diaryEntries', id] })
		},
	})

	const currentEntry = diaryEntries?.data?.find(e =>
		dayjs(e.logDate).isSame(selectedDate, 'day')
	)
	const addDocumentMutation = useMutation({
		mutationFn: async (file: File) => {
			const entry = diaryEntries?.data?.find(e =>
				dayjs(e.logDate).isSame(selectedDate, 'day')
			)

			if (!entry?.id) {
				throw new Error('–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∑–∞–ø–∏—Å—å –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞')
			}

			return diaryApi.addStatusLogDocument(
				Number(id!),
				entry.id,
				file,
				'MEDICAL'
			)
		},
		onSuccess: () => {
			queryClient.invalidateQueries({ queryKey: ['diaryEntries', id] })
		},
	})
	const handleSave = async (values: StatusLogCreateRequest) => {
		try {
			const data = {
				...values,
				logDate: selectedDate.format('YYYY-MM-DD'),
			}

			if (
				diaryEntries?.data?.some(e =>
					dayjs(e.logDate).isSame(selectedDate, 'day')
				)
			) {
				await updateMutation.mutateAsync(data)
			} else {
				await createMutation.mutateAsync(data)
			}
			message.success('–ó–∞–ø–∏—Å—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞')
		} catch (error) {
			message.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è')
			console.log(error)
		}
	}

	const dateCellRender = (date: Dayjs) => {
		const hasEntry = diaryEntries?.data?.some(e =>
			dayjs(e.logDate).isSame(date, 'day')
		)
		return hasEntry ? <div className={styles.calendarDot} /> : null
	}

	return (
		<div className={styles.container}>
			<Button onClick={() => navigate(-1)} className={styles.backButton}>
				–ù–∞–∑–∞–¥ –∫ –∂–∏–≤–æ—Ç–Ω–æ–º—É
			</Button>

			<Title level={2} className={styles.title}>
				–î–Ω–µ–≤–Ω–∏–∫ –Ω–∞–±–ª—é–¥–µ–Ω–∏–π
			</Title>

			<div className={styles.layout}>
				<div className={styles.calendarSection}>
					<Calendar
						value={selectedDate}
						onChange={setSelectedDate}
						dateCellRender={dateCellRender}
						className={styles.calendar}
					/>
				</div>

				<Card className={styles.entryCard}>
					<Form
						form={form}
						initialValues={currentEntry}
						onFinish={handleSave}
						layout='vertical'
					>
						<Form.Item label='–î–∞—Ç–∞ –∑–∞–ø–∏—Å–∏'>
							<Input disabled value={selectedDate.format('DD.MM.YYYY')} />
						</Form.Item>

						<Form.Item label='–ó–∞–º–µ—Ç–∫–∏' name='notes'>
							<Input.TextArea
								rows={4}
								placeholder='–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è...'
							/>
						</Form.Item>

						<div className={styles.parametersGrid}>
							<Form.Item label='–ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤–µ—Å–∞ (–∫–≥)' name='massChange'>
								<Input type='number' step='0.1' />
							</Form.Item>

							<Form.Item label='–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–æ—Å—Ç–∞ (—Å–º)' name='heightChange'>
								<Input type='number' step='0.1' />
							</Form.Item>

							<Form.Item
								label='–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã (¬∞C)'
								name='temperatureChange'
							>
								<Input type='number' step='0.1' />
							</Form.Item>

							<Form.Item
								label='–£—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (1-10)'
								name='activityLevelChange'
							>
								<Input type='number' min={1} max={10} />
							</Form.Item>

							<Form.Item
								label='–£—Ä–æ–≤–µ–Ω—å –∞–ø–ø–µ—Ç–∏—Ç–∞ (1-10)'
								name='appetiteLevelChange'
							>
								<Input type='number' min={1} max={10} />
							</Form.Item>
						</div>

						{currentEntry && currentEntry?.photos?.length > 0 && (
							<div className={styles.photosSection}>
								<h3>–ü—Ä–∏–∫—Ä–µ–ø–ª—ë–Ω–Ω—ã–µ —Ñ–æ—Ç–æ</h3>
								<div className={styles.photosGrid}>
									{currentEntry.photos.map((photo: string, index: number) => (
										<div key={index} className={styles.photoItem}>
											<Image
												src={photo}
												preview={{ visible: false }}
												onClick={() => {
													setSelectedPhotoIndex(index)
													setIsPhotoModalOpen(true)
												}}
											/>
										</div>
									))}
								</div>
							</div>
						)}

						<div className={styles.uploadSection}>
							<FileUpload
								beforeUpload={(file: File) => {
									addPhotoMutation.mutate(file)
									return false
								}}
								accept='image/*'
								buttonText='–î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ'
								buttonIcon={undefined}
							/>
						</div>
						<div className={styles.uploadSection}>
							<FileUpload
								beforeUpload={(file: File) => {
									addDocumentMutation.mutate(file)
									return false
								}}
								accept='.pdf,.doc,.docx'
								buttonText='–î–æ–±–∞–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç'
								buttonIcon={undefined}
							/>
						</div>
						{currentEntry?.parameterChanges && (
							<ParameterHistory changes={currentEntry.parameterChanges} />
						)}

						<Button
							type='primary'
							htmlType='submit'
							loading={createMutation.isPending || updateMutation.isPending}
							className={styles.saveButton}
						>
							–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
						</Button>
					</Form>
				</Card>
			</div>

			<Modal
				open={isPhotoModalOpen}
				footer={null}
				onCancel={() => setIsPhotoModalOpen(false)}
				width='80vw'
				destroyOnClose
			>
				{currentEntry?.photos?.[selectedPhotoIndex] && (
					<Image
						src={currentEntry.photos[selectedPhotoIndex]}
						style={{ maxHeight: '80vh', objectFit: 'contain' }}
					/>
				)}
			</Modal>
		</div>
	)
}
```

=== –§–∞–π–ª: pages/AnimalDiaryPage/AnimalDiaryPage.module.scss ===
```scss
// pages/AnimalDiaryPage/AnimalDiaryPage.module.scss
.container {
	padding: 24px;
	max-width: 1200px;
	margin: 0 auto;
}

.backButton {
	margin-bottom: 16px;
}

.title {
	margin-bottom: 24px !important;
	text-align: center;
}

.layout {
	display: grid;
	grid-template-columns: 350px 1fr;
	gap: 24px;
}

.calendarSection {
	position: sticky;
	top: 24px;
}

.calendar {
	border: 1px solid #f0f0f0;
	border-radius: 8px;
	padding: 12px;
	background: white;

	:global(.ant-picker-cell-inner) {
		min-height: 36px;
		display: flex;
		align-items: center;
		justify-content: center;
	}
}

.calendarDot {
	position: absolute;
	bottom: 2px;
	width: 6px;
	height: 6px;
	background: #1890ff;
	border-radius: 50%;
}

.entryCard {
	border-radius: 8px;
	box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
}

.parametersGrid {
	display: grid;
	grid-template-columns: repeat(2, 1fr);
	gap: 16px;
	margin: 16px 0;
}

.photosSection {
	margin: 24px 0;

	h3 {
		margin-bottom: 12px;
		color: #1890ff;
	}
}

.photosGrid {
	display: grid;
	grid-template-columns: repeat(auto-fill, minmax(120px, 1fr));
	gap: 12px;
}

.photoItem {
	border: 1px solid #f0f0f0;
	border-radius: 4px;
	overflow: hidden;
	cursor: pointer;
	transition: transform 0.2s;

	&:hover {
		transform: scale(1.05);
	}

	img {
		width: 100%;
		height: 120px;
		object-fit: cover;
	}
}

.uploadSection {
	margin: 16px 0;
}

.saveButton {
	width: 100%;
	margin-top: 24px;
	height: 40px;
}
```

=== –§–∞–π–ª: router/AppRouter.tsx ===
```typescript
import { createBrowserRouter, RouterProvider } from 'react-router-dom'

import { AuthLayout } from '@/layouts/AuthLayout/AuthLayout'
import { MainLayout } from '@/layouts/MainLayout/MainLayout'

import ActivateAccountPage from '@/pages/ActivateAccountPage/ActivateAccountPage'
import { AnimalDiaryPage } from '@/pages/AnimalDiaryPage/AnimalDiaryPage'
import { AnimalPage } from '@/pages/AnimalPage/AnimalPage'
import DiaryPage from '@/pages/DiaryPage/DiaryPage'
import HomePage from '@/pages/HomePage/HomePage'
import LoginPage from '@/pages/LoginPage/LoginPage'
import NotFoundPage from '@/pages/NotFoundPage/NotFoundPage'
import ProfilePage from '@/pages/ProfilePage/ProfilePage'
import RegisterPage from '@/pages/RegisterPage/RegisterPage'

const router = createBrowserRouter([
	{
		path: '/auth',
		element: <AuthLayout />,
		children: [
			{ path: 'login', element: <LoginPage /> },
			{ path: 'register', element: <RegisterPage /> },
			{ path: 'activate', element: <ActivateAccountPage /> },
			{ path: '*', element: <NotFoundPage /> },
		],
	},
	{
		path: '/',
		element: <MainLayout />,
		children: [
			{ index: true, element: <HomePage /> },
			{
				path: 'animals/:id/diary',
				element: <AnimalDiaryPage />,
			},
			{ path: 'animals/:id', element: <AnimalPage /> },
			{ path: 'diary', element: <DiaryPage /> },
			{ path: 'profile', element: <ProfilePage /> },
			{ path: '*', element: <NotFoundPage /> },
		],
	},
])

export function AppRouter() {
	return <RouterProvider router={router} />
}
```

=== –§–∞–π–ª: components/ParameterEditForm/ParameterEditForm.tsx ===
```typescript
import { ParameterType } from '@/features/diary/api/types'
import { Button, Form, InputNumber, Space, Typography } from 'antd'

interface ParameterEditFormProps {
	initialValues?: Partial<Record<ParameterType, number>>
	onSave: (values: Record<ParameterType, number | undefined>) => void
}

export const ParameterEditForm = ({
	initialValues,
	onSave,
}: ParameterEditFormProps) => {
	const [form] = Form.useForm()

	return (
		<Form
			form={form}
			initialValues={initialValues}
			layout='vertical'
			onFinish={onSave}
		>
			<Typography.Title level={5}>–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤</Typography.Title>

			<Form.Item name='mass' label='–í–µ—Å (–∫–≥)'>
				<InputNumber step={0.1} precision={1} />
			</Form.Item>

			<Form.Item name='height' label='–†–æ—Å—Ç (—Å–º)'>
				<InputNumber step={0.1} precision={1} />
			</Form.Item>

			<Form.Item name='temperature' label='–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (¬∞C)'>
				<InputNumber step={0.1} precision={1} />
			</Form.Item>

			<Form.Item name='activityLevel' label='–£—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (1-10)'>
				<InputNumber min={1} max={10} />
			</Form.Item>

			<Form.Item name='appetiteLevel' label='–£—Ä–æ–≤–µ–Ω—å –∞–ø–ø–µ—Ç–∏—Ç–∞ (1-10)'>
				<InputNumber min={1} max={10} />
			</Form.Item>

			<Space>
				<Button type='primary' htmlType='submit'>
					–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
				</Button>
				<Button onClick={() => form.resetFields()}>–°–±—Ä–æ—Å–∏—Ç—å</Button>
			</Space>
		</Form>
	)
}
```

=== –§–∞–π–ª: components/ParametrHistory/ParameterHistory.tsx ===
```typescript
// components/ParameterHistory/ParameterHistory.tsx

import { ParameterChangeResponse } from '@/features/animal/api/types'
import styles from './ParameterHistory.module.scss'
export const ParameterHistory = ({
	changes,
}: {
	changes: ParameterChangeResponse[]
}) => {
	return (
		<div className={styles.historyContainer}>
			<h3>–ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤</h3>
			{changes.map((change, index) => (
				<div key={index} className={styles.historyItem}>
					<div>{change.parameterName}</div>
					<div>
						{change.oldValue} ‚Üí {change.newValue}
					</div>
					<div>{new Date(change.changedAt).toLocaleDateString()}</div>
				</div>
			))}
		</div>
	)
}
```

=== –§–∞–π–ª: components/ParametrHistory/ParameterHistory.module.scss ===
```scss
// components/ParameterHistory/ParameterHistory.module.scss
.historyContainer {
	margin-top: 1.5rem;
	border: 1px solid #f0f0f0;
	border-radius: 8px;
	padding: 1rem;

	h3 {
		margin-bottom: 1rem;
		color: #1890ff;
		font-size: 1.1rem;
	}
}

.historyItem {
	display: grid;
	grid-template-columns: 1fr 1fr 1fr;
	gap: 1rem;
	padding: 0.5rem 0;
	border-bottom: 1px solid #f0f0f0;

	&:last-child {
		border-bottom: none;
	}

	div {
		font-size: 0.9rem;
		color: #666;

		&:nth-child(2) {
			color: #1890ff;
			font-weight: 500;
		}
	}
}
```

=== –§–∞–π–ª: components/AddAnimalModal/AddAnimalModal.module.scss ===
```scss
.form {
	padding: 16px 0;
}

.fileSection {
	margin-bottom: 24px;
	padding: 16px;
	border: 1px dashed #d9d9d9;
	border-radius: 8px;

	h4 {
		margin-bottom: 12px;
		font-weight: 500;
	}
}

.fileInfo {
	margin-top: 8px;
	padding: 8px;
	background: #f5f5f5;
	border-radius: 4px;
	display: flex;
	justify-content: space-between;
	align-items: center;
}

.docSelect {
	width: 100%;
	margin-bottom: 12px;
}

.ant-form-item {
	margin-bottom: 16px;
}
```

=== –§–∞–π–ª: components/AddAnimalModal/AddAnimalModal.tsx ===
```typescript
import { animalApi } from '@/features/animal/api/animalApi'
import { AnimalCreateRequest } from '@/features/animal/api/types'
import { useAnimal } from '@/features/animal/hooks/useAnimal'
import { PlusOutlined, UploadOutlined } from '@ant-design/icons'
import { Button, DatePicker, Form, Input, message, Modal, Select } from 'antd'
import { RcFile } from 'antd/es/upload'
import dayjs from 'dayjs'
import { useState } from 'react'
import { FileUpload } from '../FileUpload/FileUpload'
import styles from './AddAnimalModal.module.scss'

interface AddAnimalModalProps {
	open: boolean
	onClose: () => void
	onAnimalCreated: () => void
}

interface AddAnimalFormValues {
	name: string
	description?: string
	birthDate?: dayjs.Dayjs
	mass?: string
}

const documentTypes = [
	{ value: 'PASSPORT', label: '–ü–∞—Å–ø–æ—Ä—Ç' },
	{ value: 'VACCINATION', label: '–í–∞–∫—Ü–∏–Ω–∞—Ü–∏—è' },
	{ value: 'MEDICAL', label: '–ú–µ–¥–∫–∞—Ä—Ç–∞' },
	{ value: 'OTHER', label: '–î—Ä—É–≥–æ–µ' },
]

const acceptedFileTypes = {
	photo: ['image/jpeg', 'image/png', 'image/webp'],
	document: [
		'application/pdf',
		'application/msword',
		'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
	],
}

export const AddAnimalModal = ({
	open,
	onClose,
	onAnimalCreated,
}: AddAnimalModalProps) => {
	const [form] = Form.useForm<AddAnimalFormValues>()
	const [photoFile, setPhotoFile] = useState<RcFile | null>(null)
	const [documentFile, setDocumentFile] = useState<RcFile | null>(null)
	const [documentType, setDocumentType] = useState<string>('PASSPORT')
	const { createAnimal, isCreating } = useAnimal()

	const handleSubmit = async () => {
		try {
			const values = await form.validateFields()

			// 1. –°–æ–∑–¥–∞–µ–º –∂–∏–≤–æ—Ç–Ω–æ–µ
			const animalData: AnimalCreateRequest = {
				name: values.name,
				description: values.description,
				birthDate: values.birthDate?.format('YYYY-MM-DD'),
				mass: values.mass ? Number(values.mass) : undefined,
				attributes: [],
			}

			const animal = await createAnimal(animalData)

			// 2. –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª—ã –µ—Å–ª–∏ –µ—Å—Ç—å
			const uploads = []

			if (photoFile) {
				uploads.push(
					animalApi.uploadAnimalPhoto(animal.id, photoFile).then(({ url }) => {
						message.success('–§–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ!')
						return url
					})
				)
			}

			if (documentFile) {
				uploads.push(
					animalApi
						.uploadAnimalDocument(animal.id, documentFile, documentType)
						.then(({ url }) => {
							message.success('–î–æ–∫—É–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!')
							return url
						})
				)
			}

			await Promise.all(uploads)

			message.success('–ñ–∏–≤–æ—Ç–Ω–æ–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ!')
			onAnimalCreated()
			onClose()
			form.resetFields()
			setPhotoFile(null)
			setDocumentFile(null)
		} catch (error) {
			console.error('Create animal error:', error)
			message.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ')
		}
	}

	const validateFile = (file: RcFile, type: 'photo' | 'document') => {
		const isValidType = acceptedFileTypes[type].includes(file.type)
		if (!isValidType) {
			message.error(
				`–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞. –†–∞–∑—Ä–µ—à–µ–Ω—ã: ${acceptedFileTypes[
					type
				].join(', ')}`
			)
			return false
		}

		const isLt5M = file.size / 1024 / 1024 < 5
		if (!isLt5M) {
			message.error('–§–∞–π–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–µ–Ω—å—à–µ 5MB!')
			return false
		}

		return true
	}

	return (
		<Modal
			title='–î–æ–±–∞–≤–∏—Ç—å –∂–∏–≤–æ—Ç–Ω–æ–µ'
			open={open}
			onOk={handleSubmit}
			onCancel={onClose}
			confirmLoading={isCreating}
			width={800}
			okText='–°–æ–∑–¥–∞—Ç—å'
			cancelText='–û—Ç–º–µ–Ω–∞'
		>
			<Form form={form} layout='vertical' className={styles.form}>
				<Form.Item
					name='name'
					label='–ò–º—è –∂–∏–≤–æ—Ç–Ω–æ–≥–æ'
					rules={[{ required: true, message: '–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∂–∏–≤–æ—Ç–Ω–æ–≥–æ' }]}
				>
					<Input placeholder='–ù–∞–ø—Ä–∏–º–µ—Ä, –ë–∞—Ä—Å–∏–∫' />
				</Form.Item>

				<Form.Item name='description' label='–û–ø–∏—Å–∞–Ω–∏–µ'>
					<Input.TextArea
						placeholder='–ü–æ—Ä–æ–¥–∞, –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞ –∏ —Ç.–¥.'
						rows={3}
					/>
				</Form.Item>

				<Form.Item name='birthDate' label='–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è'>
					<DatePicker style={{ width: '100%' }} placeholder='–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É' />
				</Form.Item>

				<Form.Item name='mass' label='–í–µ—Å (–∫–≥)'>
					<Input
						type='number'
						placeholder='–í–≤–µ–¥–∏—Ç–µ –≤–µ—Å –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö'
						addonAfter='–∫–≥'
					/>
				</Form.Item>

				<div className={styles.fileSection}>
					<h4>–§–æ—Ç–æ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ</h4>
					<FileUpload
						beforeUpload={(file: RcFile) => {
							if (!validateFile(file, 'photo')) return false
							setPhotoFile(file)
							return false
						}}
						accept='image/*'
						buttonText='–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ'
						buttonIcon={<UploadOutlined />}
					/>
					{photoFile && (
						<div className={styles.fileInfo}>
							<span>{photoFile.name}</span>
							<Button type='link' danger onClick={() => setPhotoFile(null)}>
								–£–¥–∞–ª–∏—Ç—å
							</Button>
						</div>
					)}
				</div>

				<div className={styles.fileSection}>
					<h4>–î–æ–∫—É–º–µ–Ω—Ç—ã</h4>
					<Form.Item label='–¢–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞'>
						<Select
							value={documentType}
							onChange={setDocumentType}
							options={documentTypes}
							className={styles.docSelect}
						/>
					</Form.Item>
					<FileUpload
						beforeUpload={(file: RcFile) => {
							if (!validateFile(file, 'document')) return false
							setDocumentFile(file)
							return false
						}}
						accept='.pdf,.doc,.docx'
						buttonText='–ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç'
						buttonIcon={<PlusOutlined />}
					/>
					{documentFile && (
						<div className={styles.fileInfo}>
							<span>{documentFile.name}</span>
							<Button type='link' danger onClick={() => setDocumentFile(null)}>
								–£–¥–∞–ª–∏—Ç—å
							</Button>
						</div>
					)}
				</div>
			</Form>
		</Modal>
	)
}
```

=== –§–∞–π–ª: components/ParameterStats/ParameterStats.tsx ===
```typescript
import { ParameterStats } from '@/features/diary/api/types'
import { Card, Descriptions } from 'antd'

interface ParameterStatsProps {
	stats: Record<string, ParameterStats>
}

export const ParameterStatsDisplay = ({ stats }: ParameterStatsProps) => {
	const parameters = [
		{ key: 'mass', name: '–í–µ—Å (–∫–≥)', precision: 1 },
		{ key: 'height', name: '–†–æ—Å—Ç (—Å–º)', precision: 1 },
		{ key: 'temperature', name: '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (¬∞C)', precision: 1 },
		{ key: 'activityLevel', name: '–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (1-10)', precision: 0 },
		{ key: 'appetiteLevel', name: '–ê–ø–ø–µ—Ç–∏—Ç (1-10)', precision: 0 },
	]

	return (
		<Card title='–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤'>
			<Descriptions bordered column={1}>
				{parameters.map(param => {
					const stat = stats[param.key]
					if (!stat) return null

					return (
						<Descriptions.Item key={param.key} label={param.name}>
							{stat.minValue?.toFixed(param.precision)} ‚Äî{' '}
							{stat.maxValue?.toFixed(param.precision)}
							{stat.avgValue &&
								` (–°—Ä–µ–¥–Ω–µ–µ: ${stat.avgValue.toFixed(param.precision)})`}
						</Descriptions.Item>
					)
				})}
			</Descriptions>
		</Card>
	)
}
```

=== –§–∞–π–ª: components/ParameterChanges/ParameterChanges.tsx ===
```typescript
import { ParameterChangeResponse } from '@/features/animal/api/types'
import { Card, Descriptions, Typography } from 'antd'

const { Text } = Typography

interface ParameterChangesProps {
	changes: ParameterChangeResponse[]
}

export const ParameterChanges = ({ changes }: ParameterChangesProps) => {
	if (!changes || changes.length === 0) {
		return <Text type='secondary'>–ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤</Text>
	}

	return (
		<Card title='–ò–∑–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤' size='small'>
			<Descriptions bordered column={1} size='small'>
				{changes.map((change, index) => (
					<Descriptions.Item
						key={index}
						label={`${change.parameterName} (${change.changedAt})`}
					>
						{change.oldValue} ‚Üí {change.newValue}
						<Text type='secondary' style={{ marginLeft: 8 }}>
							({change.changedBy})
						</Text>
					</Descriptions.Item>
				))}
			</Descriptions>
		</Card>
	)
}
```

=== –§–∞–π–ª: components/UserAvatarUpload/UserAvatarUpload.tsx ===
```typescript
import { useUser } from '@/features/user/hooks/useUser'
import { UploadOutlined } from '@ant-design/icons'
import { Button, Upload, message } from 'antd'
import { RcFile } from 'antd/es/upload'
import styles from './UserAvatarUpload.module.scss'

interface UserAvatarUploadProps {
	currentPhotoUrl?: string
}

export const UserAvatarUpload = ({
	currentPhotoUrl,
}: UserAvatarUploadProps) => {
	const { uploadPhoto, isUploading } = useUser()

	const handleUpload = async (file: RcFile) => {
		try {
			await uploadPhoto(file)
			message.success('–§–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!')
		} catch (error) {
			message.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ')
			console.error('Upload error:', error)
		}
		return false // Prevent default upload behavior
	}

	return (
		<div className={styles.uploadContainer}>
			<img
				src={currentPhotoUrl || 'https://placehold.co/150x150?text=No+Photo'}
				alt='User avatar'
				className={styles.avatar}
			/>
			<Upload
				beforeUpload={handleUpload}
				showUploadList={false}
				accept='image/*'
			>
				<Button icon={<UploadOutlined />} loading={isUploading}>
					–û–±–Ω–æ–≤–∏—Ç—å —Ñ–æ—Ç–æ
				</Button>
			</Upload>
		</div>
	)
}
```

=== –§–∞–π–ª: components/UserAvatarUpload/UserAvatarUpload.module.scss ===
```scss
.uploadContainer {
	display: flex;
	flex-direction: column;
	align-items: center;
	gap: 1rem;
	margin-bottom: 2rem;
}

.avatar {
	width: 150px;
	height: 150px;
	border-radius: 50%;
	object-fit: cover;
}
```

=== –§–∞–π–ª: components/FileUpload/FileUpload.tsx ===
```typescript
import { Button, Upload, UploadProps } from 'antd'

interface FileUploadProps extends UploadProps {
	buttonText: string
	buttonIcon: React.ReactNode
}

export const FileUpload = ({
	buttonText,
	buttonIcon,
	...props
}: FileUploadProps) => {
	return (
		<Upload {...props}>
			<Button icon={buttonIcon}>{buttonText}</Button>
		</Upload>
	)
}
```

=== –§–∞–π–ª: components/FileUpload/FileUpload.module.scss ===
```scss
.fileUpload {
	margin-top: 1rem;

	.fileInfo {
		margin-top: 0.5rem;
		font-size: 0.9rem;
		color: #666;
	}
}
```

=== –§–∞–π–ª: layouts/MainLayout/MainLayout.module.scss ===
```scss
.mainLayout {
	min-height: 100vh;

	.ant-layout-header {
		padding: 0;
		height: auto;
		line-height: normal;
	}
}

.topBar {
	background-color: #0052cc;
	padding: 0 1rem;
}

.headerContent {
	display: flex;
	align-items: center;
	height: 64px;
}

.logoContainer {
	display: flex;
	align-items: center;
	color: #fff;
}

.logoIcon {
	font-size: 1.5rem;
	margin-right: 0.75rem;
}

.appName {
	color: #fff;
	font-weight: 500;
	font-size: 1.2rem;
	margin: 0;
}

.burgerButton {
	color: #fff;
	font-size: 1.25rem;
	margin-right: 1rem;
}

.contentWrapper {
	padding: 2rem;
	background-color: #f5f5f5;
	flex: 1;
}

.drawerTitle {
	display: flex;
	align-items: center;
	gap: 10px;

	.drawerLogo {
		font-size: 1.5rem;
		color: #0052cc;
	}
}

.navMenu {
	border-right: none;
	padding-top: 1rem;

	.ant-menu-item {
		margin: 0.5rem 0;
		border-radius: 4px;
		height: auto;
		line-height: 1.5;
		padding: 10px 16px !important;
	}

	.ant-menu-item:hover {
		background-color: #f0f7ff;
	}
}
```

=== –§–∞–π–ª: layouts/MainLayout/MainLayout.tsx ===
```typescript
import { useAuth } from '@/features/auth/hooks/useAuth'
import {
	BookOutlined,
	HomeOutlined,
	LogoutOutlined,
	MenuOutlined,
	UserOutlined,
} from '@ant-design/icons'
import { Button, Drawer, Layout, Menu } from 'antd'
import { useState } from 'react'
import { AiOutlineSafetyCertificate } from 'react-icons/ai'
import { Link, Outlet, useNavigate } from 'react-router-dom'
import styles from './MainLayout.module.scss'

const { Header, Content } = Layout

export function MainLayout() {
	const [isDrawerOpen, setIsDrawerOpen] = useState(false)
	const navigate = useNavigate()
	const { logout } = useAuth()
	function toggleDrawer() {
		setIsDrawerOpen(!isDrawerOpen)
	}

	const handleLogout = () => {
		logout() // –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –≤—ã—Ö–æ–¥–∞
		navigate('/auth/login') // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞
	}

	const menuItems = [
		{
			key: 'home',
			icon: <HomeOutlined />,
			label: <Link to='/'>–ì–ª–∞–≤–Ω–∞—è</Link>,
		},
		{
			key: 'diary',
			icon: <BookOutlined />,
			label: <Link to='/diary'>–î–Ω–µ–≤–Ω–∏–∫</Link>,
		},
		{
			key: 'profile',
			icon: <UserOutlined />,
			label: <Link to='/profile'>–ü—Ä–æ—Ñ–∏–ª—å</Link>,
		},
		{
			key: 'logout',
			icon: <LogoutOutlined />,
			label: '–í—ã—Ö–æ–¥',
			onClick: handleLogout,
		},
	]

	return (
		<Layout className={styles.mainLayout}>
			<Header className={styles.topBar}>
				<div className={styles.headerContent}>
					<Button
						className={styles.burgerButton}
						icon={<MenuOutlined />}
						onClick={toggleDrawer}
						type='text'
					/>
					<div className={styles.logoContainer}>
						<AiOutlineSafetyCertificate className={styles.logoIcon} />
						<h2 className={styles.appName}>Pet Health Tracker</h2>
					</div>
				</div>
			</Header>

			<Drawer
				title={
					<div className={styles.drawerTitle}>
						<AiOutlineSafetyCertificate className={styles.drawerLogo} />
						<span>–ú–µ–Ω—é</span>
					</div>
				}
				placement='left'
				closable
				onClose={toggleDrawer}
				open={isDrawerOpen}
			>
				<Menu mode='vertical' items={menuItems} className={styles.navMenu} />
			</Drawer>

			<Content className={styles.contentWrapper}>
				<Outlet />
			</Content>
		</Layout>
	)
}
```

=== –§–∞–π–ª: layouts/AuthLayout/AuthLayout.module.scss ===
```scss
.authLayout {
	min-height: 100vh;
	display: flex;
	flex-direction: column;

	// –õ—é–±—ã–µ –Ω—É–∂–Ω—ã–µ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ —Å—Ç–∏–ª–∏
}

.topBar {
	background-color: #0052cc; // —Å–∏–Ω—è—è –ø–æ–ª–æ—Å–∞
	color: #fff;
	padding: 1rem;
	display: flex;
	align-items: center;

	.logoIcon {
		font-size: 1.5rem;
		margin-right: 1rem;
	}

	.appName {
		font-size: 1.2rem;
		font-weight: 500;
	}
}

.contentWrapper {
	flex: 1;
	display: flex;
	justify-content: center;
	align-items: center;
	// –ï—Å–ª–∏ —Ö–æ—Ç–∏–º —Ä–∞—Å–ø–æ–ª–æ–∂–∏—Ç—å —Ñ–æ—Ä–º—ã –ø–æ —Ü–µ–Ω—Ç—Ä—É —ç–∫—Ä–∞–Ω–∞
	// –ò–ª–∏ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å padding: 2rem –∏ —Ç.–¥.
}
```

=== –§–∞–π–ª: layouts/AuthLayout/AuthLayout.tsx ===
```typescript
import { Layout } from 'antd'
import { AiOutlineSafetyCertificate } from 'react-icons/ai'
import { Outlet } from 'react-router-dom'
import styles from './AuthLayout.module.scss'

// –ú–æ–∂–Ω–æ —Ç–∞–∫–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å "Layout.Header" –∏–∑ antd.
export function AuthLayout() {
	return (
		<Layout className={styles.authLayout}>
			<header className={styles.topBar}>
				{/* –õ–æ–≥–æ –∏–ª–∏ –ø—Ä–æ—Å—Ç–∞—è –∏–∫–æ–Ω–∫–∞ */}
				<AiOutlineSafetyCertificate className={styles.logoIcon} />
				<h2 className={styles.appName}>Pet Health Tracker</h2>
			</header>

			{/* –û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ /auth/login, /auth/register, /auth/activate) */}
			<div className={styles.contentWrapper}>
				<Outlet />
			</div>
		</Layout>
	)
}
```

=== –§–∞–π–ª: features/diary/hooks/useDiary.ts ===
```typescript
import { useMutation, useQuery, useQueryClient } from '@tanstack/react-query'
import { useToken } from '../../auth/hooks/useToken'
import { diaryApi } from '../api/diaryApi'
import { StatusLogCreateRequest, StatusLogUpdateRequest } from '../api/types'

export const useDiary = (animalId: number) => {
	const queryClient = useQueryClient()
	const { getAccessToken } = useToken()

	// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π
	const statusLogsQuery = useQuery({
		queryKey: ['animalStatusLogs', animalId],
		queryFn: () => diaryApi.getStatusLogs(animalId),
		enabled: !!animalId && !!getAccessToken(),
	})

	// –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏
	const createMutation = useMutation({
		mutationFn: (data: StatusLogCreateRequest) =>
			diaryApi.createStatusLog(animalId, data),
		onSuccess: () => {
			queryClient.invalidateQueries({
				queryKey: ['animalStatusLogs', animalId],
			})
		},
	})

	// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏
	const updateMutation = useMutation({
		mutationFn: ({
			statusLogId,
			data,
		}: {
			statusLogId: number
			data: StatusLogUpdateRequest
		}) => diaryApi.updateStatusLog(animalId, statusLogId, data),
		onSuccess: () => {
			queryClient.invalidateQueries({
				queryKey: ['animalStatusLogs', animalId],
			})
		},
	})

	// –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏
	const deleteMutation = useMutation({
		mutationFn: (statusLogId: number) =>
			diaryApi.deleteStatusLog(animalId, statusLogId),
		onSuccess: () => {
			queryClient.invalidateQueries({
				queryKey: ['animalStatusLogs', animalId],
			})
		},
	})

	return {
		statusLogs: statusLogsQuery.data,
		isLoading: statusLogsQuery.isLoading,
		refetchStatusLogs: statusLogsQuery.refetch,

		createStatusLog: createMutation.mutateAsync,
		isCreating: createMutation.isPending,

		updateStatusLog: updateMutation.mutateAsync,
		isUpdating: updateMutation.isPending,

		deleteStatusLog: deleteMutation.mutateAsync,
		isDeleting: deleteMutation.isPending,
	}
}
```

=== –§–∞–π–ª: features/diary/hooks/useDiaryFiles.ts ===
```typescript
import { useMutation, useQueryClient } from '@tanstack/react-query'
import { diaryApi } from '../api/diaryApi'

export const useDiaryFiles = (animalId: number, statusLogId: number) => {
	const queryClient = useQueryClient()

	const addPhoto = useMutation({
		mutationFn: (file: File) =>
			diaryApi.addStatusLogPhoto(animalId, statusLogId, file),
		onSuccess: () => {
			queryClient.invalidateQueries({
				queryKey: ['animalStatusLogs', animalId],
			})
		},
	})

	const deletePhoto = useMutation({
		mutationFn: (photoId: number) => diaryApi.deleteStatusLogPhoto(photoId),
		onSuccess: () => {
			queryClient.invalidateQueries({
				queryKey: ['animalStatusLogs', animalId],
			})
		},
	})

	const addDocument = useMutation({
		mutationFn: ({ file, type }: { file: File; type: string }) =>
			diaryApi.addStatusLogDocument(animalId, statusLogId, file, type),
		onSuccess: () => {
			queryClient.invalidateQueries({
				queryKey: ['animalStatusLogs', animalId],
			})
		},
	})

	const deleteDocument = useMutation({
		mutationFn: (documentId: number) =>
			diaryApi.deleteStatusLogDocument(documentId),
		onSuccess: () => {
			queryClient.invalidateQueries({
				queryKey: ['animalStatusLogs', animalId],
			})
		},
	})

	return {
		addPhoto: addPhoto.mutateAsync,
		isAddingPhoto: addPhoto.isPending,

		deletePhoto: deletePhoto.mutateAsync,
		isDeletingPhoto: deletePhoto.isPending,

		addDocument: addDocument.mutateAsync,
		isAddingDocument: addDocument.isPending,

		deleteDocument: deleteDocument.mutateAsync,
		isDeletingDocument: deleteDocument.isPending,
	}
}
```

=== –§–∞–π–ª: features/diary/hooks/useDiaryAttributes.ts ===
```typescript
import { useMutation, useQuery, useQueryClient } from '@tanstack/react-query'
import { AttributeRequest } from '../../animal/api/types'
import { useToken } from '../../auth/hooks/useToken'
import { diaryApi } from '../api/diaryApi'

export const useDiaryAttributes = (animalId: number, statusLogId?: number) => {
	const queryClient = useQueryClient()
	const { getAccessToken } = useToken()

	// –ò—Å—Ç–æ—Ä–∏—è –∞—Ç—Ä–∏–±—É—Ç–æ–≤ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ
	const attributeHistoryQuery = useQuery({
		queryKey: ['animalAttributeHistory', animalId],
		queryFn: () => diaryApi.getAttributeHistory(animalId),
		enabled: !!animalId && !!getAccessToken(),
	})

	// –û–ø–µ—Ä–∞—Ü–∏–∏ —Å –∞—Ç—Ä–∏–±—É—Ç–∞–º–∏ –∑–∞–ø–∏—Å–∏
	const addAttribute = useMutation({
		mutationFn: (data: AttributeRequest) =>
			diaryApi.addStatusLogAttribute(animalId, statusLogId!, data),
		onSuccess: () => {
			queryClient.invalidateQueries({
				queryKey: ['animalStatusLogs', animalId],
			})
		},
	})

	const updateAttribute = useMutation({
		mutationFn: ({
			attributeId,
			data,
		}: {
			attributeId: number
			data: AttributeRequest
		}) =>
			diaryApi.updateStatusLogAttribute(
				animalId,
				statusLogId!,
				attributeId,
				data
			),
		onSuccess: () => {
			queryClient.invalidateQueries({
				queryKey: ['animalStatusLogs', animalId],
			})
			queryClient.invalidateQueries({
				queryKey: ['animalAttributeHistory', animalId],
			})
		},
	})

	const deleteAttribute = useMutation({
		mutationFn: (attributeId: number) =>
			diaryApi.deleteStatusLogAttribute(animalId, statusLogId!, attributeId),
		onSuccess: () => {
			queryClient.invalidateQueries({
				queryKey: ['animalStatusLogs', animalId],
			})
			queryClient.invalidateQueries({
				queryKey: ['animalAttributeHistory', animalId],
			})
		},
	})

	return {
		attributeHistory: attributeHistoryQuery.data,
		isLoadingHistory: attributeHistoryQuery.isLoading,

		addAttribute: addAttribute.mutateAsync,
		isAddingAttribute: addAttribute.isPending,

		updateAttribute: updateAttribute.mutateAsync,
		isUpdatingAttribute: updateAttribute.isPending,

		deleteAttribute: deleteAttribute.mutateAsync,
		isDeletingAttribute: deleteAttribute.isPending,
	}
}
```

=== –§–∞–π–ª: features/diary/api/types.ts ===
```typescript
import { ParameterChangeResponse } from '@/features/animal/api/types'

export interface StatusLogCreateRequest {
	notes?: string
	logDate: string
	massChange?: number
	heightChange?: number
	temperatureChange?: number
	activityLevelChange?: number
	appetiteLevelChange?: number
}

export interface StatusLogUpdateRequest {
	notes?: string
	logDate?: string
}

export interface StatusLogUpdateRequest {
	notes?: string
	logDate?: string
}

export interface StatusLogResponse {
	id: number
	logDate: string
	notes?: string
	massChange?: number
	heightChange?: number
	temperatureChange?: number
	activityLevelChange?: number
	appetiteLevelChange?: number
	photos: string[]
	documents: string[]
	parameterChanges: ParameterChangeResponse[]
}

export interface ParameterStats {
	minValue?: number
	maxValue?: number
	avgValue?: number
	firstValue?: number
	lastValue?: number
}

export interface AttributeHistoryResponse {
	attributeName: string
	oldValue?: string
	changedAt: string
	changedBy: string
}

export interface StatusLogWithHistory extends StatusLogResponse {
	attributeHistory: AttributeHistoryResponse[]
}

export type ParameterType =
	| 'mass'
	| 'height'
	| 'temperature'
	| 'activityLevel'
	| 'appetiteLevel'

export interface ParameterChange {
	parameter: ParameterType
	oldValue: number
	newValue: number
	changedAt: Date
	changedBy: string
}
```

=== –§–∞–π–ª: features/diary/api/diaryApi.ts ===
```typescript
import { AttributeResponse } from '@/features/animal/api/types'
import { apiClient } from '../../../api/client'
import {
	AttributeHistoryResponse,
	StatusLogCreateRequest,
	StatusLogResponse,
	StatusLogUpdateRequest,
} from './types'

export const diaryApi = {
	getStatusLogs: (animalId: number) =>
		apiClient.get<StatusLogResponse[]>(`/animals/${animalId}/status-logs`),

	createStatusLog: (animalId: number, data: StatusLogCreateRequest) =>
		apiClient.post<StatusLogResponse>(`/animals/${animalId}/status-logs`, data),

	updateStatusLog: (
		animalId: number,
		statusLogId: number,
		data: StatusLogUpdateRequest
	) =>
		apiClient.put<StatusLogResponse>(
			`/animals/${animalId}/status-logs/${statusLogId}`,
			data
		),

	deleteStatusLog: (animalId: number, statusLogId: number) =>
		apiClient.delete(`/animals/${animalId}/status-logs/${statusLogId}`),
	deleteStatusLogPhoto: (photoId: number) =>
		apiClient
			.delete(`/animals/status-logs/photos/${photoId}`)
			.then(r => r.data),

	deleteStatusLogDocument: (documentId: number) =>
		apiClient
			.delete(`/animals/status-logs/documents/${documentId}`)
			.then(r => r.data),

	deleteStatusLogAttribute: (
		animalId: number,
		statusLogId: number,
		attributeId: number
	) =>
		apiClient
			.delete(
				`/animals/${animalId}/status-logs/${statusLogId}/attributes/${attributeId}`
			)
			.then(r => r.data),

	getAttributeHistory: (animalId: number) =>
		apiClient
			.get<AttributeHistoryResponse[]>(
				`/animals/${animalId}/attributes/history`
			)
			.then(r => r.data),

	addStatusLog: (animalId: number, data: { notes: string; logDate: string }) =>
		apiClient.post<StatusLogResponse>(`/animals/${animalId}/status-logs`, data),

	addStatusLogPhoto: (animalId: number, statusLogId: number, file: File) => {
		const formData = new FormData()
		formData.append('file', file)
		return apiClient.post(
			`/animals/${animalId}/status-logs/${statusLogId}/media/photos`,
			formData,
			{ headers: { 'Content-Type': 'multipart/form-data' } }
		)
	},

	addStatusLogDocument: (
		animalId: number,
		statusLogId: number,
		file: File,
		type: string
	) => {
		const formData = new FormData()
		formData.append('file', file)
		formData.append('type', type)
		return apiClient.post<string>(
			`/animals/${animalId}/status-logs/${statusLogId}/media/documents`,
			formData,
			{ headers: { 'Content-Type': 'multipart/form-data' } }
		)
	},

	addStatusLogAttribute: (
		animalId: number,
		statusLogId: number,
		data: { name: string; value: string }
	) =>
		apiClient.post<AttributeResponse>(
			`/animals/${animalId}/status-logs/${statusLogId}/attributes`,
			data
		),

	updateStatusLogAttribute: (
		animalId: number,
		statusLogId: number,
		attributeId: number,
		data: { name?: string; value?: string }
	) =>
		apiClient.patch<AttributeResponse>(
			`/animals/${animalId}/status-logs/${statusLogId}/attributes/${attributeId}`,
			data
		),

	getAnalytics: (animalId: number) =>
		apiClient.get(`/animals/${animalId}/analytics`),
}
```

=== –§–∞–π–ª: features/auth/hooks/useAuth.ts ===
```typescript
import { useMutation } from '@tanstack/react-query'
import { authApi } from '../api/authApi'
import { useToken } from './useToken'

export const useAuth = () => {
	const { setTokens, clearTokens } = useToken()

	const registerMutation = useMutation({
		mutationFn: authApi.register,
	})

	const activateMutation = useMutation({
		mutationFn: authApi.activate,
	})

	const loginMutation = useMutation({
		mutationFn: authApi.login,
		onSuccess: data => {
			setTokens({
				accessToken: data.access_token,
				refreshToken: data.refresh_token,
			})
		},
	})

	const logout = () => {
		clearTokens()
	}

	return {
		register: registerMutation.mutateAsync,
		isRegistering: registerMutation.isPending,

		activate: activateMutation.mutateAsync,
		isActivating: activateMutation.isPending,

		login: loginMutation.mutateAsync,
		isLoggingIn: loginMutation.isPending,

		logout,
	}
}
```

=== –§–∞–π–ª: features/auth/hooks/useToken.ts ===
```typescript
import { useEffect } from 'react'
import { apiClient } from '../../../api/client'

export const useToken = () => {
	const setTokens = (tokens: { accessToken: string; refreshToken: string }) => {
		localStorage.setItem('accessToken', tokens.accessToken)
		localStorage.setItem('refreshToken', tokens.refreshToken)
		apiClient.defaults.headers['Authorization'] = `Bearer ${tokens.accessToken}`
	}

	const clearTokens = () => {
		localStorage.removeItem('accessToken')
		localStorage.removeItem('refreshToken')
		delete apiClient.defaults.headers['Authorization']
	}

	const getAccessToken = () => localStorage.getItem('accessToken')

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
	useEffect(() => {
		const token = localStorage.getItem('accessToken')
		if (token) {
			apiClient.defaults.headers['Authorization'] = `Bearer ${token}`
		}
	}, [])

	return { setTokens, clearTokens, getAccessToken }
}
```

=== –§–∞–π–ª: features/auth/api/types.ts ===
```typescript
// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
export interface RegisterRequest {
	username: string
	email: string
	password: string
}

export interface RegisterResponse {
	email: string
	username: string
	isActivated: boolean
}

// –ê–∫—Ç–∏–≤–∞—Ü–∏—è
export interface ActivateRequest {
	token: string
}

// –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
export interface LoginRequest {
	indentifier: string // email –∏–ª–∏ username
	password: string
}

export interface Tokens {
	access_token: string
	refresh_token: string
	access_expires_at: string
	refresh_expires_at: string
}

export interface LoginResponse extends Tokens {
	user: {
		email: string
		username: string
	}
}
```

=== –§–∞–π–ª: features/auth/api/authApi.ts ===
```typescript
import { apiClient } from '../../../api/client'
import {
	LoginRequest,
	LoginResponse,
	RegisterRequest,
	RegisterResponse,
} from './types'

export const authApi = {
	register: (data: RegisterRequest) =>
		apiClient
			.post<RegisterResponse>('/auth/register', data)
			.then(response => response.data),

	activate: (token: string) =>
		apiClient
			.get<void>('/auth/activate-account', {
				params: { token },
			})
			.then(r => r.data),

	login: (data: LoginRequest) =>
		apiClient
			.post<LoginResponse>('/auth/authenticate', data)
			.then(response => response.data),
}
```

=== –§–∞–π–ª: features/user/hooks/useUser.ts ===
```typescript
import { useMutation, useQuery } from '@tanstack/react-query'
import { UserUpdateRequest } from '../api/types'
import { userApi } from '../api/userApi'

export const useUser = () => {
	const {
		data: currentUser,
		isPending,
		refetch,
	} = useQuery({
		queryKey: ['currentUser'],
		queryFn: userApi.getCurrentUser,
	})

	const updateUser = useMutation({
		mutationFn: (data: UserUpdateRequest) => userApi.updateUser(data),
		onSuccess: () => refetch(),
	})

	const uploadPhoto = useMutation({
		mutationFn: (file: File) => userApi.uploadPhoto(file),
		onSuccess: () => refetch(),
	})

	return {
		currentUser,
		isPending,
		updateUser: updateUser.mutateAsync,
		isUpdating: updateUser.isPending,
		uploadPhoto: uploadPhoto.mutateAsync,
		isUploading: uploadPhoto.isPending,
	}
}
```

=== –§–∞–π–ª: features/user/api/types.ts ===
```typescript
// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export interface UserUpdateRequest {
	firstName?: string
	lastName?: string
	city?: string
	aboutMe?: string
}

export interface UserResponse {
	username: string
	firstName?: string
	lastName?: string
	city?: string
	aboutMe?: string
	photoUrl?: string
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ
export interface S3FileResponse {
	objectKey: string
	presignedUrl: string
}
```

=== –§–∞–π–ª: features/user/api/userApi.ts ===
```typescript
import { apiClient } from '../../../api/client'
import { S3FileResponse, UserResponse, UserUpdateRequest } from './types'

export const userApi = {
	getCurrentUser: () =>
		apiClient.get<UserResponse>('/users/me').then(r => r.data),

	updateUser: (data: UserUpdateRequest) =>
		apiClient.patch<UserResponse>('/users/me', data).then(r => r.data),

	uploadPhoto: (file: File) => {
		const formData = new FormData()
		formData.append('file', file)
		return apiClient
			.post<S3FileResponse>('/users/me/photo', formData, {
				headers: {
					'Content-Type': 'multipart/form-data',
				},
			})
			.then(r => r.data)
	},
}
```

=== –§–∞–π–ª: features/animal/hooks/useAnimal.ts ===
```typescript
import { useMutation, useQuery, useQueryClient } from '@tanstack/react-query'
import { animalApi } from '../api/animalApi'
import { AnimalCreateRequest, AnimalResponse } from '../api/types'

export const useAnimal = (animalId?: number) => {
	const queryClient = useQueryClient()

	const {
		data: animal,
		isPending,
		error,
	} = useQuery<AnimalResponse>({
		queryKey: ['animal', animalId],
		queryFn: () => animalApi.getAnimal(animalId!),
		enabled: !!animalId,
	})

	const createMutation = useMutation({
		mutationFn: animalApi.createAnimal,
		onSuccess: () => {
			queryClient.invalidateQueries({ queryKey: ['userAnimals'] })
		},
	})

	const updateMutation = useMutation({
		mutationFn: ({
			id,
			data,
		}: {
			id: number
			data: Partial<AnimalCreateRequest>
		}) => animalApi.updateAnimal(id, data),
		onSuccess: (_, { id }) => {
			queryClient.invalidateQueries({ queryKey: ['animal', id] })
			queryClient.invalidateQueries({ queryKey: ['userAnimals'] })
		},
	})

	const deleteMutation = useMutation({
		mutationFn: (id: number) => animalApi.deleteAnimal(id),
		onSuccess: () => {
			queryClient.invalidateQueries({ queryKey: ['userAnimals'] })
		},
	})

	return {
		animal,
		isPending,
		error,
		createAnimal: createMutation.mutateAsync,
		isCreating: createMutation.isPending,
		updateAnimal: updateMutation.mutateAsync,
		isUpdating: updateMutation.isPending,
		deleteAnimal: deleteMutation.mutateAsync,
		isDeleting: deleteMutation.isPending,
	}
}
```

=== –§–∞–π–ª: features/animal/hooks/useAnalytics.ts ===
```typescript
import { useQuery } from '@tanstack/react-query'
import { useToken } from '../../auth/hooks/useToken'
import { analyticsApi } from '../api/analyticsApi'

export const useAnalytics = (animalId?: number) => {
	const { getAccessToken } = useToken()

	return useQuery({
		queryKey: ['animalAnalytics', animalId],
		queryFn: () => analyticsApi.getAnimalAnalytics(animalId!),
		enabled: !!animalId && !!getAccessToken(),
		select: data =>
			data.map(item => ({
				...item,
				changes: item.changes.map(change => ({
					...change,
					date: new Date(change.date).toLocaleDateString(),
				})),
			})),
	})
}
```

=== –§–∞–π–ª: features/animal/hooks/useExport.ts ===
```typescript
import { useMutation } from '@tanstack/react-query'
import { exportApi } from '../api/exportApi'

export const useExport = () => {
	return useMutation({
		mutationFn: exportApi.exportAnimalToPdf,
		onSuccess: () => {
			// –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º —ç–∫—Å–ø–æ—Ä—Ç–µ
			console.log('PDF exported successfully')
		},
		onError: error => {
			console.error('Export failed:', error)
		},
	})
}
```

=== –§–∞–π–ª: features/animal/hooks/useUserAnimals.ts ===
```typescript
import { useQuery } from '@tanstack/react-query'
import { animalApi } from '../api/animalApi'

export const useUserAnimals = () => {
	return useQuery({
		queryKey: ['userAnimals'],
		queryFn: animalApi.getUserAnimals,
	})
}
```

=== –§–∞–π–ª: features/animal/hooks/useAnimalAttributes.ts ===
```typescript
import { useMutation, useQueryClient } from '@tanstack/react-query'
import { animalApi } from '../api/animalApi'
import { AttributeRequest, AttributeResponse } from '../api/types'

export const useAnimalAttributes = (animalId: number) => {
	const queryClient = useQueryClient()

	const addAttribute = useMutation<AttributeResponse, Error, AttributeRequest>({
		mutationFn: data => animalApi.addAttribute(animalId, data),
		onSuccess: () => {
			queryClient.invalidateQueries({ queryKey: ['animal', animalId] })
		},
	})

	const updateAttribute = useMutation<
		AttributeResponse,
		Error,
		{ attributeId: number; data: AttributeRequest }
	>({
		mutationFn: ({ attributeId, data }) =>
			animalApi.updateAttribute(animalId, attributeId, data),
		onSuccess: () => {
			queryClient.invalidateQueries({ queryKey: ['animal', animalId] })
		},
	})

	const deleteAttribute = useMutation<void, Error, number>({
		mutationFn: attributeId => animalApi.deleteAttribute(animalId, attributeId),
		onSuccess: () => {
			queryClient.invalidateQueries({ queryKey: ['animal', animalId] })
		},
	})

	return {
		addAttribute: addAttribute.mutateAsync,
		isAdding: addAttribute.isPending,
		updateAttribute: updateAttribute.mutateAsync,
		isUpdating: updateAttribute.isPending,
		deleteAttribute: deleteAttribute.mutateAsync,
		isDeleting: deleteAttribute.isPending,
	}
}
```

=== –§–∞–π–ª: features/animal/api/analyticsApi.ts ===
```typescript
import { apiClient } from '../../../api/client'
import { AnimalResponse } from './types'

export interface AnimalAnalyticsResponse {
	attributeName: string
	changes: {
		date: string
		value: string
		changedBy: string
	}[]
	stats?: {
		minValue: string
		maxValue: string
		avgValue: number
	}
}

export const analyticsApi = {
	getAnimalAnalytics: (animalId: number) =>
		apiClient
			.get<AnimalAnalyticsResponse[]>(`/animals/${animalId}/analytics`)
			.then(r => r.data),

	getUserAnimals: () =>
		apiClient.get<AnimalResponse[]>('/users/me/animals').then(r => r.data),
}
```

=== –§–∞–π–ª: features/animal/api/types.ts ===
```typescript
export interface AnimalCreateRequest {
	name: string
	description?: string
	birthDate?: string
	mass?: number
	attributes?: AttributeRequest[]
}

export interface AnimalResponse {
	id: number
	name: string
	description?: string
	birthDate?: string
	mass?: number
	height?: number 
	temperature?: number 
	activityLevel?: number 
	appetiteLevel?: number 
	photos: string[]
	documents: string[]
	attributes: AttributeResponse[]
}

export interface DocumentResponse {
	id: number
	type: string
	url: string
}

export interface AttributeRequest {
	name: string
	value: string
}

export interface AttributeResponse {
	id: number
	name: string
	value?: string
}
export interface AnimalUpdateRequest {
	name?: string
	description?: string
	birthDate?: string
	mass?: number
	height?: number
	temperature?: number
	activityLevel?: number
	appetiteLevel?: number
}
export interface S3UploadResponse {
	objectKey: string
	presignedUrl: string
}
export interface AnimalPhotoUploadResponse {
	url: string // –ü—Ä—è–º–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–æ—Ç–æ
}

export interface AnimalDocumentUploadResponse {
	url: string // –ü—Ä—è–º–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç
}
export interface ParameterChangeResponse {
	parameterName: string
	oldValue: string
	newValue: string
	changedAt: string // –î–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ ISO
	changedBy: string // –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
}
export interface AnimalAnalyticsResponse {
	parameterName: string
	changes: ParameterChangeResponse[]
	stats?: {
		minValue: string
		maxValue: string
		avgValue: number
	}
}
```

=== –§–∞–π–ª: features/animal/api/exportApi.ts ===
```typescript
import { apiClient } from '../../../api/client'

// export const exportApi = {
// 	exportAnimalToPdf: (animalId: number) =>
// 		apiClient
// 			.get(`/animals/${animalId}/export/pdf`, {
// 				responseType: 'blob',
// 				headers: {
// 					Accept: 'application/pdf',
// 				},
// 			})
// 			.then(response => {
// 				const url = window.URL.createObjectURL(new Blob([response.data]))
// 				const link = document.createElement('a')
// 				link.href = url
// 				link.setAttribute('download', `animal_${animalId}_report.pdf`)
// 				document.body.appendChild(link)
// 				link.click()
// 				document.body.removeChild(link)
// 				return response
// 			}),
// }
export const exportApi = {
	exportAnimalToPdf: async (animalId: number) => {
		const response = await apiClient.get(`/animals/${animalId}/export/pdf`, {
			responseType: 'blob',
			headers: {
				Accept: 'application/pdf',
			},
		})
		return response.data // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ –¥–∞–Ω–Ω—ã–µ (Blob)
	},
}
```

=== –§–∞–π–ª: features/animal/api/animalApi.ts ===
```typescript
import { apiClient } from '../../../api/client'
import {
	AnimalCreateRequest,
	AnimalDocumentUploadResponse,
	AnimalPhotoUploadResponse,
	AnimalResponse,
	AttributeRequest,
} from './types'

export const animalApi = {
	// –û—Å–Ω–æ–≤–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –∂–∏–≤–æ—Ç–Ω—ã–º–∏
	createAnimal: (data: AnimalCreateRequest) =>
		apiClient.post<AnimalResponse>('/animals', data).then(res => res.data),

	getAnimal: (id: number) =>
		apiClient.get<AnimalResponse>(`/animals/${id}`).then(res => res.data),

	updateAnimal: (id: number, data: Partial<AnimalCreateRequest>) =>
		apiClient
			.patch<AnimalResponse>(`/animals/${id}`, data)
			.then(res => res.data),

	deleteAnimal: (id: number) =>
		apiClient.delete(`/animals/${id}`).then(res => res.data),

	// –§–∞–π–ª—ã
	uploadAnimalPhoto: (animalId: number, file: File) => {
		const formData = new FormData()
		formData.append('file', file)
		return apiClient
			.post<AnimalPhotoUploadResponse>(
				`/animals/${animalId}/media/photos`,
				formData,
				{ headers: { 'Content-Type': 'multipart/form-data' } }
			)
			.then(res => res.data)
	},

	uploadAnimalDocument: (animalId: number, file: File, type: string) => {
		const formData = new FormData()
		formData.append('file', file)
		formData.append('type', type)
		return apiClient
			.post<AnimalDocumentUploadResponse>(
				`/animals/${animalId}/media/documents`,
				formData,
				{ headers: { 'Content-Type': 'multipart/form-data' } }
			)
			.then(res => res.data)
	},
	deleteAnimalPhoto: (photoUrl: string) => {
		return apiClient
			.delete(`/animals/photos`, {
				data: { url: photoUrl },
			})
			.then(res => res.data)
	},

	deleteAnimalDocument: (documentUrl: string) => {
		return apiClient
			.delete(`/animals/documents`, {
				data: { url: documentUrl },
			})
			.then(res => res.data)
	},
	// –ê—Ç—Ä–∏–±—É—Ç—ã
	addAttribute: (animalId: number, data: AttributeRequest) =>
		apiClient
			.post(`/animals/${animalId}/attributes`, data)
			.then(res => res.data),

	updateAttribute: (
		animalId: number,
		attributeId: number,
		data: AttributeRequest
	) =>
		apiClient
			.patch(`/animals/${animalId}/attributes/${attributeId}`, data)
			.then(res => res.data),

	deleteAttribute: (animalId: number, attributeId: number) =>
		apiClient
			.delete(`/animals/${animalId}/attributes/${attributeId}`)
			.then(res => res.data),
	getUserAnimals: () =>
		apiClient.get<AnimalResponse[]>('/users/me/animals').then(res => res.data),
}
```

=== –§–∞–π–ª: styles/base.module.scss ===
```scss
/* @import 'variables.css'; */

:root {
	font-family: Inter, system-ui, Avenir, Helvetica, Arial, sans-serif;
	line-height: 1.5;
	font-weight: 400;
	// color-scheme: light dark;
}

body {
	margin: 0;
	min-width: 320px;
	min-height: 100vh;
}
```

=== –§–∞–π–ª: api/client.ts ===
```typescript
import axios from 'axios'

export const apiClient = axios.create({
	baseURL: import.meta.env.VITE_API_URL || '/api',
	withCredentials: true,
})

apiClient.interceptors.response.use(
	response => response,
	error => {
		if (error.response?.status === 401) {
			console.log('–û—à–∏–±–∫–∞ –∞—Ç–≤–æ—Ä–∏–∑–∞—Ü–∏–∏')
		}
		return Promise.reject(error)
	}
)

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
const token = localStorage.getItem('accessToken')
if (token) {
	apiClient.defaults.headers['Authorization'] = `Bearer ${token}`
}
```

=== –§–∞–π–ª: utils/s3Upload.ts ===
```typescript
import axios from 'axios'

export const uploadToS3 = async (presignedUrl: string, file: File) => {
	try {
		await axios.put(presignedUrl, file, {
			headers: {
				'Content-Type': file.type,
			},
		})
		return true
	} catch (error) {
		console.error('S3 upload failed:', error)
		return false
	}
}
```

