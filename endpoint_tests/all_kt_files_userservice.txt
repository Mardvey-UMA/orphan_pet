=== Файл: UserServiceImpl.kt ===
```kotlin
package ru.animaltracker.userservice.service.impl

import jakarta.persistence.EntityNotFoundException
import org.springframework.stereotype.Service
import org.springframework.transaction.annotation.Transactional
import org.springframework.web.multipart.MultipartFile
import ru.animaltracker.userservice.dto.S3FileResponse
import ru.animaltracker.userservice.dto.UserResponse
import ru.animaltracker.userservice.dto.UserUpdateRequest
import ru.animaltracker.userservice.entity.Photo
import ru.animaltracker.userservice.entity.UserPhoto
import ru.animaltracker.userservice.repository.PhotoRepository
import ru.animaltracker.userservice.repository.UserPhotoRepository
import ru.animaltracker.userservice.repository.UserRepository
import ru.animaltracker.userservice.service.interfaces.S3Service
import ru.animaltracker.userservice.service.interfaces.UserService

@Service
class UserServiceImpl(
    private val userRepository: UserRepository,
    private val s3Service: S3Service,
    private val photoRepository: PhotoRepository,
    private val userPhotoRepository: UserPhotoRepository
) : UserService {

    @Transactional
    override fun updateUser(username: String, request: UserUpdateRequest): UserResponse {
        val user = userRepository.findByUsername(username)
            ?: throw EntityNotFoundException("User not found")

        request.firstName?.let { user.firstName = it }
        request.lastName?.let { user.lastName = it }
        request.city?.let { user.city = it }
        request.aboutMe?.let { user.aboutMe = it }
        val savedUser = userRepository.save(user)
        return savedUser.toDto(s3Service)
    }

    @Transactional(readOnly = true)
    override fun getUser(username: String): UserResponse {
        val user = userRepository.findByUsername(username)
            ?: throw EntityNotFoundException("User not found")

        return user.toDto(s3Service)
    }

    @Transactional
    override fun uploadUserPhoto(username: String, file: MultipartFile): S3FileResponse {
        val user = userRepository.findByUsername(username)
            ?: throw EntityNotFoundException("User not found")

        // Удаляем старое фото если есть
        user.userPhotos.firstOrNull()?.let { userPhoto ->
            userPhoto.photo?.objectKey?.let { s3Service.deleteFile(it) }
            photoRepository.delete(userPhoto.photo ?: throw IllegalStateException("Photo not found"))
            userPhotoRepository.delete(userPhoto)
        }

        // Загружаем новое фото
        val objectKey = s3Service.uploadFile(file, "users/$username/photos")
        val photo = photoRepository.save(Photo().apply {
            this.objectKey = objectKey
        })

        // Создаем связь пользователя с фото
        userPhotoRepository.save(UserPhoto().apply {
            this.user = user
            this.photo = photo
        })

        return S3FileResponse(
            objectKey = objectKey,
            presignedUrl = s3Service.generatePresignedUrl(objectKey)
        )
    }
}
```

=== Файл: AnimalValidationServiceImpl.kt ===
```kotlin
package ru.animaltracker.userservice.service.impl

import jakarta.persistence.EntityNotFoundException
import org.springframework.stereotype.Service
import org.springframework.transaction.annotation.Transactional
import ru.animaltracker.userservice.entity.Animal
import ru.animaltracker.userservice.entity.AnimalStatusLog
import ru.animaltracker.userservice.entity.User
import ru.animaltracker.userservice.repository.AnimalRepository
import ru.animaltracker.userservice.repository.AnimalStatusLogRepository
import ru.animaltracker.userservice.repository.UserRepository
import ru.animaltracker.userservice.service.interfaces.AnimalValidationService
import java.nio.file.AccessDeniedException


@Service
class AnimalValidationServiceImpl (
    private val userRepository: UserRepository,
    private val animalRepository: AnimalRepository,
    private val statusLogRepository: AnimalStatusLogRepository
): AnimalValidationService {


    @Transactional(readOnly = true)
    override fun validateUserAndAnimal(username: String, animalId: Long): Pair<User, Animal> {
        val user = userRepository.findByUsername(username)
            ?: throw EntityNotFoundException("User not found")

        val animal = animalRepository.findById(animalId)
            .orElseThrow { EntityNotFoundException("Animal not found") }

        if (animal.animalUsers.none { it.user?.id == user.id }) {
            throw AccessDeniedException("User doesn't have access to this animal")
        }

        return user to animal
    }

    @Transactional(readOnly = true)
    override fun validateUserAndStatusLog(
        username: String,
        animalId: Long,
        statusLogId: Long
    ): Triple<User, Animal, AnimalStatusLog> {
        val (user, animal) = validateUserAndAnimal(username, animalId)

        val statusLog = statusLogRepository.findById(statusLogId)
            .orElseThrow { EntityNotFoundException("Status log not found") }

        if (statusLog.animal.id != animalId) {
            throw AccessDeniedException("Status log doesn't belong to this animal")
        }

        return Triple(user, animal, statusLog)
    }
}
```

=== Файл: StatusLogServiceImpl.kt ===
```kotlin
package ru.animaltracker.userservice.service.impl

import jakarta.persistence.EntityNotFoundException
import org.springframework.stereotype.Service
import org.springframework.transaction.annotation.Transactional
import ru.animaltracker.userservice.dto.*
import ru.animaltracker.userservice.entity.*
import ru.animaltracker.userservice.repository.*
import ru.animaltracker.userservice.service.interfaces.AnimalValidationService
import ru.animaltracker.userservice.service.interfaces.S3Service
import ru.animaltracker.userservice.service.interfaces.StatusLogService
import java.time.LocalDate

@Service
class StatusLogServiceImpl(
    private val statusLogRepository: AnimalStatusLogRepository,
    private val photoRepository: PhotoRepository,
    private val documentRepository: DocumentRepository,
    private val parameterHistoryRepository: AnimalParameterHistoryRepository,
    private val s3Service: S3Service,
    private val animalValidationService: AnimalValidationService
) : StatusLogService {

    @Transactional
    override fun addStatusLog(
        username: String,
        animalId: Long,
        request: StatusLogCreateRequest
    ): StatusLogResponse {
        val (user, animal) = animalValidationService.validateUserAndAnimal(username, animalId)

        val statusLog = statusLogRepository.save(AnimalStatusLog().apply {
            notes = request.notes
            logDate = request.logDate ?: LocalDate.now()
            massChange = request.massChange
            heightChange = request.heightChange
            temperatureChange = request.temperatureChange
            activityLevelChange = request.activityLevelChange
            appetiteLevelChange = request.appetiteLevelChange
            this.animal = animal
            this.user = user
        })

        saveParameterChanges(animal, user, statusLog)

        return statusLog.toDto(s3Service)
    }
    private fun saveParameterChanges(
        animal: Animal,
        user: User,
        statusLog: AnimalStatusLog
    ) {
        val history = AnimalParameterHistory().apply {
            recordedAt = statusLog.logDate ?: LocalDate.now()
            this.user = user
            this.animal = animal
            this.statusLog = statusLog
        }

        statusLog.massChange?.let {
            history.oldMass = animal.mass
            animal.mass = animal.mass?.add(it) ?: it
            history.newMass = animal.mass
        }

        statusLog.heightChange?.let {
            history.oldHeight = animal.height
            animal.height = animal.height?.add(it) ?: it
            history.newHeight = animal.height
        }

        statusLog.temperatureChange?.let {
            history.oldTemperature = animal.temperature
            animal.temperature = animal.temperature?.add(it) ?: it
            history.newTemperature = animal.temperature
        }

        statusLog.activityLevelChange?.let {
            history.oldActivityLevel = animal.activityLevel
            animal.activityLevel = it
            history.newActivityLevel = it
        }

        statusLog.appetiteLevelChange?.let {
            history.oldAppetiteLevel = animal.appetiteLevel
            animal.appetiteLevel = it
            history.newAppetiteLevel = it
        }

        if (history.hasChanges()) {
            parameterHistoryRepository.save(history)
        }
    }

    @Transactional
    override fun updateStatusLog(
        username: String,
        animalId: Long,
        statusLogId: Long,
        request: StatusLogUpdateRequest
    ): StatusLogResponse {
        val (_, _, statusLog) = animalValidationService.validateUserAndStatusLog(username, animalId, statusLogId)

        request.notes?.let { statusLog.notes = it }
        request.logDate?.let { statusLog.logDate = it }

        return statusLogRepository.save(statusLog).toDto(s3Service)
    }

    @Transactional
    override fun deleteStatusLog(username: String, animalId: Long, statusLogId: Long) {
        val (_, _, statusLog) = animalValidationService.validateUserAndStatusLog(username, animalId, statusLogId)

        statusLog.statusLogPhotos.forEach {
            it.photo?.objectKey?.let { key -> s3Service.deleteFile(key) }
            it.photo?.let { photo -> photoRepository.delete(photo) }
        }

        statusLog.statusLogDocuments.forEach {
            it.document?.objectKey?.let { key -> s3Service.deleteFile(key) }
            it.document?.let { doc -> documentRepository.delete(doc) }
        }

        statusLogRepository.delete(statusLog)
    }

    @Transactional(readOnly = true)
    override fun getStatusLogs(username: String, animalId: Long): List<StatusLogResponse> {
        val (_, animal) = animalValidationService.validateUserAndAnimal(username, animalId)
        return statusLogRepository.findByAnimalId(animalId).map { it.toDto(s3Service) }
    }

    @Transactional(readOnly = true)
    override fun getStatusLog(id: Long): StatusLogResponse {
        val log = statusLogRepository.findById(id)
            .orElseThrow { EntityNotFoundException("Status log not found") }
        return log.toDto(s3Service)
    }

    @Transactional(readOnly = true)
    override fun getParameterHistory(
        username: String,
        animalId: Long,
        parameterName: String
    ): List<ParameterChangeResponse> {
        animalValidationService.validateUserAndAnimal(username, animalId)

        return parameterHistoryRepository.findByAnimalIdOrderByRecordedAtDesc(animalId)
            .filterNotNull()
            .mapNotNull { history ->
                when (parameterName.lowercase()) {
                    "mass" -> history.takeIf { it.oldMass != null || it.newMass != null }?.let {
                        ParameterChangeResponse(
                            parameterName = "mass",
                            oldValue = it.oldMass?.toString() ?: "",
                            newValue = it.newMass?.toString() ?: "",
                            changedAt = it.recordedAt ?: LocalDate.now(),
                            changedBy = it.user.username ?: ""
                        )
                    }
                    "height" -> history.takeIf { it.oldHeight != null || it.newHeight != null }?.let {
                        ParameterChangeResponse(
                            parameterName = "height",
                            oldValue = it.oldHeight?.toString() ?: "",
                            newValue = it.newHeight?.toString() ?: "",
                            changedAt = it.recordedAt ?: LocalDate.now(),
                            changedBy = it.user.username ?: ""
                        )
                    }
                    "temperature" -> history.takeIf { it.oldTemperature != null || it.newTemperature != null }?.let {
                        ParameterChangeResponse(
                            parameterName = "temperature",
                            oldValue = it.oldTemperature?.toString() ?: "",
                            newValue = it.newTemperature?.toString() ?: "",
                            changedAt = it.recordedAt ?: LocalDate.now(),
                            changedBy = it.user.username ?: ""
                        )
                    }
                    "activitylevel" -> history.takeIf { it.oldActivityLevel != null || it.newActivityLevel != null }?.let {
                        ParameterChangeResponse(
                            parameterName = "activityLevel",
                            oldValue = it.oldActivityLevel?.toString() ?: "",
                            newValue = it.newActivityLevel?.toString() ?: "",
                            changedAt = it.recordedAt ?: LocalDate.now(),
                            changedBy = it.user.username ?: ""
                        )
                    }
                    "appetitelevel" -> history.takeIf { it.oldAppetiteLevel != null || it.newAppetiteLevel != null }?.let {
                        ParameterChangeResponse(
                            parameterName = "appetiteLevel",
                            oldValue = it.oldAppetiteLevel?.toString() ?: "",
                            newValue = it.newAppetiteLevel?.toString() ?: "",
                            changedAt = it.recordedAt ?: LocalDate.now(),
                            changedBy = it.user.username ?: ""
                        )
                    }
                    else -> null
                }
            }
    }
}
```

=== Файл: AnimalManagementServiceImpl.kt ===
```kotlin
package ru.animaltracker.userservice.service.impl

import jakarta.persistence.EntityNotFoundException
import org.springframework.stereotype.Service
import org.springframework.transaction.annotation.Transactional
import ru.animaltracker.userservice.dto.*
import ru.animaltracker.userservice.entity.*
import ru.animaltracker.userservice.repository.*
import ru.animaltracker.userservice.service.interfaces.AnimalManagementService
import ru.animaltracker.userservice.service.interfaces.AnimalValidationService
import ru.animaltracker.userservice.service.interfaces.S3Service
import java.nio.file.AccessDeniedException
import java.time.LocalDate

@Service
class AnimalManagementServiceImpl(
    private val userRepository: UserRepository,
    private val animalRepository: AnimalRepository,
    private val attributeRepository: AttributeRepository,
    private val s3Service: S3Service,
    private val animalValidationService: AnimalValidationService
) : AnimalManagementService {

    @Transactional
    override fun createAnimal(username: String, request: AnimalCreateRequest): AnimalResponse {
        val user = userRepository.findByUsername(username)
            ?: throw EntityNotFoundException("User not found")

        val animal = Animal().apply {
            name = request.name
            description = request.description
            birthDate = request.birthDate
            mass = request.mass
            height = request.height
            temperature = request.temperature
            activityLevel = request.activityLevel
            appetiteLevel = request.appetiteLevel
        }

        val savedAnimal = animalRepository.save(animal)

        request.attributes.forEach { attrRequest ->
            val attribute = Attribute().apply {
                name = attrRequest.name
                this.animal = savedAnimal
                addValue(attrRequest.value)
            }
            attributeRepository.save(attribute)
        }

        user.addAnimal(savedAnimal)
        userRepository.save(user)

        return savedAnimal.toDto(s3Service)
    }

    @Transactional(readOnly = true)
    override fun getAnimal(username: String, animalId: Long): AnimalResponse {
        val (_, animal) = animalValidationService.validateUserAndAnimal(username, animalId)
        return animal.toDto(s3Service)
    }

    @Transactional(readOnly = true)
    override fun getUserAnimals(username: String): List<AnimalResponse> {
        val user = userRepository.findByUsername(username)
            ?: throw EntityNotFoundException("User not found")

        return user.animalUsers.mapNotNull { it.animal?.toDto(s3Service) }
    }

    @Transactional
    override fun deleteAnimal(username: String, animalId: Long) {
        val (_, animal) = animalValidationService.validateUserAndAnimal(username, animalId)
        animalRepository.delete(animal)
    }

    @Transactional
    override fun updateAnimal(username: String, animalId: Long, request: AnimalUpdateRequest): AnimalResponse {
        val (_, animal) = animalValidationService.validateUserAndAnimal(username, animalId)

        request.name?.let { animal.name = it }
        request.description?.let { animal.description = it }
        request.birthDate?.let { animal.birthDate = it }
        request.mass?.let { animal.mass = it }
        request.height?.let { animal.height = it }
        request.temperature?.let { animal.temperature = it }
        request.activityLevel?.let { animal.activityLevel = it }
        request.appetiteLevel?.let { animal.appetiteLevel = it }

        return animalRepository.save(animal).toDto(s3Service)
    }

    @Transactional
    override fun addAttribute(username: String, animalId: Long, request: AttributeRequest): AttributeResponse {
        val (_, animal) = animalValidationService.validateUserAndAnimal(username, animalId)

        val attribute = Attribute().apply {
            name = request.name
            this.animal = animal
        }.also { attr ->
            attr.values.add(Value().apply {
                value = request.value
                attribute = attr
            })
        }

        return attributeRepository.save(attribute).toDto()
    }

    @Transactional
    override fun updateAttribute(
        username: String,
        animalId: Long,
        attributeId: Short,
        request: AttributeUpdateRequest
    ): AttributeResponse {
        val (user, animal) = animalValidationService.validateUserAndAnimal(username, animalId)
        val attribute = attributeRepository.findById(attributeId)
            .orElseThrow { EntityNotFoundException("Attribute not found") }

        if (attribute.animal?.id != animalId) {
            throw AccessDeniedException("Attribute doesn't belong to this animal")
        }

        request.name?.let { attribute.name = it }

        if (request.value != null) {
            val value = attribute.values.firstOrNull() ?: Value().apply {
                this.attribute = attribute
            }
            value.value = request.value
            attribute.values.clear()
            attribute.values.add(value)
        }

        return attributeRepository.save(attribute).toDto()
    }

    @Transactional
    override fun deleteAttribute(username: String, animalId: Long, attributeId: Short) {
        val (_, _) = animalValidationService.validateUserAndAnimal(username, animalId)
        val attribute = attributeRepository.findById(attributeId)
            .orElseThrow { EntityNotFoundException("Attribute not found") }

        if (attribute.animal?.id != animalId) {
            throw AccessDeniedException("Attribute doesn't belong to this animal")
        }

        attributeRepository.delete(attribute)
    }


}
```

=== Файл: S3ServiceImpl.kt ===
```kotlin
package ru.animaltracker.userservice.service.impl

import org.springframework.beans.factory.annotation.Value
import org.springframework.stereotype.Service
import org.springframework.web.multipart.MultipartFile
import ru.animaltracker.userservice.exception.FileProcessingException
import ru.animaltracker.userservice.exception.FileUploadException
import ru.animaltracker.userservice.service.interfaces.S3Service
import software.amazon.awssdk.core.sync.RequestBody
import software.amazon.awssdk.services.s3.S3Client
import software.amazon.awssdk.services.s3.model.GetObjectRequest
import software.amazon.awssdk.services.s3.model.PutObjectRequest
import software.amazon.awssdk.services.s3.model.S3Object
import software.amazon.awssdk.services.s3.presigner.S3Presigner
import java.time.Duration
import java.util.*


@Service
class S3ServiceImpl(
    private val s3Client: S3Client,
    private val s3Presigner: S3Presigner,
    @Value("\${s3.bucket}") private val bucket: String
) : S3Service {

    companion object {
        private const val DEFAULT_PRESIGNED_URL_DURATION_MINUTES = 10080L
    }

    override  fun uploadFile(
        file: MultipartFile,
        prefix: String,
        metadata: Map<String, String>
    ): String {
        val objectKey = "$prefix/${UUID.randomUUID()}_${file.originalFilename?.replace(" ", "_")}"

        val putObjectRequest = PutObjectRequest.builder()
            .bucket(bucket)
            .key(objectKey)
            .contentType(file.contentType)
            .metadata(metadata)
            .build()

        try {
            s3Client.putObject(
                putObjectRequest,
                RequestBody.fromBytes(file.bytes)
            )
            return objectKey
        } catch (e: Exception) {
            throw FileUploadException("Failed to upload file: ${e.message}")
        }
    }

    override  fun generatePresignedUrl(objectKey: String, duration: Duration): String {
        try {
            val getObjectRequest = GetObjectRequest.builder()
                .bucket(bucket)
                .key(objectKey)
                .build()

            val presignedRequest = s3Presigner.presignGetObject { builder ->
                builder.getObjectRequest(getObjectRequest)
                    .signatureDuration(duration)
            }

            return presignedRequest.url().toString()
        } catch (e: Exception) {
            throw FileProcessingException("Failed to generate presigned URL: ${e.message}")
        }
    }

    override  fun generatePresignedUrl(objectKey: String): String {
        return generatePresignedUrl(objectKey, Duration.ofMinutes(DEFAULT_PRESIGNED_URL_DURATION_MINUTES))
    }

    override  fun deleteFile(objectKey: String) {
        try {
            s3Client.deleteObject { builder ->
                builder.bucket(bucket).key(objectKey)
            }
        } catch (e: Exception) {
            throw FileProcessingException("Failed to delete file: ${e.message}")
        }
    }

    override  fun getFileMetadata(objectKey: String): Map<String, String> {
        val response = s3Client.headObject {
            it.bucket(bucket).key(objectKey)
        }

        return response.metadata().mapValues { (_, value) ->
            value
        }
    }
}
```

=== Файл: AnimalMediaServiceImpl.kt ===
```kotlin
package ru.animaltracker.userservice.service.impl

import jakarta.persistence.EntityNotFoundException
import org.springframework.stereotype.Service
import org.springframework.transaction.annotation.Transactional
import org.springframework.web.multipart.MultipartFile
import ru.animaltracker.userservice.dto.S3FileResponse
import ru.animaltracker.userservice.entity.*
import ru.animaltracker.userservice.repository.*
import ru.animaltracker.userservice.service.interfaces.AnimalMediaService
import ru.animaltracker.userservice.service.interfaces.AnimalValidationService
import ru.animaltracker.userservice.service.interfaces.S3Service
import java.nio.file.AccessDeniedException

@Service
class AnimalMediaServiceImpl(
    private val userRepository: UserRepository,
    private val animalRepository: AnimalRepository,
    private val documentRepository: DocumentRepository,
    private val photoRepository: PhotoRepository,
    private val animalPhotoRepository: AnimalPhotoRepository,
    private val s3Service: S3Service,
    private val animalValidationService: AnimalValidationService
) : AnimalMediaService {

    @Transactional
    override fun addAnimalPhoto(username: String, animalId: Long, file: MultipartFile): S3FileResponse {
        val (_, animal) = animalValidationService.validateUserAndAnimal(username, animalId)

        val objectKey = s3Service.uploadFile(file, "animals/$animalId/photos")
        val photo = photoRepository.save(Photo().apply {
            this.objectKey = objectKey
        })

        animalPhotoRepository.save(AnimalPhoto().apply {
            this.animal = animal
            this.photo = photo
        })

        return S3FileResponse(objectKey, s3Service.generatePresignedUrl(objectKey))
    }

    @Transactional
    override fun addAnimalDocument(username: String, animalId: Long, file: MultipartFile, type: String): S3FileResponse {
        val (_, animal) = animalValidationService.validateUserAndAnimal(username, animalId)

        val objectKey = s3Service.uploadFile(file, "animals/$animalId/documents")
        val document = documentRepository.save(Document().apply {
            this.type = type
            this.objectKey = objectKey
            this.documentName = file.originalFilename
            this.animal = animal
        })

        return S3FileResponse(objectKey, s3Service.generatePresignedUrl(objectKey))
    }

    @Transactional
    override fun deleteAnimalPhoto(username: String, photoId: Long) {
        val photo = photoRepository.findById(photoId)
            .orElseThrow { EntityNotFoundException("Photo not found") }

        val animalPhoto = animalPhotoRepository.findByPhotoId(photoId)
            ?: throw AccessDeniedException("Photo not linked to animal")

        animalValidationService.validateUserAndAnimal(username, animalPhoto.animal?.id ?: throw IllegalStateException())

        photo.objectKey?.let { s3Service.deleteFile(it) }
        photoRepository.delete(photo)
    }

    @Transactional
    override fun deleteAnimalDocument(username: String, documentId: Long) {
        val document = documentRepository.findById(documentId)
            .orElseThrow { EntityNotFoundException("Document not found") }

        animalValidationService.validateUserAndAnimal(username, document.animal?.id ?: throw IllegalStateException())

        document.objectKey?.let { s3Service.deleteFile(it) }
        documentRepository.delete(document)
    }

}
```

=== Файл: StatusLogMediaServiceImpl.kt ===
```kotlin
package ru.animaltracker.userservice.service.impl

import org.springframework.stereotype.Service
import org.springframework.transaction.annotation.Transactional
import org.springframework.web.multipart.MultipartFile
import ru.animaltracker.userservice.dto.S3FileResponse
import ru.animaltracker.userservice.entity.*
import ru.animaltracker.userservice.repository.*
import ru.animaltracker.userservice.service.interfaces.AnimalValidationService
import ru.animaltracker.userservice.service.interfaces.S3Service
import ru.animaltracker.userservice.service.interfaces.StatusLogMediaService

@Service
class StatusLogMediaServiceImpl(
    private val photoRepository: PhotoRepository,
    private val statusLogPhotoRepository: StatusLogPhotoRepository,
    private val documentRepository: DocumentRepository,
    private val statusLogDocumentRepository: StatusLogDocumentRepository,
    private val s3Service: S3Service,
    private val animalValidationService: AnimalValidationService
) : StatusLogMediaService {

    @Transactional
    override fun addStatusLogPhoto(
        username: String,
        animalId: Long,
        statusLogId: Long,
        file: MultipartFile
    ): S3FileResponse {
        val (_, _, statusLog) = animalValidationService.validateUserAndStatusLog(username, animalId, statusLogId)

        val objectKey = s3Service.uploadFile(file, "animals/$animalId/status-logs/$statusLogId/photos")
        val photo = photoRepository.save(Photo().apply {
            this.objectKey = objectKey
        })

        statusLogPhotoRepository.save(StatusLogPhoto().apply {
            this.animalStatusLog = statusLog
            this.photo = photo
        })

        return S3FileResponse(objectKey, s3Service.generatePresignedUrl(objectKey))
    }

    @Transactional
    override fun addStatusLogDocument(
        username: String,
        animalId: Long,
        statusLogId: Long,
        file: MultipartFile,
        type: String
    ): S3FileResponse {
        val (_, animal, statusLog) = animalValidationService.validateUserAndStatusLog(username, animalId, statusLogId)

        val objectKey = s3Service.uploadFile(file, "animals/$animalId/status-logs/$statusLogId/documents")
        val document = documentRepository.save(Document().apply {
            this.type = type
            this.objectKey = objectKey
            this.documentName = file.originalFilename
            this.animal = animal
        })

        statusLogDocumentRepository.save(StatusLogDocument().apply {
            this.animalStatusLog = statusLog
            this.document = document
        })

        return S3FileResponse(objectKey, s3Service.generatePresignedUrl(objectKey))
    }
}
```

=== Файл: AnalyticsReportServiceImpl.kt ===
```kotlin
package ru.animaltracker.userservice.service.impl

import org.springframework.beans.factory.annotation.Autowired
import org.springframework.stereotype.Service
import org.springframework.transaction.annotation.Transactional
import ru.animaltracker.userservice.dto.AnimalAnalyticsResponse
import ru.animaltracker.userservice.dto.ParameterStats
import ru.animaltracker.userservice.pdfexport.PdfExporter
import ru.animaltracker.userservice.service.interfaces.AnalyticsReportService
import ru.animaltracker.userservice.service.interfaces.AnimalValidationService
import ru.animaltracker.userservice.service.interfaces.StatusLogService


@Service
class AnalyticsReportServiceImpl(
    private val statusLogService: StatusLogService,
    private val animalValidationService: AnimalValidationService
) : AnalyticsReportService {

    @Autowired
    private lateinit var pdfExporter: PdfExporter

    @Transactional(readOnly = true)
    override fun getAnimalAnalytics(animalId: Long): List<AnimalAnalyticsResponse> {
        val parameters = listOf("mass", "height", "temperature", "activityLevel", "appetiteLevel")

        return parameters.map { parameterName ->
            val changes = statusLogService.getParameterHistory("system", animalId, parameterName)

            val numericValues = changes
                .mapNotNull { it.newValue.toDoubleOrNull() }
                .takeIf { it.isNotEmpty() }

            val stats = numericValues?.let {
                ParameterStats(
                    minValue = it.min().toString(),
                    maxValue = it.max().toString(),
                    avgValue = it.average(),
                    firstValue = changes.first().newValue,
                    lastValue = changes.last().newValue
                )
            }

            AnimalAnalyticsResponse(
                parameterName = parameterName,
                changes = changes,
                stats = stats
            )
        }
    }

    @Transactional(readOnly = true)
    override fun exportAnimalToPdf(username: String, animalId: Long): ByteArray {
        val (_, animal) = animalValidationService.validateUserAndAnimal(username, animalId)
        return pdfExporter.exportAnimal(animal)
    }
}
```

