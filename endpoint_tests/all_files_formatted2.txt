=== Файл: App.css ===
```css
#root {
  max-width: 1280px;
  margin: 0 auto;
  padding: 2rem;
  text-align: center;
}

.logo {
  height: 6em;
  padding: 1.5em;
  will-change: filter;
  transition: filter 300ms;
}
.logo:hover {
  filter: drop-shadow(0 0 2em #646cffaa);
}
.logo.react:hover {
  filter: drop-shadow(0 0 2em #61dafbaa);
}

@keyframes logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

@media (prefers-reduced-motion: no-preference) {
  a:nth-of-type(2) .logo {
    animation: logo-spin infinite 20s linear;
  }
}

.card {
  padding: 2em;
}

.read-the-docs {
  color: #888;
}
```

=== Файл: vite-env.d.ts ===
```typescript
/// <reference types="vite/client" />
```

=== Файл: App.tsx ===
```typescript
import { QueryClient, QueryClientProvider } from '@tanstack/react-query'
import { ReactQueryDevtools } from '@tanstack/react-query-devtools'
import { AppRouter } from './router/AppRouter'
import './styles/base.module.scss'

const queryClient = new QueryClient({
	defaultOptions: {
		queries: {
			refetchOnWindowFocus: false,
			retry: 1,
		},
	},
})

export function App() {
	return (
		<QueryClientProvider client={queryClient}>
			<AppRouter />
			<ReactQueryDevtools initialIsOpen={false} />
		</QueryClientProvider>
	)
}
```

=== Файл: main.tsx ===
```typescript
import { StrictMode } from 'react'
import { createRoot } from 'react-dom/client'
import { App } from './App.tsx'

createRoot(document.getElementById('root')!).render(
	<StrictMode>
		<App />
	</StrictMode>
)
```

=== Файл: pages/HomePage/HomePage.tsx ===
```typescript
import styles from './HomePage.module.scss'

export default function HomePage() {
	return (
		<div className={styles.homeContainer}>
			<h1>Главная страница</h1>
			<p>Тут будет контент...</p>
		</div>
	)
}
```

=== Файл: pages/ProfilePage/ProfilePage.tsx ===
```typescript
import { PlusOutlined, UploadOutlined } from '@ant-design/icons'
import { Button, Card, Form, Input, message, Upload } from 'antd'
import { RcFile, UploadChangeParam, UploadFile } from 'antd/es/upload'
import axios from 'axios'
import { useEffect, useState } from 'react'
import styles from './ProfilePage.module.scss'

import AddAnimalModal from '@/components/AddAnimalModal/AddAnimalModal'
import { useUserAnimals } from '@/features/animal/hooks/useUserAnimals'
import { useUser } from '@/features/user/hooks/useUser'

interface ProfileFormValues {
	firstName?: string
	lastName?: string
	city?: string
	aboutMe?: string
}

export default function ProfilePage() {
	const [form] = Form.useForm<ProfileFormValues>()
	const {
		currentUser,
		isUserLoading,
		updateUser,
		isUpdating,
		uploadPhoto,
		isUploading,
	} = useUser()
	const {
		data: userAnimals,
		isLoading: isAnimalsLoading,
		refetch: refetchAnimals,
	} = useUserAnimals()

	const [isAddAnimalModalOpen, setIsAddAnimalModalOpen] = useState(false)

	useEffect(() => {
		if (currentUser) {
			form.setFieldsValue({
				firstName: currentUser.firstName,
				lastName: currentUser.lastName,
				city: currentUser.city,
				aboutMe: currentUser.aboutMe,
			})
		}
	}, [currentUser, form])

	// Сохранение изменений профиля (типизированные значения)
	async function onFinish(values: ProfileFormValues) {
		try {
			await updateUser(values)
			message.success('Профиль успешно обновлён!')
		} catch (error: unknown) {
			if (axios.isAxiosError(error)) {
				const serverMsg = error.response?.data?.error || error.message
				message.error(`Ошибка при обновлении: ${serverMsg}`)
			} else {
				message.error('Неизвестная ошибка при обновлении профиля.')
			}
		}
	}

	// Загрузка аватарки пользователя
	async function handleUploadPhoto(file: RcFile) {
		try {
			await uploadPhoto(file)
			message.success('Фото пользователя обновлено!')
		} catch (error: unknown) {
			if (axios.isAxiosError(error)) {
				const serverMsg = error.response?.data?.error || error.message
				message.error(`Ошибка загрузки фото: ${serverMsg}`)
			} else {
				message.error('Неизвестная ошибка при загрузке фото.')
			}
		}
	}

	function openAddAnimalModal() {
		setIsAddAnimalModalOpen(true)
	}

	function closeAddAnimalModal() {
		setIsAddAnimalModalOpen(false)
	}

	async function handleAnimalCreated() {
		// После создания питомца обновляем список
		await refetchAnimals()
	}

	if (isUserLoading) {
		return <div className={styles.loading}>Загрузка профиля...</div>
	}

	return (
		<div className={styles.profileContainer}>
			<h1>Личный профиль</h1>

			<Card className={styles.profileCard}>
				<Form
					form={form}
					layout='vertical'
					onFinish={onFinish}
					disabled={isUpdating || isUploading}
				>
					<div className={styles.photoSection}>
						<img
							src={
								currentUser?.photoUrl ||
								'https://placehold.co/150x150?text=No+Photo'
							}
							alt='user avatar'
							className={styles.userPhoto}
						/>

						<Upload
							beforeUpload={() => false} // отключаем автозагрузку
							showUploadList={false} // убираем список
							onChange={(info: UploadChangeParam<UploadFile>) => {
								const file = info.file.originFileObj as RcFile
								if (file) {
									handleUploadPhoto(file)
								}
							}}
						>
							<Button icon={<UploadOutlined />} loading={isUploading}>
								Обновить фото
							</Button>
						</Upload>
					</div>

					<Form.Item label='Имя' name='firstName'>
						<Input placeholder='Введите имя' />
					</Form.Item>

					<Form.Item label='Фамилия' name='lastName'>
						<Input placeholder='Введите фамилию' />
					</Form.Item>

					<Form.Item label='Город' name='city'>
						<Input placeholder='Ваш город' />
					</Form.Item>

					<Form.Item label='О себе' name='aboutMe'>
						<Input.TextArea rows={3} placeholder='Расскажите о себе' />
					</Form.Item>

					<Form.Item>
						<Button type='primary' htmlType='submit' loading={isUpdating}>
							Сохранить изменения
						</Button>
					</Form.Item>
				</Form>
			</Card>

			<div className={styles.myAnimalsSection}>
				<div className={styles.myAnimalsHeader}>
					<h2>Мои животные</h2>
					<Button
						type='primary'
						icon={<PlusOutlined />}
						onClick={openAddAnimalModal}
					>
						Добавить
					</Button>
				</div>

				{isAnimalsLoading && <div>Загрузка ваших животных...</div>}

				{!isAnimalsLoading && userAnimals && userAnimals.length === 0 && (
					<div className={styles.noAnimals}>У вас пока нет животных.</div>
				)}

				<div className={styles.animalsGrid}>
					{userAnimals?.map(animal => (
						<Card
							key={animal.id}
							className={styles.animalCard}
							hoverable
							cover={
								animal.photos && animal.photos.length > 0 ? (
									<img src={animal.photos[0]} alt={animal.name} />
								) : (
									<img
										src='https://placehold.co/150x150?text=No+Animal+Photo'
										alt='No photo'
									/>
								)
							}
							onClick={() => {
								window.location.href = `/animals/${animal.id}`
							}}
						>
							<Card.Meta title={animal.name} description={animal.description} />
						</Card>
					))}
				</div>
			</div>

			<AddAnimalModal
				open={isAddAnimalModalOpen}
				onClose={closeAddAnimalModal}
				onAnimalCreated={handleAnimalCreated}
			/>
		</div>
	)
}
```

=== Файл: pages/ActivateAccountPage/ActivateAccountPage.tsx ===
```typescript
import { useAuth } from '@/features/auth/hooks/useAuth'
import { Button, Form, Input, message } from 'antd'
import { useNavigate } from 'react-router-dom'
import styles from './ActivateAccountPage.module.scss'

export default function ActivateAccountPage() {
	const [form] = Form.useForm()
	const { activate, isActivating } = useAuth()
	const navigate = useNavigate()

	const onFinish = async (values: { token: string }) => {
		try {
			await activate(values.token)
			message.success('Аккаунт успешно активирован!')
			navigate('/auth/login')
		} catch (error) {
			message.error(`Ошибка активации: ${error ?? 'Неизвестная'}`)
		}
	}

	return (
		<div className={styles.activateContainer}>
			<h1>Активация аккаунта</h1>
			<p>Пожалуйста, введите код активации, высланный на вашу почту.</p>

			<Form
				form={form}
				layout='vertical'
				onFinish={onFinish}
				className={styles.activateForm}
			>
				<Form.Item
					label='Код активации (token)'
					name='token'
					rules={[{ required: true, message: 'Введите код из почты' }]}
				>
					<Input />
				</Form.Item>

				<Form.Item>
					<Button type='primary' htmlType='submit' loading={isActivating}>
						Активировать
					</Button>
				</Form.Item>
			</Form>
		</div>
	)
}
```

=== Файл: pages/LoginPage/LoginPage.tsx ===
```typescript
import { useAuth } from '@/features/auth/hooks/useAuth'
import { Button, Form, Input, message } from 'antd'
import axios from 'axios'
import { useNavigate } from 'react-router-dom'
import styles from './LoginPage.module.scss'

interface LoginFormValues {
	identifier: string
	password: string
}

export default function LoginPage() {
	const [form] = Form.useForm<LoginFormValues>()
	const { login, isLoggingIn } = useAuth()
	const navigate = useNavigate()

	async function onFinish(values: LoginFormValues) {
		try {
			await login({
				indentifier: values.identifier,
				password: values.password,
			})
			message.success('Авторизация прошла успешно!')
			navigate('/')
		} catch (error: unknown) {
			if (axios.isAxiosError(error)) {
				// Можем достать текст ошибки из error.response?.data или error.message
				const serverMsg = error.response?.data?.error || error.message
				message.error(`Ошибка авторизации: ${serverMsg}`)
			} else {
				message.error('Неизвестная ошибка при авторизации.')
			}
		}
	}

	return (
		<div className={styles.loginContainer}>
			<h1>Авторизация</h1>
			<Form
				form={form}
				layout='vertical'
				onFinish={onFinish}
				className={styles.loginForm}
			>
				<Form.Item
					label='Email или Username'
					name='identifier'
					rules={[{ required: true, message: 'Введите идентификатор' }]}
				>
					<Input placeholder='Введите email или username' />
				</Form.Item>

				<Form.Item
					label='Пароль'
					name='password'
					rules={[{ required: true, message: 'Введите пароль' }]}
				>
					<Input.Password placeholder='Введите пароль' />
				</Form.Item>

				<Form.Item>
					<Button type='primary' htmlType='submit' loading={isLoggingIn}>
						Войти
					</Button>
				</Form.Item>
			</Form>
		</div>
	)
}
```

=== Файл: pages/DiaryPage/DiaryPage.tsx ===
```typescript
import styles from './DiaryPage.module.scss'

export default function DiaryPage() {
	return (
		<div className={styles.homeContainer}>
			<h1>Дневник страница</h1>
			<p>Тут будет контент...</p>
		</div>
	)
}
```

=== Файл: pages/NotFoundPage/NotFoundPage.tsx ===
```typescript
import styles from './NotFoundPage.module.scss'

export default function NotFoundPage() {
	return (
		<div className={styles.homeContainer}>
			<h1>NotFoundPage страница</h1>
			<p>Тут будет контент...</p>
		</div>
	)
}
```

=== Файл: pages/AnimalPage/AnimalPage.tsx ===
```typescript
import styles from './AnimalPage.module.scss'

export default function AnimalPage() {
	return (
		<div className={styles.homeContainer}>
			<h1>Животная страница</h1>
			<p>Тут будет контент...</p>
		</div>
	)
}
```

=== Файл: pages/RegisterPage/RegisterPage.tsx ===
```typescript
import { useAuth } from '@/features/auth/hooks/useAuth'
import { Button, Form, Input, message } from 'antd'
import axios from 'axios'
import { useNavigate } from 'react-router-dom'
import styles from './RegisterPage.module.scss'

interface RegisterFormValues {
	username: string
	email: string
	password: string
}

export default function RegisterPage() {
	const [form] = Form.useForm<RegisterFormValues>()
	const { register, isRegistering } = useAuth()
	const navigate = useNavigate()

	async function onFinish(values: RegisterFormValues) {
		try {
			await register({
				username: values.username,
				email: values.email,
				password: values.password,
			})
			message.success(
				'Регистрация прошла успешно! Проверьте почту для активации.'
			)
			navigate('/auth/activate')
		} catch (error: unknown) {
			if (axios.isAxiosError(error)) {
				const serverMsg = error.response?.data?.error || error.message
				message.error(`Ошибка регистрации: ${serverMsg}`)
			} else {
				message.error('Неизвестная ошибка при регистрации.')
			}
		}
	}

	return (
		<div className={styles.registerContainer}>
			<h1>Регистрация</h1>
			<Form
				form={form}
				layout='vertical'
				onFinish={onFinish}
				className={styles.registerForm}
			>
				<Form.Item
					label='Имя пользователя'
					name='username'
					rules={[{ required: true, message: 'Введите имя пользователя' }]}
				>
					<Input placeholder='Введите имя пользователя' />
				</Form.Item>

				<Form.Item
					label='Email'
					name='email'
					rules={[
						{ required: true, message: 'Введите email' },
						{ type: 'email', message: 'Неверный формат email' },
					]}
				>
					<Input placeholder='Введите email' />
				</Form.Item>

				<Form.Item
					label='Пароль'
					name='password'
					rules={[{ required: true, message: 'Введите пароль' }]}
				>
					<Input.Password placeholder='Введите пароль' />
				</Form.Item>

				<Form.Item>
					<Button type='primary' htmlType='submit' loading={isRegistering}>
						Зарегистрироваться
					</Button>
				</Form.Item>
			</Form>
		</div>
	)
}
```

=== Файл: router/AppRouter.tsx ===
```typescript
import { createBrowserRouter, RouterProvider } from 'react-router-dom'

// Импорты ваших Layout-компонентов
import { AuthLayout } from '@/layouts/AuthLayout/AuthLayout'
import { MainLayout } from '@/layouts/MainLayout/MainLayout'

// Импорты страниц
import ActivateAccountPage from '@/pages/ActivateAccountPage/ActivateAccountPage'
import AnimalPage from '@/pages/AnimalPage/AnimalPage'
import DiaryPage from '@/pages/DiaryPage/DiaryPage'
import HomePage from '@/pages/HomePage/HomePage'
import LoginPage from '@/pages/LoginPage/LoginPage'
import NotFoundPage from '@/pages/NotFoundPage/NotFoundPage'
import ProfilePage from '@/pages/ProfilePage/ProfilePage'
import RegisterPage from '@/pages/RegisterPage/RegisterPage'

// Создаем роутер с двумя родительскими маршрутами:
// 1) "/auth" (AuthLayout) - логин, регистрация, активация
// 2) "/" (MainLayout) - остальные страницы приложения
const router = createBrowserRouter([
	{
		path: '/auth',
		element: <AuthLayout />,
		children: [
			{ path: 'login', element: <LoginPage /> },
			{ path: 'register', element: <RegisterPage /> },
			{ path: 'activate', element: <ActivateAccountPage /> },
			// Если хотим ловить несуществующие роуты внутри /auth
			{ path: '*', element: <NotFoundPage /> },
		],
	},
	{
		path: '/',
		element: <MainLayout />,
		children: [
			// Главная (при заходе на "/")
			{ index: true, element: <HomePage /> },
			// Прочие страницы
			{ path: 'animals/:id', element: <AnimalPage /> },
			{ path: 'diary', element: <DiaryPage /> },
			{ path: 'profile', element: <ProfilePage /> },
			// Ловим все несуществующие пути
			{ path: '*', element: <NotFoundPage /> },
		],
	},
])

export function AppRouter() {
	return <RouterProvider router={router} />
}
```

=== Файл: components/AddAnimalModal/AddAnimalModal.tsx ===
```typescript
import { PlusOutlined, UploadOutlined } from '@ant-design/icons'
import { Button, DatePicker, Form, Input, message, Modal, Upload } from 'antd'
import { RcFile, UploadChangeParam, UploadFile } from 'antd/es/upload'
import axios from 'axios'
import dayjs from 'dayjs'
import { useState } from 'react'
import styles from './AddAnimalModal.module.scss'

import { useAnimal } from '@/features/animal/hooks/useAnimal'
// Предположим, у вас есть import { animalApi } from '@/features/animal/api/animalApi'
import { animalApi } from '@/features/animal/api/animalApi'
import {
	AnimalCreateRequest,
	AnimalResponse,
} from '@/features/animal/api/types'

interface AddAnimalModalProps {
	open: boolean
	onClose: () => void
	onAnimalCreated: () => void
}

// Типы данных, которые приходят из формы
interface AddAnimalFormValues {
	name: string
	description?: string
	birthDate?: dayjs.Dayjs
	mass?: string // вводим в инпут строку, потом преобразуем в number
}

// Модалка добавления животного
export default function AddAnimalModal({
	open,
	onClose,
	onAnimalCreated,
}: AddAnimalModalProps) {
	const [form] = Form.useForm<AddAnimalFormValues>()
	const { createAnimal, isCreating } = useAnimal()

	const [photoFile, setPhotoFile] = useState<RcFile | null>(null)
	const [documentFile, setDocumentFile] = useState<RcFile | null>(null)

	async function onOk() {
		try {
			const values = await form.validateFields()

			// Готовим объект под AnimalCreateRequest
			// mass: оставим undefined, если строка пустая
			let massNumber: number | undefined
			if (values.mass && values.mass.trim().length > 0) {
				massNumber = Number(values.mass)
			}

			const requestBody: AnimalCreateRequest = {
				name: values.name,
				description: values.description,
				birthDate: values.birthDate
					? values.birthDate.format('YYYY-MM-DD')
					: undefined,
				mass: massNumber,
				attributes: [], // пока пустой массив
			}

			// Создаём животное
			const newAnimal: AnimalResponse = await createAnimal(requestBody)
			message.success('Животное успешно создано!')

			// Если пользователь выбрал фото, грузим в бэкенд
			if (photoFile) {
				await animalApi.uploadAnimalPhoto(newAnimal.id, photoFile)
				message.success('Фото животного загружено!')
			}

			// Если выбрал документ
			if (documentFile) {
				// Тип документа можно попросить у пользователя или задать жёстко
				await animalApi.uploadAnimalDocument(
					newAnimal.id,
					documentFile,
					'OTHER'
				)
				message.success('Документ загружен!')
			}

			// Закрываем модалку
			onClose()
			form.resetFields()
			setPhotoFile(null)
			setDocumentFile(null)

			// Обновляем список животных
			onAnimalCreated()
		} catch (error: unknown) {
			if (axios.isAxiosError(error)) {
				const serverMsg = error.response?.data?.error || error.message
				message.error(`Ошибка при создании животного: ${serverMsg}`)
			} else {
				message.error('Неизвестная ошибка при создании животного.')
			}
		}
	}

	function onCancel() {
		onClose()
		form.resetFields()
		setPhotoFile(null)
		setDocumentFile(null)
	}

	// Обработчик выбора фото (исправляем any → UploadChangeParam<UploadFile>)
	function handleSelectPhoto(info: UploadChangeParam<UploadFile>) {
		const file = info.file.originFileObj as RcFile
		setPhotoFile(file || null)
	}

	// Обработчик выбора документа
	function handleSelectDocument(info: UploadChangeParam<UploadFile>) {
		const file = info.file.originFileObj as RcFile
		setDocumentFile(file || null)
	}

	return (
		<Modal
			title='Добавить животное'
			open={open}
			onOk={onOk}
			onCancel={onCancel}
			confirmLoading={isCreating}
			okText='Создать'
			cancelText='Отмена'
		>
			<Form form={form} layout='vertical' className={styles.animalForm}>
				<Form.Item
					label='Имя животного'
					name='name'
					rules={[{ required: true, message: 'Введите имя животного' }]}
				>
					<Input placeholder='Например, Барсик' />
				</Form.Item>

				<Form.Item label='Описание' name='description'>
					<Input.TextArea
						rows={2}
						placeholder='Короткое описание (порода, особенности)'
					/>
				</Form.Item>

				<Form.Item label='Дата рождения' name='birthDate'>
					<DatePicker placeholder='Выберите дату' style={{ width: '100%' }} />
				</Form.Item>

				<Form.Item label='Вес (кг)' name='mass'>
					<Input placeholder='Например, 5' />
				</Form.Item>

				<Form.Item
					label='Фото'
					extra='Загрузите основное фото животного (необязательно)'
				>
					<Upload
						beforeUpload={() => false} // не загружаем автоматически
						showUploadList={true} // показываем выбраный файл
						onChange={handleSelectPhoto}
					>
						<Button icon={<UploadOutlined />}>Выбрать фото</Button>
					</Upload>
					{photoFile && (
						<span className={styles.fileSelected}>
							Выбрано: {photoFile.name}
						</span>
					)}
				</Form.Item>

				<Form.Item
					label='Документ'
					extra='Загрузите документ (ветпаспорт и т.д.)'
				>
					<Upload
						beforeUpload={() => false}
						showUploadList={true}
						onChange={handleSelectDocument}
					>
						<Button icon={<PlusOutlined />}>Выбрать документ</Button>
					</Upload>
					{documentFile && (
						<span className={styles.fileSelected}>
							Выбрано: {documentFile.name}
						</span>
					)}
				</Form.Item>
			</Form>
		</Modal>
	)
}
```

=== Файл: layouts/MainLayout/MainLayout.tsx ===
```typescript
import { MenuOutlined } from '@ant-design/icons'
import { Button, Drawer, Layout } from 'antd'
import { useState } from 'react'
import { Outlet } from 'react-router-dom'
import styles from './MainLayout.module.scss'

// Можно взять Layout.Header/Layout.Content/Layout.Footer из antd
const { Header, Content } = Layout

export function MainLayout() {
	const [isDrawerOpen, setIsDrawerOpen] = useState(false)

	function toggleDrawer() {
		setIsDrawerOpen(!isDrawerOpen)
	}

	return (
		<Layout className={styles.mainLayout}>
			<Header className={styles.topBar}>
				<Button
					className={styles.burgerButton}
					icon={<MenuOutlined />}
					onClick={toggleDrawer}
					type='text'
				/>
				<h2 className={styles.appName}>Pet Health Tracker</h2>
			</Header>

			<Drawer
				title='Меню'
				placement='left'
				closable
				onClose={toggleDrawer}
				open={isDrawerOpen}
			>
				{/* Тут ваши пункты меню (ссылки), например */}
				<p>Пункт 1</p>
				<p>Пункт 2</p>
			</Drawer>

			<Content className={styles.contentWrapper}>
				<Outlet />
			</Content>
		</Layout>
	)
}
```

=== Файл: layouts/AuthLayout/AuthLayout.tsx ===
```typescript
import { Layout } from 'antd'
import { AiOutlineSafetyCertificate } from 'react-icons/ai'
import { Outlet } from 'react-router-dom'
import styles from './AuthLayout.module.scss'

// Можно также использовать "Layout.Header" из antd.
export function AuthLayout() {
	return (
		<Layout className={styles.authLayout}>
			<header className={styles.topBar}>
				{/* Лого или простая иконка */}
				<AiOutlineSafetyCertificate className={styles.logoIcon} />
				<h2 className={styles.appName}>Pet Health Tracker</h2>
			</header>

			{/* Основное содержимое (страница /auth/login, /auth/register, /auth/activate) */}
			<div className={styles.contentWrapper}>
				<Outlet />
			</div>
		</Layout>
	)
}
```

=== Файл: features/diary/hooks/useDiary.ts ===
```typescript
import { useMutation, useQuery, useQueryClient } from '@tanstack/react-query'
import { useToken } from '../../auth/hooks/useToken'
import { diaryApi } from '../api/diaryApi'
import { StatusLogCreateRequest, StatusLogUpdateRequest } from '../api/types'

export const useDiary = (animalId: number) => {
	const queryClient = useQueryClient()
	const { getAccessToken } = useToken()

	// Получение всех записей
	const statusLogsQuery = useQuery({
		queryKey: ['animalStatusLogs', animalId],
		queryFn: () => diaryApi.getStatusLogs(animalId),
		enabled: !!animalId && !!getAccessToken(),
	})

	// Создание записи
	const createMutation = useMutation({
		mutationFn: (data: StatusLogCreateRequest) =>
			diaryApi.createStatusLog(animalId, data),
		onSuccess: () => {
			queryClient.invalidateQueries({
				queryKey: ['animalStatusLogs', animalId],
			})
		},
	})

	// Обновление записи
	const updateMutation = useMutation({
		mutationFn: ({
			statusLogId,
			data,
		}: {
			statusLogId: number
			data: StatusLogUpdateRequest
		}) => diaryApi.updateStatusLog(animalId, statusLogId, data),
		onSuccess: () => {
			queryClient.invalidateQueries({
				queryKey: ['animalStatusLogs', animalId],
			})
		},
	})

	// Удаление записи
	const deleteMutation = useMutation({
		mutationFn: (statusLogId: number) =>
			diaryApi.deleteStatusLog(animalId, statusLogId),
		onSuccess: () => {
			queryClient.invalidateQueries({
				queryKey: ['animalStatusLogs', animalId],
			})
		},
	})

	return {
		statusLogs: statusLogsQuery.data,
		isLoading: statusLogsQuery.isLoading,
		refetchStatusLogs: statusLogsQuery.refetch,

		createStatusLog: createMutation.mutateAsync,
		isCreating: createMutation.isPending,

		updateStatusLog: updateMutation.mutateAsync,
		isUpdating: updateMutation.isPending,

		deleteStatusLog: deleteMutation.mutateAsync,
		isDeleting: deleteMutation.isPending,
	}
}
```

=== Файл: features/diary/hooks/useDiaryFiles.ts ===
```typescript
import { useMutation, useQueryClient } from '@tanstack/react-query'
import { diaryApi } from '../api/diaryApi'

export const useDiaryFiles = (animalId: number, statusLogId: number) => {
	const queryClient = useQueryClient()

	const addPhoto = useMutation({
		mutationFn: (file: File) =>
			diaryApi.addStatusLogPhoto(animalId, statusLogId, file),
		onSuccess: () => {
			queryClient.invalidateQueries({
				queryKey: ['animalStatusLogs', animalId],
			})
		},
	})

	const deletePhoto = useMutation({
		mutationFn: (photoId: number) => diaryApi.deleteStatusLogPhoto(photoId),
		onSuccess: () => {
			queryClient.invalidateQueries({
				queryKey: ['animalStatusLogs', animalId],
			})
		},
	})

	const addDocument = useMutation({
		mutationFn: ({ file, type }: { file: File; type: string }) =>
			diaryApi.addStatusLogDocument(animalId, statusLogId, file, type),
		onSuccess: () => {
			queryClient.invalidateQueries({
				queryKey: ['animalStatusLogs', animalId],
			})
		},
	})

	const deleteDocument = useMutation({
		mutationFn: (documentId: number) =>
			diaryApi.deleteStatusLogDocument(documentId),
		onSuccess: () => {
			queryClient.invalidateQueries({
				queryKey: ['animalStatusLogs', animalId],
			})
		},
	})

	return {
		addPhoto: addPhoto.mutateAsync,
		isAddingPhoto: addPhoto.isPending,

		deletePhoto: deletePhoto.mutateAsync,
		isDeletingPhoto: deletePhoto.isPending,

		addDocument: addDocument.mutateAsync,
		isAddingDocument: addDocument.isPending,

		deleteDocument: deleteDocument.mutateAsync,
		isDeletingDocument: deleteDocument.isPending,
	}
}
```

=== Файл: features/diary/hooks/useDiaryAttributes.ts ===
```typescript
import { useMutation, useQuery, useQueryClient } from '@tanstack/react-query'
import { AttributeRequest } from '../../animal/api/types'
import { useToken } from '../../auth/hooks/useToken'
import { diaryApi } from '../api/diaryApi'

export const useDiaryAttributes = (animalId: number, statusLogId?: number) => {
	const queryClient = useQueryClient()
	const { getAccessToken } = useToken()

	// История атрибутов животного
	const attributeHistoryQuery = useQuery({
		queryKey: ['animalAttributeHistory', animalId],
		queryFn: () => diaryApi.getAttributeHistory(animalId),
		enabled: !!animalId && !!getAccessToken(),
	})

	// Операции с атрибутами записи
	const addAttribute = useMutation({
		mutationFn: (data: AttributeRequest) =>
			diaryApi.addStatusLogAttribute(animalId, statusLogId!, data),
		onSuccess: () => {
			queryClient.invalidateQueries({
				queryKey: ['animalStatusLogs', animalId],
			})
		},
	})

	const updateAttribute = useMutation({
		mutationFn: ({
			attributeId,
			data,
		}: {
			attributeId: number
			data: AttributeRequest
		}) =>
			diaryApi.updateStatusLogAttribute(
				animalId,
				statusLogId!,
				attributeId,
				data
			),
		onSuccess: () => {
			queryClient.invalidateQueries({
				queryKey: ['animalStatusLogs', animalId],
			})
			queryClient.invalidateQueries({
				queryKey: ['animalAttributeHistory', animalId],
			})
		},
	})

	const deleteAttribute = useMutation({
		mutationFn: (attributeId: number) =>
			diaryApi.deleteStatusLogAttribute(animalId, statusLogId!, attributeId),
		onSuccess: () => {
			queryClient.invalidateQueries({
				queryKey: ['animalStatusLogs', animalId],
			})
			queryClient.invalidateQueries({
				queryKey: ['animalAttributeHistory', animalId],
			})
		},
	})

	return {
		attributeHistory: attributeHistoryQuery.data,
		isLoadingHistory: attributeHistoryQuery.isLoading,

		addAttribute: addAttribute.mutateAsync,
		isAddingAttribute: addAttribute.isPending,

		updateAttribute: updateAttribute.mutateAsync,
		isUpdatingAttribute: updateAttribute.isPending,

		deleteAttribute: deleteAttribute.mutateAsync,
		isDeletingAttribute: deleteAttribute.isPending,
	}
}
```

=== Файл: features/diary/api/types.ts ===
```typescript
import {
	AttributeRequest,
	AttributeResponse,
	DocumentResponse,
} from '../../animal/api/types'

export interface StatusLogCreateRequest {
	notes?: string
	logDate?: string // ISO date
	attributes?: AttributeRequest[]
}

export interface StatusLogUpdateRequest {
	notes?: string
	logDate?: string
}

export interface StatusLogResponse {
	id: number
	logDate: string
	notes?: string
	photos: string[] // objectKeys
	documents: DocumentResponse[]
	attributes: AttributeResponse[]
}

export interface AttributeHistoryResponse {
	attributeName: string
	oldValue?: string
	changedAt: string
	changedBy: string
}

export interface StatusLogWithHistory extends StatusLogResponse {
	attributeHistory: AttributeHistoryResponse[]
}
```

=== Файл: features/diary/api/diaryApi.ts ===
```typescript
import { apiClient } from '../../../api/client'
import { AttributeRequest } from '../../animal/api/types'
import {
	AttributeHistoryResponse,
	StatusLogCreateRequest,
	StatusLogResponse,
	StatusLogUpdateRequest,
	StatusLogWithHistory,
} from './types'

export const diaryApi = {
	// Основные операции с записями
	createStatusLog: (animalId: number, data: StatusLogCreateRequest) =>
		apiClient
			.post<StatusLogResponse>(`/animals/${animalId}/status-logs`, data)
			.then(r => r.data),

	getStatusLog: (animalId: number, statusLogId: number) =>
		apiClient
			.get<StatusLogWithHistory>(
				`/animals/${animalId}/status-logs/${statusLogId}`
			)
			.then(r => r.data),
	getStatusLogs: (animalId: number) =>
		apiClient
			.get<StatusLogResponse[]>(`/animals/${animalId}/status-logs`)
			.then(r => r.data),
	updateStatusLog: (
		animalId: number,
		statusLogId: number,
		data: StatusLogUpdateRequest
	) =>
		apiClient
			.put<StatusLogResponse>(
				`/animals/${animalId}/status-logs/${statusLogId}`,
				data
			)
			.then(r => r.data),

	deleteStatusLog: (animalId: number, statusLogId: number) =>
		apiClient
			.delete(`/animals/${animalId}/status-logs/${statusLogId}`)
			.then(r => r.data),

	// Файлы записей
	addStatusLogPhoto: (animalId: number, statusLogId: number, file: File) => {
		const formData = new FormData()
		formData.append('file', file)
		return apiClient
			.post(
				`/animals/${animalId}/status-logs/${statusLogId}/photos`,
				formData,
				{ headers: { 'Content-Type': 'multipart/form-data' } }
			)
			.then(r => r.data)
	},

	deleteStatusLogPhoto: (photoId: number) =>
		apiClient
			.delete(`/animals/status-logs/photos/${photoId}`)
			.then(r => r.data),

	addStatusLogDocument: (
		animalId: number,
		statusLogId: number,
		file: File,
		type: string
	) => {
		const formData = new FormData()
		formData.append('file', file)
		formData.append('type', type)
		return apiClient
			.post(
				`/animals/${animalId}/status-logs/${statusLogId}/documents`,
				formData,
				{ headers: { 'Content-Type': 'multipart/form-data' } }
			)
			.then(r => r.data)
	},

	deleteStatusLogDocument: (documentId: number) =>
		apiClient
			.delete(`/animals/status-logs/documents/${documentId}`)
			.then(r => r.data),

	// Атрибуты записей
	addStatusLogAttribute: (
		animalId: number,
		statusLogId: number,
		data: AttributeRequest
	) =>
		apiClient
			.post(`/animals/${animalId}/status-logs/${statusLogId}/attributes`, data)
			.then(r => r.data),

	updateStatusLogAttribute: (
		animalId: number,
		statusLogId: number,
		attributeId: number,
		data: AttributeRequest
	) =>
		apiClient
			.patch(
				`/animals/${animalId}/status-logs/${statusLogId}/attributes/${attributeId}`,
				data
			)
			.then(r => r.data),

	deleteStatusLogAttribute: (
		animalId: number,
		statusLogId: number,
		attributeId: number
	) =>
		apiClient
			.delete(
				`/animals/${animalId}/status-logs/${statusLogId}/attributes/${attributeId}`
			)
			.then(r => r.data),

	// Получение истории атрибутов
	getAttributeHistory: (animalId: number) =>
		apiClient
			.get<AttributeHistoryResponse[]>(
				`/animals/${animalId}/attributes/history`
			)
			.then(r => r.data),
}
```

=== Файл: features/auth/hooks/useAuth.ts ===
```typescript
import { useMutation } from '@tanstack/react-query'
import { authApi } from '../api/authApi'
import { useToken } from './useToken'

export const useAuth = () => {
	const { setTokens, clearTokens } = useToken()

	const registerMutation = useMutation({
		mutationFn: authApi.register,
	})

	const activateMutation = useMutation({
		mutationFn: authApi.activate,
	})

	const loginMutation = useMutation({
		mutationFn: authApi.login,
		onSuccess: data => {
			setTokens({
				accessToken: data.access_token,
				refreshToken: data.refresh_token,
			})
		},
	})

	const logout = () => {
		clearTokens()
		// Дополнительные действия при выходе
	}

	return {
		register: registerMutation.mutateAsync,
		isRegistering: registerMutation.isPending,

		activate: activateMutation.mutateAsync,
		isActivating: activateMutation.isPending,

		login: loginMutation.mutateAsync,
		isLoggingIn: loginMutation.isPending,

		logout,
	}
}
```

=== Файл: features/auth/hooks/useToken.ts ===
```typescript
import { useEffect } from 'react'
import { apiClient } from '../../../api/client'

export const useToken = () => {
	const setTokens = (tokens: { accessToken: string; refreshToken: string }) => {
		localStorage.setItem('accessToken', tokens.accessToken)
		localStorage.setItem('refreshToken', tokens.refreshToken)
		apiClient.defaults.headers['Authorization'] = `Bearer ${tokens.accessToken}`
	}

	const clearTokens = () => {
		localStorage.removeItem('accessToken')
		localStorage.removeItem('refreshToken')
		delete apiClient.defaults.headers['Authorization']
	}

	const getAccessToken = () => localStorage.getItem('accessToken')

	// Инициализация при монтировании
	useEffect(() => {
		const token = localStorage.getItem('accessToken')
		if (token) {
			apiClient.defaults.headers['Authorization'] = `Bearer ${token}`
		}
	}, [])

	return { setTokens, clearTokens, getAccessToken }
}
```

=== Файл: features/auth/api/types.ts ===
```typescript
// Регистрация
export interface RegisterRequest {
	username: string
	email: string
	password: string
}

export interface RegisterResponse {
	email: string
	username: string
	isActivated: boolean
}

// Активация
export interface ActivateRequest {
	token: string
}

// Авторизация
export interface LoginRequest {
	indentifier: string // email или username
	password: string
}

export interface Tokens {
	access_token: string
	refresh_token: string
	access_expires_at: string
	refresh_expires_at: string
}

export interface LoginResponse extends Tokens {
	user: {
		email: string
		username: string
	}
}
```

=== Файл: features/auth/api/authApi.ts ===
```typescript
import { apiClient } from '../../../api/client'
import {
	LoginRequest,
	LoginResponse,
	RegisterRequest,
	RegisterResponse,
} from './types'

export const authApi = {
	register: (data: RegisterRequest) =>
		apiClient
			.post<RegisterResponse>('/auth/register', data)
			.then(response => response.data),

	activate: (token: string) =>
		apiClient
			.get<void>('/auth/activate-account', {
				params: { token },
			})
			.then(r => r.data),

	login: (data: LoginRequest) =>
		apiClient
			.post<LoginResponse>('/auth/authenticate', data)
			.then(response => response.data),
}
```

=== Файл: features/user/hooks/useUser.ts ===
```typescript
import { useMutation, useQuery } from '@tanstack/react-query'
import { userApi } from '../api/userApi'

export const useUser = () => {
	// Получение текущего пользователя
	const {
		data: currentUser,
		isLoading: isUserLoading,
		refetch: refetchUser,
	} = useQuery({
		queryKey: ['currentUser'],
		queryFn: userApi.getCurrentUser,
		staleTime: 5 * 60 * 1000, // 5 минут
	})

	// Обновление данных
	const updateMutation = useMutation({
		mutationFn: userApi.updateUser,
		onSuccess: () => refetchUser(),
	})

	// Загрузка фото
	const uploadPhotoMutation = useMutation({
		mutationFn: userApi.uploadPhoto,
		onSuccess: () => refetchUser(),
	})

	return {
		currentUser,
		isUserLoading,

		updateUser: updateMutation.mutateAsync,
		isUpdating: updateMutation.isPending,

		uploadPhoto: uploadPhotoMutation.mutateAsync,
		isUploading: uploadPhotoMutation.isPending,
	}
}
```

=== Файл: features/user/api/types.ts ===
```typescript
// Обновление данных пользователя
export interface UserUpdateRequest {
	firstName?: string
	lastName?: string
	city?: string
	aboutMe?: string
}

export interface UserResponse {
	username: string
	firstName?: string
	lastName?: string
	city?: string
	aboutMe?: string
	photoUrl?: string
}

// Загрузка фото
export interface S3FileResponse {
	objectKey: string
	presignedUrl: string
}
```

=== Файл: features/user/api/userApi.ts ===
```typescript
import { apiClient } from '../../../api/client'
import { S3FileResponse, UserResponse, UserUpdateRequest } from './types'

export const userApi = {
	getCurrentUser: () =>
		apiClient.get<UserResponse>('/users/me').then(r => r.data),

	updateUser: (data: UserUpdateRequest) =>
		apiClient.patch<UserResponse>('/users/me', data).then(r => r.data),

	uploadPhoto: (file: File) => {
		const formData = new FormData()
		formData.append('file', file)
		return apiClient
			.post<S3FileResponse>('/users/me/photo', formData, {
				headers: {
					'Content-Type': 'multipart/form-data',
				},
			})
			.then(r => r.data)
	},
}
```

=== Файл: features/animal/hooks/useAnimal.ts ===
```typescript

import { useMutation, useQuery, useQueryClient } from '@tanstack/react-query'
import { animalApi } from '../api/animalApi'
import { AnimalUpdateRequest } from '../api/types'
import { useToken } from '../../auth/hooks/useToken'

export const useAnimal = (animalId?: number) => {
	const queryClient = useQueryClient()
	const { getAccessToken } = useToken()

	// Получение данных животного
	const animalQuery = useQuery({
		queryKey: ['animal', animalId],
		queryFn: () => animalApi.getAnimal(animalId!),
		enabled: !!animalId && !!getAccessToken(),
		staleTime: 5 * 60 * 1000,
	})

	// Создание животного
	const createMutation = useMutation({
		mutationFn: animalApi.createAnimal,
		onSuccess: () => {
			queryClient.invalidateQueries({ queryKey: ['userAnimals'] })
		},
	})

	// Обновление животного
	const updateMutation = useMutation({
		mutationFn: ({ id, data }: { id: number; data: AnimalUpdateRequest }) =>
			animalApi.updateAnimal(id, data),
		onSuccess: (_, { id }) => {
			queryClient.invalidateQueries({ queryKey: ['animal', id] })
		},
	})

	// Удаление животного
	const deleteMutation = useMutation({
		mutationFn: animalApi.deleteAnimal,
		onSuccess: () => {
			queryClient.invalidateQueries({ queryKey: ['userAnimals'] })
		},
	})

	return {
		// Данные
		animalData: animalQuery.data,
		isLoading: animalQuery.isLoading,
		refetchAnimal: animalQuery.refetch,

		// Основные операции
		createAnimal: createMutation.mutateAsync,
		isCreating: createMutation.isPending,

		updateAnimal: updateMutation.mutateAsync,
		isUpdating: updateMutation.isPending,

		deleteAnimal: deleteMutation.mutateAsync,
		isDeleting: deleteMutation.isPending,
	}
}
```

=== Файл: features/animal/hooks/useAnalytics.ts ===
```typescript
import { useQuery } from '@tanstack/react-query'
import { useToken } from '../../auth/hooks/useToken'
import { analyticsApi } from '../api/analyticsApi'

export const useAnalytics = (animalId?: number) => {
	const { getAccessToken } = useToken()

	return useQuery({
		queryKey: ['animalAnalytics', animalId],
		queryFn: () => analyticsApi.getAnimalAnalytics(animalId!),
		enabled: !!animalId && !!getAccessToken(),
		select: data =>
			data.map(item => ({
				...item,
				changes: item.changes.map(change => ({
					...change,
					date: new Date(change.date).toLocaleDateString(),
				})),
			})),
	})
}
```

=== Файл: features/animal/hooks/useExport.ts ===
```typescript
import { useMutation } from '@tanstack/react-query'
import { exportApi } from '../api/exportApi'

export const useExport = () => {
	return useMutation({
		mutationFn: exportApi.exportAnimalToPdf,
		onSuccess: () => {
			// Можно добавить уведомление об успешном экспорте
			console.log('PDF exported successfully')
		},
		onError: error => {
			console.error('Export failed:', error)
		},
	})
}
```

=== Файл: features/animal/hooks/useUserAnimals.ts ===
```typescript
import { useQuery } from '@tanstack/react-query'
import { useToken } from '../../auth/hooks/useToken'
import { analyticsApi } from '../api/analyticsApi'

export const useUserAnimals = () => {
	const { getAccessToken } = useToken()

	return useQuery({
		queryKey: ['userAnimals'],
		queryFn: analyticsApi.getUserAnimals,
		enabled: !!getAccessToken(),
		staleTime: 5 * 60 * 1000, // 5 минут
	})
}
```

=== Файл: features/animal/hooks/useAnimalAttributes.ts ===
```typescript
import { useMutation, useQueryClient } from '@tanstack/react-query'
import { animalApi } from '../api/animalApi'
import { AttributeRequest, AttributeResponse } from '../api/types'

export const useAnimalAttributes = (animalId: number) => {
	const queryClient = useQueryClient()

	const addAttribute = useMutation<AttributeResponse, Error, AttributeRequest>({
		mutationFn: data => animalApi.addAttribute(animalId, data),
		onSuccess: () => {
			queryClient.invalidateQueries({ queryKey: ['animal', animalId] })
		},
	})

	const updateAttribute = useMutation<
		AttributeResponse,
		Error,
		{ attrId: number; data: AttributeRequest }
	>({
		mutationFn: ({ attrId, data }) =>
			animalApi.updateAttribute(animalId, attrId, data),
		onSuccess: () => {
			queryClient.invalidateQueries({ queryKey: ['animal', animalId] })
		},
	})

	const deleteAttribute = useMutation<void, Error, number>({
		mutationFn: attrId => animalApi.deleteAttribute(animalId, attrId),
		onSuccess: () => {
			queryClient.invalidateQueries({ queryKey: ['animal', animalId] })
		},
	})

	return {
		addAttribute: addAttribute.mutateAsync,
		isAdding: addAttribute.isPending,

		updateAttribute: updateAttribute.mutateAsync,
		isUpdatingAttr: updateAttribute.isPending,

		deleteAttribute: deleteAttribute.mutateAsync,
		isDeletingAttr: deleteAttribute.isPending,
	}
}
```

=== Файл: features/animal/api/analyticsApi.ts ===
```typescript
import { apiClient } from '../../../api/client'
import { AnimalResponse } from './types'

export interface AnimalAnalyticsResponse {
	attributeName: string
	changes: {
		date: string
		value: string
		changedBy: string
	}[]
	stats?: {
		minValue: string
		maxValue: string
		avgValue: number
	}
}

export const analyticsApi = {
	getAnimalAnalytics: (animalId: number) =>
		apiClient
			.get<AnimalAnalyticsResponse[]>(`/animals/${animalId}/analytics`)
			.then(r => r.data),

	getUserAnimals: () =>
		apiClient.get<AnimalResponse[]>('/users/me/animals').then(r => r.data),
}
```

=== Файл: features/animal/api/types.ts ===
```typescript
// Основные типы
export interface AnimalCreateRequest {
	name: string
	description?: string
	birthDate?: string // ISO date string
	mass?: number
	attributes: AttributeRequest[]
}

export interface AnimalUpdateRequest {
	name?: string
	description?: string
	birthDate?: string
	mass?: number
}

export interface AnimalResponse {
	id: number
	name: string
	description?: string
	birthDate?: string
	mass?: number
	attributes: AttributeResponse[]
	photos: string[] // objectKeys
	documents: DocumentResponse[]
	statusLogs: StatusLogResponse[]
}

export interface AttributeRequest {
	name: string
	value: string
}

export interface AttributeResponse {
	id: number
	name: string
	value?: string
}

export interface DocumentResponse {
	id: number
	type: string
	objectKey: string
	documentName?: string
}

export interface StatusLogResponse {
	id: number
	logDate: string
	notes?: string
	photos: string[]
	documents: DocumentResponse[]
}

export interface S3FileResponse {
	objectKey: string
	presignedUrl: string
}
```

=== Файл: features/animal/api/exportApi.ts ===
```typescript
import { apiClient } from '../../../api/client'

export const exportApi = {
	exportAnimalToPdf: (animalId: number) =>
		apiClient
			.get(`/animals/${animalId}/export/pdf`, {
				responseType: 'blob',
				headers: {
					Accept: 'application/pdf',
				},
			})
			.then(response => {
				// Создаем URL для скачивания файла
				const url = window.URL.createObjectURL(new Blob([response.data]))
				const link = document.createElement('a')
				link.href = url
				link.setAttribute('download', `animal_${animalId}_report.pdf`)
				document.body.appendChild(link)
				link.click()
				document.body.removeChild(link)
				return response
			}),
}
```

=== Файл: features/animal/api/animalApi.ts ===
```typescript
import { apiClient } from '../../../api/client'
import {
	AnimalCreateRequest,
	AnimalResponse,
	AnimalUpdateRequest,
	AttributeRequest,
	AttributeResponse,
	S3FileResponse,
	StatusLogResponse,
} from './types'

export const animalApi = {
	// Основные операции
	createAnimal: (data: AnimalCreateRequest) =>
		apiClient.post<AnimalResponse>('/animals', data).then(r => r.data),

	getAnimal: (animalId: number) =>
		apiClient.get<AnimalResponse>(`/animals/${animalId}`).then(r => r.data),

	updateAnimal: (animalId: number, data: AnimalUpdateRequest) =>
		apiClient
			.patch<AnimalResponse>(`/animals/${animalId}`, data)
			.then(r => r.data),

	deleteAnimal: (animalId: number) =>
		apiClient.delete(`/animals/${animalId}`).then(r => r.data),

	// Атрибуты
	addAttribute: (animalId: number, data: AttributeRequest) =>
		apiClient
			.post<AttributeResponse>(`/animals/${animalId}/attributes`, data)
			.then(r => r.data),

	updateAttribute: (
		animalId: number,
		attributeId: number,
		data: AttributeRequest
	) =>
		apiClient
			.patch<AttributeResponse>(
				`/animals/${animalId}/attributes/${attributeId}`,
				data
			)
			.then(r => r.data),

	deleteAttribute: (animalId: number, attributeId: number) =>
		apiClient
			.delete(`/animals/${animalId}/attributes/${attributeId}`)
			.then(r => r.data),

	// Фото
	uploadAnimalPhoto: (animalId: number, file: File) => {
		const formData = new FormData()
		formData.append('file', file)
		return apiClient
			.post<S3FileResponse>(`/animals/${animalId}/photos`, formData, {
				headers: { 'Content-Type': 'multipart/form-data' },
			})
			.then(r => r.data)
	},

	deleteAnimalPhoto: (photoId: number) =>
		apiClient.delete(`/animals/photos/${photoId}`).then(r => r.data),

	// Документы
	uploadAnimalDocument: (animalId: number, file: File, type: string) => {
		const formData = new FormData()
		formData.append('file', file)
		formData.append('type', type)
		return apiClient
			.post<S3FileResponse>(`/animals/${animalId}/documents`, formData, {
				headers: { 'Content-Type': 'multipart/form-data' },
			})
			.then(r => r.data)
	},

	deleteAnimalDocument: (documentId: number) =>
		apiClient.delete(`/animals/documents/${documentId}`).then(r => r.data),

	// История состояний
	getStatusLogs: (animalId: number) =>
		apiClient
			.get<StatusLogResponse[]>(`/animals/${animalId}/status-logs`)
			.then(r => r.data),
	
}
```

=== Файл: api/client.ts ===
```typescript
import axios from 'axios'

export const apiClient = axios.create({
	baseURL: import.meta.env.VITE_API_URL || '/api',
	withCredentials: true,
})

apiClient.interceptors.response.use(
	response => response,
	error => {
		if (error.response?.status === 401) {
			console.log('Ошибка атворизации')
		}
		return Promise.reject(error)
	}
)

// Инициализация токена при старте
const token = localStorage.getItem('accessToken')
if (token) {
	apiClient.defaults.headers['Authorization'] = `Bearer ${token}`
}
```

