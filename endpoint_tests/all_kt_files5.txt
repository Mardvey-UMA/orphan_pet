=== Файл: UserServiceApplication.kt ===
```kotlin
package ru.animaltracker.userservice

import org.springframework.boot.autoconfigure.SpringBootApplication
import org.springframework.boot.runApplication

@SpringBootApplication
class UserServiceApplication

fun main(args: Array<String>) {
    runApplication<UserServiceApplication>(*args)
}
```

=== Файл: pdfexport/PdfExporter.kt ===
```kotlin
package ru.animaltracker.userservice.pdfexport

import com.itextpdf.io.source.ByteArrayOutputStream
import com.itextpdf.kernel.pdf.PdfDocument
import com.itextpdf.kernel.pdf.PdfWriter
import com.itextpdf.layout.Document
import com.itextpdf.layout.element.Paragraph
import com.itextpdf.layout.properties.TextAlignment
import org.springframework.stereotype.Component
import ru.animaltracker.userservice.entity.Animal

@Component
class PdfExporter {
    fun exportAnimal(animal: Animal): ByteArray {
        ByteArrayOutputStream().use { outputStream ->
            PdfDocument(PdfWriter(outputStream)).use { pdfDoc ->
                Document(pdfDoc).use { doc ->

                    doc.add(
                        Paragraph("Данные о животном")
                        .setTextAlignment(TextAlignment.CENTER)
                        .setFontSize(20f))

                    doc.add(Paragraph("Основная информация:").setBold())
                    addKeyValue(doc, "Имя", animal.name)
                    addKeyValue(doc, "Описание", animal.description)
                    addKeyValue(doc, "Дата рождения", animal.birthDate?.toString())
                    addKeyValue(doc, "Вес", animal.mass?.toString())

                    doc.add(Paragraph("Атрибуты:").setBold())
                    animal.attributes.forEach { attr ->
                        attr.name?.let { addKeyValue(doc, it, attr.values.firstOrNull()?.value) }
                    }

                    doc.add(Paragraph("История изменений:").setBold())
                    animal.statusLogs.sortedBy { it.logDate }.forEach { log ->
                        doc.add(Paragraph("${log.logDate}: ${log.notes}"))
                    }
                }
            }

            return outputStream.toByteArray()
        }
    }

    private fun addKeyValue(doc: Document, key: String, value: String?) {
        doc.add(Paragraph("$key: ${value ?: "не указано"}"))
    }
}
```

=== Файл: controller/AnimalMediaController.kt ===
```kotlin
package ru.animaltracker.userservice.controller

import ru.animaltracker.userservice.service.interfaces.AnimalMediaService
import jakarta.validation.Valid
import org.springframework.http.HttpStatus
import org.springframework.http.MediaType
import org.springframework.http.ResponseEntity
import org.springframework.web.bind.annotation.*
import org.springframework.web.multipart.MultipartFile
import ru.animaltracker.userservice.dto.*

@RestController
@RequestMapping("/api/animals/{animalId}/media")
class AnimalMediaController(
    private val animalMediaService: AnimalMediaService
) {

    @PostMapping("/photos", consumes = [MediaType.MULTIPART_FORM_DATA_VALUE])
    fun uploadAnimalPhoto(
        @RequestHeader("X-User-Name") username: String,
        @PathVariable animalId: Long,
        @RequestParam("file") file: MultipartFile
    ): ResponseEntity<S3FileResponse> {
        return ResponseEntity.ok(animalMediaService.addAnimalPhoto(username, animalId, file))
    }

    @PostMapping("/documents", consumes = [MediaType.MULTIPART_FORM_DATA_VALUE])
    fun uploadAnimalDocument(
        @RequestHeader("X-User-Name") username: String,
        @PathVariable animalId: Long,
        @RequestParam("file") file: MultipartFile,
        @RequestParam type: String
    ): ResponseEntity<S3FileResponse> {
        return ResponseEntity.ok(animalMediaService.addAnimalDocument(username, animalId, file, type))
    }

    @DeleteMapping("/photos/{photoId}")
    fun deleteAnimalPhoto(
        @RequestHeader("X-User-Name") username: String,
        @PathVariable photoId: Long
    ): ResponseEntity<Void> {
        animalMediaService.deleteAnimalPhoto(username, photoId)
        return ResponseEntity.noContent().build()
    }

    @DeleteMapping("/documents/{documentId}")
    fun deleteAnimalDocument(
        @RequestHeader("X-User-Name") username: String,
        @PathVariable documentId: Long
    ): ResponseEntity<Void> {
        animalMediaService.deleteAnimalDocument(username, documentId)
        return ResponseEntity.noContent().build()
    }
}
```

=== Файл: controller/UserController.kt ===
```kotlin
package ru.animaltracker.userservice.controller

import jakarta.validation.Valid
import org.springframework.http.MediaType
import org.springframework.http.ResponseEntity
import org.springframework.web.bind.annotation.*
import org.springframework.web.multipart.MultipartFile
import ru.animaltracker.userservice.dto.AnimalResponse
import ru.animaltracker.userservice.dto.S3FileResponse
import ru.animaltracker.userservice.dto.UserResponse
import ru.animaltracker.userservice.dto.UserUpdateRequest
import ru.animaltracker.userservice.service.interfaces.UserService

@RestController
@RequestMapping("/api/users")
class UserController(
    private val userService: UserService,
    private val animalService: AnimalService
) {

    @GetMapping("/me")
     fun getCurrentUser(
        @RequestHeader("X-User-Name") username: String
    ): ResponseEntity<UserResponse> {
        return ResponseEntity.ok(userService.getUser(username))
    }

    @PatchMapping("/me")
     fun updateUser(
        @RequestHeader("X-User-Name") username: String,
        @Valid @RequestBody request: UserUpdateRequest
    ): ResponseEntity<UserResponse> {
        return ResponseEntity.ok(userService.updateUser(username, request))
    }

    @PostMapping("/me/photo", consumes = [MediaType.MULTIPART_FORM_DATA_VALUE])
     fun uploadUserPhoto(
        @RequestHeader("X-User-Name") username: String,
        @RequestParam("file") file: MultipartFile
    ): ResponseEntity<S3FileResponse> {
        return ResponseEntity.ok(userService.uploadUserPhoto(username, file))
    }

    @GetMapping("/me/animals")
     fun getUserAnimals(
        @RequestHeader("X-User-Name") username: String
    ): ResponseEntity<List<AnimalResponse>> {
        return ResponseEntity.ok(animalService.getUserAnimals(username))
    }
}
```

=== Файл: controller/StatusLogMediaController.kt ===
```kotlin
package ru.animaltracker.userservice.controller
import jakarta.validation.Valid
import org.springframework.http.HttpStatus
import org.springframework.http.ResponseEntity
import org.springframework.web.bind.annotation.*
import org.springframework.web.multipart.MultipartFile
import ru.animaltracker.userservice.dto.*
import ru.animaltracker.userservice.service.interfaces.StatusLogMediaService
import org.springframework.http.MediaType

@RestController
@RequestMapping("/api/animals/{animalId}/status-logs/{statusLogId}/media")
class StatusLogMediaController(
    private val statusLogMediaService: StatusLogMediaService
) {

    @PostMapping("/photos", consumes = [MediaType.MULTIPART_FORM_DATA_VALUE])
    fun uploadStatusLogPhoto(
        @RequestHeader("X-User-Name") username: String,
        @PathVariable animalId: Long,
        @PathVariable statusLogId: Long,
        @RequestParam("file") file: MultipartFile
    ): ResponseEntity<S3FileResponse> {
        return ResponseEntity.ok(
            statusLogMediaService.addStatusLogPhoto(username, animalId, statusLogId, file)
        )
    }

    @PostMapping("/documents", consumes = [MediaType.MULTIPART_FORM_DATA_VALUE])
    fun uploadStatusLogDocument(
        @RequestHeader("X-User-Name") username: String,
        @PathVariable animalId: Long,
        @PathVariable statusLogId: Long,
        @RequestParam("file") file: MultipartFile,
        @RequestParam type: String
    ): ResponseEntity<S3FileResponse> {
        return ResponseEntity.ok(
            statusLogMediaService.addStatusLogDocument(username, animalId, statusLogId, file, type)
        )
    }
}
```

=== Файл: controller/StatusLogController.kt ===
```kotlin
package ru.animaltracker.userservice.controller

import jakarta.validation.Valid
import org.springframework.http.HttpStatus
import org.springframework.http.ResponseEntity
import org.springframework.web.bind.annotation.*
import ru.animaltracker.userservice.dto.*
import ru.animaltracker.userservice.service.interfaces.StatusLogService


@RestController
@RequestMapping("/api/animals/{animalId}/status-logs")
class StatusLogController(
    private val statusLogService: StatusLogService
) {

    @PostMapping
    fun addStatusLog(
        @RequestHeader("X-User-Name") username: String,
        @PathVariable animalId: Long,
        @Valid @RequestBody request: StatusLogCreateRequest
    ): ResponseEntity<StatusLogResponse> {
        return ResponseEntity.ok(statusLogService.addStatusLog(username, animalId, request))
    }

    @GetMapping
    fun getStatusLogs(
        @RequestHeader("X-User-Name") username: String,
        @PathVariable animalId: Long
    ): ResponseEntity<List<StatusLogResponse>> {
        return ResponseEntity.ok(statusLogService.getStatusLogs(username, animalId))
    }

    @GetMapping("/{statusLogId}")
    fun getStatusLog(
        @RequestHeader("X-User-Name") username: String,
        @PathVariable animalId: Long,
        @PathVariable statusLogId: Long
    ): ResponseEntity<StatusLogResponse> {
        return ResponseEntity.ok(statusLogService.getStatusLog(statusLogId))
    }

    @PutMapping("/{statusLogId}")
    fun updateStatusLog(
        @RequestHeader("X-User-Name") username: String,
        @PathVariable animalId: Long,
        @PathVariable statusLogId: Long,
        @Valid @RequestBody request: StatusLogUpdateRequest
    ): ResponseEntity<StatusLogResponse> {
        return ResponseEntity.ok(
            statusLogService.updateStatusLog(username, animalId, statusLogId, request)
        )
    }

    @DeleteMapping("/{statusLogId}")
    fun deleteStatusLog(
        @RequestHeader("X-User-Name") username: String,
        @PathVariable animalId: Long,
        @PathVariable statusLogId: Long
    ): ResponseEntity<Void> {
        statusLogService.deleteStatusLog(username, animalId, statusLogId)
        return ResponseEntity.noContent().build()
    }
}
```

=== Файл: controller/AnalyticsReportController.kt ===
```kotlin
package ru.animaltracker.userservice.controller
import jakarta.validation.Valid
import org.springframework.http.HttpStatus
import org.springframework.http.ResponseEntity
import org.springframework.web.bind.annotation.*
import ru.animaltracker.userservice.dto.*
import ru.animaltracker.userservice.service.interfaces.AnalyticsReportService

@RestController
@RequestMapping("/api/animals/{animalId}/analytics")
class AnalyticsReportController(
    private val analyticsReportService: AnalyticsReportService
) {

    @GetMapping
    fun getAnimalAnalytics(
        @RequestHeader("X-User-Name") username: String,
        @PathVariable animalId: Long
    ): ResponseEntity<List<AnimalAnalyticsResponse>> {
        return ResponseEntity.ok(analyticsReportService.getAnimalAnalytics(animalId))
    }

    @GetMapping("/export/pdf")
    fun exportAnimalToPdf(
        @RequestHeader("X-User-Name") username: String,
        @PathVariable animalId: Long
    ): ResponseEntity<ByteArray> {
        val pdfBytes = analyticsReportService.exportAnimalToPdf(username, animalId)

        return ResponseEntity.ok()
            .header("Content-Type", "application/pdf")
            .header("Content-Disposition", "attachment; filename=animal_${animalId}.pdf")
            .body(pdfBytes)
    }
}
```

=== Файл: controller/AnimalManagementController.kt ===
```kotlin
package ru.animaltracker.userservice.controller

import jakarta.validation.Valid
import org.springframework.http.HttpStatus
import org.springframework.http.ResponseEntity
import org.springframework.web.bind.annotation.*
import ru.animaltracker.userservice.dto.*
import ru.animaltracker.userservice.service.interfaces.AnimalManagementService

@RestController
@RequestMapping("/api/animals")
class AnimalManagementController(
    private val animalManagementService: AnimalManagementService
) {

    @PostMapping
    fun createAnimal(
        @RequestHeader("X-User-Name") username: String,
        @Valid @RequestBody request: AnimalCreateRequest
    ): ResponseEntity<AnimalResponse> {
        return ResponseEntity.ok(animalManagementService.createAnimal(username, request))
    }

    @GetMapping("/{animalId}")
    fun getAnimal(
        @RequestHeader("X-User-Name") username: String,
        @PathVariable animalId: Long
    ): ResponseEntity<AnimalResponse> {
        return ResponseEntity.ok(animalManagementService.getAnimal(username, animalId))
    }

    @GetMapping
    fun getUserAnimals(
        @RequestHeader("X-User-Name") username: String
    ): ResponseEntity<List<AnimalResponse>> {
        return ResponseEntity.ok(animalManagementService.getUserAnimals(username))
    }

    @DeleteMapping("/{animalId}")
    fun deleteAnimal(
        @RequestHeader("X-User-Name") username: String,
        @PathVariable animalId: Long
    ): ResponseEntity<Void> {
        animalManagementService.deleteAnimal(username, animalId)
        return ResponseEntity.noContent().build()
    }

    @PatchMapping("/{animalId}")
    fun updateAnimal(
        @RequestHeader("X-User-Name") username: String,
        @PathVariable animalId: Long,
        @Valid @RequestBody request: AnimalUpdateRequest
    ): ResponseEntity<AnimalResponse> {
        return ResponseEntity.ok(animalManagementService.updateAnimal(username, animalId, request))
    }

    @PostMapping("/{animalId}/attributes")
    fun addAttribute(
        @RequestHeader("X-User-Name") username: String,
        @PathVariable animalId: Long,
        @Valid @RequestBody request: AttributeRequest
    ): ResponseEntity<AttributeResponse> {
        return ResponseEntity.status(HttpStatus.CREATED)
            .body(animalManagementService.addAttribute(username, animalId, request))
    }

    @PatchMapping("/{animalId}/attributes/{attributeId}")
    fun updateAttribute(
        @RequestHeader("X-User-Name") username: String,
        @PathVariable animalId: Long,
        @PathVariable attributeId: Short,
        @Valid @RequestBody request: AttributeUpdateRequest
    ): ResponseEntity<AttributeResponse> {
        return ResponseEntity.ok(
            animalManagementService.updateAttribute(username, animalId, attributeId, request)
        )
    }

    @DeleteMapping("/{animalId}/attributes/{attributeId}")
    fun deleteAttribute(
        @RequestHeader("X-User-Name") username: String,
        @PathVariable animalId: Long,
        @PathVariable attributeId: Short
    ): ResponseEntity<Void> {
        animalManagementService.deleteAttribute(username, animalId, attributeId)
        return ResponseEntity.noContent().build()
    }

    @GetMapping("/{animalId}/attributes/history")
    fun getAttributesHistory(
        @RequestHeader("X-User-Name") username: String,
        @PathVariable animalId: Long
    ): ResponseEntity<List<AttributeHistoryResponse>> {
        return ResponseEntity.ok(animalManagementService.getAnimalAttributesHistory(animalId))
    }
}
```

=== Файл: service/MessageConsumerService.kt ===
```kotlin
package ru.animaltracker.userservice.service

import com.fasterxml.jackson.databind.ObjectMapper
import org.springframework.kafka.annotation.KafkaListener
import org.springframework.stereotype.Service
import org.springframework.transaction.annotation.Transactional
import ru.animaltracker.userservice.dto.UserCreatedEvent
import ru.animaltracker.userservice.entity.User
import ru.animaltracker.userservice.repository.UserRepository
@Service
class MessageConsumerService(
    private val objectMapper: ObjectMapper,
    private val userRepository: UserRepository,
) {

    @KafkaListener(topics = ["user-created"])
    @Transactional
    fun listen(json: String) {
        val dto = objectMapper.readValue(json, UserCreatedEvent::class.java)

        if (userRepository.findByEmail(dto.email) == null) {
            userRepository.save(User().apply {
                email = dto.email
                username = dto.username
            })
        }
    }
}
```

=== Файл: service/impl/UserServiceImpl.kt ===
```kotlin
package ru.animaltracker.userservice.service.impl

import jakarta.persistence.EntityNotFoundException
import org.springframework.stereotype.Service
import org.springframework.transaction.annotation.Transactional
import org.springframework.web.multipart.MultipartFile
import ru.animaltracker.userservice.dto.S3FileResponse
import ru.animaltracker.userservice.dto.UserResponse
import ru.animaltracker.userservice.dto.UserUpdateRequest
import ru.animaltracker.userservice.entity.Photo
import ru.animaltracker.userservice.entity.UserPhoto
import ru.animaltracker.userservice.repository.PhotoRepository
import ru.animaltracker.userservice.repository.UserPhotoRepository
import ru.animaltracker.userservice.repository.UserRepository
import ru.animaltracker.userservice.service.interfaces.S3Service
import ru.animaltracker.userservice.service.interfaces.UserService

@Service
class UserServiceImpl(
    private val userRepository: UserRepository,
    private val s3Service: S3Service,
    private val photoRepository: PhotoRepository,
    private val userPhotoRepository: UserPhotoRepository
) : UserService {

    @Transactional
    override fun updateUser(username: String, request: UserUpdateRequest): UserResponse {
        val user = userRepository.findByUsername(username)
            ?: throw EntityNotFoundException("User not found")

        request.firstName?.let { user.firstName = it }
        request.lastName?.let { user.lastName = it }
        request.city?.let { user.city = it }
        request.aboutMe?.let { user.aboutMe = it }
        val savedUser = userRepository.save(user)
        return savedUser.toDto(s3Service)
    }

    @Transactional(readOnly = true)
    override fun getUser(username: String): UserResponse {
        val user = userRepository.findByUsername(username)
            ?: throw EntityNotFoundException("User not found")

        return user.toDto(s3Service)
    }

    @Transactional
    override fun uploadUserPhoto(username: String, file: MultipartFile): S3FileResponse {
        val user = userRepository.findByUsername(username)
            ?: throw EntityNotFoundException("User not found")

        // Удаляем старое фото если есть
        user.userPhotos.firstOrNull()?.let { userPhoto ->
            userPhoto.photo?.objectKey?.let { s3Service.deleteFile(it) }
            photoRepository.delete(userPhoto.photo ?: throw IllegalStateException("Photo not found"))
            userPhotoRepository.delete(userPhoto)
        }

        // Загружаем новое фото
        val objectKey = s3Service.uploadFile(file, "users/$username/photos")
        val photo = photoRepository.save(Photo().apply {
            this.objectKey = objectKey
        })

        // Создаем связь пользователя с фото
        userPhotoRepository.save(UserPhoto().apply {
            this.user = user
            this.photo = photo
        })

        return S3FileResponse(
            objectKey = objectKey,
            presignedUrl = s3Service.generatePresignedUrl(objectKey)
        )
    }
}
```

=== Файл: service/impl/AnimalValidationServiceImpl.kt ===
```kotlin
package ru.animaltracker.userservice.service.impl

import jakarta.persistence.EntityNotFoundException
import org.springframework.stereotype.Service
import org.springframework.transaction.annotation.Transactional
import ru.animaltracker.userservice.entity.Animal
import ru.animaltracker.userservice.entity.AnimalStatusLog
import ru.animaltracker.userservice.entity.User
import ru.animaltracker.userservice.repository.AnimalRepository
import ru.animaltracker.userservice.repository.AnimalStatusLogRepository
import ru.animaltracker.userservice.repository.UserRepository
import ru.animaltracker.userservice.service.interfaces.AnimalValidationService
import java.nio.file.AccessDeniedException


@Service
class AnimalValidationServiceImpl (
    private val userRepository: UserRepository,
    private val animalRepository: AnimalRepository,
    private val statusLogRepository: AnimalStatusLogRepository
): AnimalValidationService {


    @Transactional(readOnly = true)
    override fun validateUserAndAnimal(username: String, animalId: Long): Pair<User, Animal> {
        val user = userRepository.findByUsername(username)
            ?: throw EntityNotFoundException("User not found")

        val animal = animalRepository.findById(animalId)
            .orElseThrow { EntityNotFoundException("Animal not found") }

        if (animal.animalUsers.none { it.user?.id == user.id }) {
            throw AccessDeniedException("User doesn't have access to this animal")
        }

        return user to animal
    }

    @Transactional(readOnly = true)
    override fun validateUserAndStatusLog(
        username: String,
        animalId: Long,
        statusLogId: Long
    ): Triple<User, Animal, AnimalStatusLog> {
        val (user, animal) = validateUserAndAnimal(username, animalId)

        val statusLog = statusLogRepository.findById(statusLogId)
            .orElseThrow { EntityNotFoundException("Status log not found") }

        if (statusLog.animal.id != animalId) {
            throw AccessDeniedException("Status log doesn't belong to this animal")
        }

        return Triple(user, animal, statusLog)
    }
}
```

=== Файл: service/impl/StatusLogServiceImpl.kt ===
```kotlin
package ru.animaltracker.userservice.service.impl

import jakarta.persistence.EntityNotFoundException
import org.springframework.stereotype.Service
import org.springframework.transaction.annotation.Transactional
import ru.animaltracker.userservice.dto.*
import ru.animaltracker.userservice.entity.*
import ru.animaltracker.userservice.repository.*
import ru.animaltracker.userservice.service.interfaces.AnimalValidationService
import ru.animaltracker.userservice.service.interfaces.S3Service
import ru.animaltracker.userservice.service.interfaces.StatusLogService
import java.time.LocalDate

@Service
class StatusLogServiceImpl(
    private val statusLogRepository: AnimalStatusLogRepository,
    private val photoRepository: PhotoRepository,
    private val documentRepository: DocumentRepository,
    private val s3Service: S3Service,
    private val animalValidationService: AnimalValidationService
) : StatusLogService {

    @Transactional
    override fun addStatusLog(
        username: String,
        animalId: Long,
        request: StatusLogCreateRequest
    ): StatusLogResponse {
        val (user, animal) = animalValidationService.validateUserAndAnimal(username, animalId)

        val statusLog = statusLogRepository.save(AnimalStatusLog().apply {
            notes = request.notes
            logDate = request.logDate ?: LocalDate.now()
            this.animal = animal
            this.user = user
        })

        return statusLog.toDto(s3Service)
    }

    @Transactional
    override fun updateStatusLog(
        username: String,
        animalId: Long,
        statusLogId: Long,
        request: StatusLogUpdateRequest
    ): StatusLogResponse {
        val (_, _, statusLog) = animalValidationService.validateUserAndStatusLog(username, animalId, statusLogId)

        request.notes?.let { statusLog.notes = it }
        request.logDate?.let { statusLog.logDate = it }

        return statusLogRepository.save(statusLog).toDto(s3Service)
    }

    @Transactional
    override fun deleteStatusLog(username: String, animalId: Long, statusLogId: Long) {
        val (_, _, statusLog) = animalValidationService.validateUserAndStatusLog(username, animalId, statusLogId)

        statusLog.statusLogPhotos.forEach {
            it.photo?.objectKey?.let { key -> s3Service.deleteFile(key) }
            it.photo?.let { photo -> photoRepository.delete(photo) }
        }

        statusLog.statusLogDocuments.forEach {
            it.document?.objectKey?.let { key -> s3Service.deleteFile(key) }
            it.document?.let { doc -> documentRepository.delete(doc) }
        }

        statusLogRepository.delete(statusLog)
    }

    @Transactional(readOnly = true)
    override fun getStatusLogs(username: String, animalId: Long): List<StatusLogResponse> {
        val (_, animal) = animalValidationService.validateUserAndAnimal(username, animalId)
        return statusLogRepository.findByAnimalId(animalId).map { it.toDto(s3Service) }
    }

    @Transactional(readOnly = true)
    override fun getStatusLog(id: Long): StatusLogResponse {
        val log = statusLogRepository.findById(id)
            .orElseThrow { EntityNotFoundException("Status log not found") }
        return log.toDto(s3Service)
    }

}
```

=== Файл: service/impl/AnimalManagementServiceImpl.kt ===
```kotlin
package ru.animaltracker.userservice.service.impl

import jakarta.persistence.EntityNotFoundException
import org.springframework.stereotype.Service
import org.springframework.transaction.annotation.Transactional
import ru.animaltracker.userservice.dto.*
import ru.animaltracker.userservice.entity.*
import ru.animaltracker.userservice.repository.*
import ru.animaltracker.userservice.service.interfaces.AnimalManagementService
import ru.animaltracker.userservice.service.interfaces.AnimalValidationService
import ru.animaltracker.userservice.service.interfaces.S3Service
import java.nio.file.AccessDeniedException
import java.time.LocalDate

@Service
class AnimalManagementServiceImpl(
    private val userRepository: UserRepository,
    private val animalRepository: AnimalRepository,
    private val attributeRepository: AttributeRepository,
    private val attributeValueHistoryRepository: AttributeValueHistoryRepository,
    private val s3Service: S3Service,
    private val animalValidationService: AnimalValidationService
) : AnimalManagementService {

    @Transactional
    override fun createAnimal(username: String, request: AnimalCreateRequest): AnimalResponse {
        val user = userRepository.findByUsername(username)
            ?: throw EntityNotFoundException("User not found")

        val animal = Animal().apply {
            name = request.name
            description = request.description
            birthDate = request.birthDate
            mass = request.mass
        }

        val savedAnimal = animalRepository.save(animal)

        request.attributes.forEach { attrRequest ->
            val attribute = Attribute().apply {
                name = attrRequest.name
                this.animal = savedAnimal
                addValue(attrRequest.value)
            }
            attributeRepository.save(attribute)
        }

        user.addAnimal(savedAnimal)
        userRepository.save(user)

        return savedAnimal.toDto(s3Service)
    }

    @Transactional(readOnly = true)
    override fun getAnimal(username: String, animalId: Long): AnimalResponse {
        val (_, animal) = animalValidationService.validateUserAndAnimal(username, animalId)
        return animal.toDto(s3Service)
    }

    @Transactional(readOnly = true)
    override fun getUserAnimals(username: String): List<AnimalResponse> {
        val user = userRepository.findByUsername(username)
            ?: throw EntityNotFoundException("User not found")

        return user.animalUsers.mapNotNull { it.animal?.toDto(s3Service) }
    }

    @Transactional
    override fun deleteAnimal(username: String, animalId: Long) {
        val (_, animal) = animalValidationService.validateUserAndAnimal(username, animalId)
        animalRepository.delete(animal)
    }

    @Transactional
    override fun updateAnimal(username: String, animalId: Long, request: AnimalUpdateRequest): AnimalResponse {
        val (_, animal) = animalValidationService.validateUserAndAnimal(username, animalId)

        request.name?.let { animal.name = it }
        request.description?.let { animal.description = it }
        request.birthDate?.let { animal.birthDate = it }
        request.mass?.let { animal.mass = it }

        return animalRepository.save(animal).toDto(s3Service)
    }

    @Transactional
    override fun addAttribute(username: String, animalId: Long, request: AttributeRequest): AttributeResponse {
        val (_, animal) = animalValidationService.validateUserAndAnimal(username, animalId)

        val attribute = Attribute().apply {
            name = request.name
            this.animal = animal
        }.also { attr ->
            attr.values.add(Value().apply {
                value = request.value
                attribute = attr
            })
        }

        return attributeRepository.save(attribute).toDto()
    }

    @Transactional
    override fun updateAttribute(
        username: String,
        animalId: Long,
        attributeId: Short,
        request: AttributeUpdateRequest
    ): AttributeResponse {
        val (user, animal) = animalValidationService.validateUserAndAnimal(username, animalId)
        val attribute = attributeRepository.findById(attributeId)
            .orElseThrow { EntityNotFoundException("Attribute not found") }

        if (attribute.animal?.id != animalId) {
            throw AccessDeniedException("Attribute doesn't belong to this animal")
        }

        request.name?.let { attribute.name = it }

        if (request.value != null) {
            val value = attribute.values.firstOrNull() ?: Value().apply {
                this.attribute = attribute
            }
            value.value = request.value
            attribute.values.clear()
            attribute.values.add(value)

            attributeValueHistoryRepository.save(AttributeValueHistory().apply {
                this.value = request.value
                this.recordedAt = LocalDate.now()
                this.user = user
                this.animal = animal
                this.attribute = attribute
            })
        }

        return attributeRepository.save(attribute).toDto()
    }

    @Transactional
    override fun deleteAttribute(username: String, animalId: Long, attributeId: Short) {
        val (_, _) = animalValidationService.validateUserAndAnimal(username, animalId)
        val attribute = attributeRepository.findById(attributeId)
            .orElseThrow { EntityNotFoundException("Attribute not found") }

        if (attribute.animal?.id != animalId) {
            throw AccessDeniedException("Attribute doesn't belong to this animal")
        }

        attributeRepository.delete(attribute)
    }

    @Transactional(readOnly = true)
    override fun getAnimalAttributesHistory(animalId: Long): List<AttributeHistoryResponse> {
        val animal = animalRepository.findById(animalId)
            .orElseThrow { EntityNotFoundException("Animal not found") }

        return attributeRepository.findByAnimalId(animalId)
            .flatMap { attribute ->
                attribute.valueHistories.map { history ->
                    AttributeHistoryResponse(
                        attributeName = attribute.name ?: "",
                        oldValue = history.value,
                        changedAt = history.recordedAt ?: LocalDate.now(),
                        changedBy = history.user.username ?: ""
                    )
                }
            }
    }

}
```

=== Файл: service/impl/S3ServiceImpl.kt ===
```kotlin
package ru.animaltracker.userservice.service.impl

import org.springframework.beans.factory.annotation.Value
import org.springframework.stereotype.Service
import org.springframework.web.multipart.MultipartFile
import ru.animaltracker.userservice.exception.FileProcessingException
import ru.animaltracker.userservice.exception.FileUploadException
import ru.animaltracker.userservice.service.interfaces.S3Service
import software.amazon.awssdk.core.sync.RequestBody
import software.amazon.awssdk.services.s3.S3Client
import software.amazon.awssdk.services.s3.model.GetObjectRequest
import software.amazon.awssdk.services.s3.model.PutObjectRequest
import software.amazon.awssdk.services.s3.model.S3Object
import software.amazon.awssdk.services.s3.presigner.S3Presigner
import java.time.Duration
import java.util.*


@Service
class S3ServiceImpl(
    private val s3Client: S3Client,
    private val s3Presigner: S3Presigner,
    @Value("\${s3.bucket}") private val bucket: String
) : S3Service {

    companion object {
        private const val DEFAULT_PRESIGNED_URL_DURATION_MINUTES = 10080L
    }

    override  fun uploadFile(
        file: MultipartFile,
        prefix: String,
        metadata: Map<String, String>
    ): String {
        val objectKey = "$prefix/${UUID.randomUUID()}_${file.originalFilename?.replace(" ", "_")}"

        val putObjectRequest = PutObjectRequest.builder()
            .bucket(bucket)
            .key(objectKey)
            .contentType(file.contentType)
            .metadata(metadata)
            .build()

        try {
            s3Client.putObject(
                putObjectRequest,
                RequestBody.fromBytes(file.bytes)
            )
            return objectKey
        } catch (e: Exception) {
            throw FileUploadException("Failed to upload file: ${e.message}")
        }
    }

    override  fun generatePresignedUrl(objectKey: String, duration: Duration): String {
        try {
            val getObjectRequest = GetObjectRequest.builder()
                .bucket(bucket)
                .key(objectKey)
                .build()

            val presignedRequest = s3Presigner.presignGetObject { builder ->
                builder.getObjectRequest(getObjectRequest)
                    .signatureDuration(duration)
            }

            return presignedRequest.url().toString()
        } catch (e: Exception) {
            throw FileProcessingException("Failed to generate presigned URL: ${e.message}")
        }
    }

    override  fun generatePresignedUrl(objectKey: String): String {
        return generatePresignedUrl(objectKey, Duration.ofMinutes(DEFAULT_PRESIGNED_URL_DURATION_MINUTES))
    }

    override  fun deleteFile(objectKey: String) {
        try {
            s3Client.deleteObject { builder ->
                builder.bucket(bucket).key(objectKey)
            }
        } catch (e: Exception) {
            throw FileProcessingException("Failed to delete file: ${e.message}")
        }
    }

    override  fun getFileMetadata(objectKey: String): Map<String, String> {
        val response = s3Client.headObject {
            it.bucket(bucket).key(objectKey)
        }

        return response.metadata().mapValues { (_, value) ->
            value
        }
    }
}
```

=== Файл: service/impl/AnimalMediaServiceImpl.kt ===
```kotlin
package ru.animaltracker.userservice.service.impl

import jakarta.persistence.EntityNotFoundException
import org.springframework.stereotype.Service
import org.springframework.transaction.annotation.Transactional
import org.springframework.web.multipart.MultipartFile
import ru.animaltracker.userservice.dto.S3FileResponse
import ru.animaltracker.userservice.entity.*
import ru.animaltracker.userservice.repository.*
import ru.animaltracker.userservice.service.interfaces.AnimalMediaService
import ru.animaltracker.userservice.service.interfaces.AnimalValidationService
import ru.animaltracker.userservice.service.interfaces.S3Service
import java.nio.file.AccessDeniedException

@Service
class AnimalMediaServiceImpl(
    private val userRepository: UserRepository,
    private val animalRepository: AnimalRepository,
    private val documentRepository: DocumentRepository,
    private val photoRepository: PhotoRepository,
    private val animalPhotoRepository: AnimalPhotoRepository,
    private val s3Service: S3Service,
    private val animalValidationService: AnimalValidationService
) : AnimalMediaService {

    @Transactional
    override fun addAnimalPhoto(username: String, animalId: Long, file: MultipartFile): S3FileResponse {
        val (_, animal) = animalValidationService.validateUserAndAnimal(username, animalId)

        val objectKey = s3Service.uploadFile(file, "animals/$animalId/photos")
        val photo = photoRepository.save(Photo().apply {
            this.objectKey = objectKey
        })

        animalPhotoRepository.save(AnimalPhoto().apply {
            this.animal = animal
            this.photo = photo
        })

        return S3FileResponse(objectKey, s3Service.generatePresignedUrl(objectKey))
    }

    @Transactional
    override fun addAnimalDocument(username: String, animalId: Long, file: MultipartFile, type: String): S3FileResponse {
        val (_, animal) = animalValidationService.validateUserAndAnimal(username, animalId)

        val objectKey = s3Service.uploadFile(file, "animals/$animalId/documents")
        val document = documentRepository.save(Document().apply {
            this.type = type
            this.objectKey = objectKey
            this.documentName = file.originalFilename
            this.animal = animal
        })

        return S3FileResponse(objectKey, s3Service.generatePresignedUrl(objectKey))
    }

    @Transactional
    override fun deleteAnimalPhoto(username: String, photoId: Long) {
        val photo = photoRepository.findById(photoId)
            .orElseThrow { EntityNotFoundException("Photo not found") }

        val animalPhoto = animalPhotoRepository.findByPhotoId(photoId)
            ?: throw AccessDeniedException("Photo not linked to animal")

        animalValidationService.validateUserAndAnimal(username, animalPhoto.animal?.id ?: throw IllegalStateException())

        photo.objectKey?.let { s3Service.deleteFile(it) }
        photoRepository.delete(photo)
    }

    @Transactional
    override fun deleteAnimalDocument(username: String, documentId: Long) {
        val document = documentRepository.findById(documentId)
            .orElseThrow { EntityNotFoundException("Document not found") }

        animalValidationService.validateUserAndAnimal(username, document.animal?.id ?: throw IllegalStateException())

        document.objectKey?.let { s3Service.deleteFile(it) }
        documentRepository.delete(document)
    }

}
```

=== Файл: service/impl/StatusLogMediaServiceImpl.kt ===
```kotlin
package ru.animaltracker.userservice.service.impl

import org.springframework.stereotype.Service
import org.springframework.transaction.annotation.Transactional
import org.springframework.web.multipart.MultipartFile
import ru.animaltracker.userservice.dto.S3FileResponse
import ru.animaltracker.userservice.entity.*
import ru.animaltracker.userservice.repository.*
import ru.animaltracker.userservice.service.interfaces.AnimalValidationService
import ru.animaltracker.userservice.service.interfaces.S3Service
import ru.animaltracker.userservice.service.interfaces.StatusLogMediaService

@Service
class StatusLogMediaServiceImpl(
    private val photoRepository: PhotoRepository,
    private val statusLogPhotoRepository: StatusLogPhotoRepository,
    private val documentRepository: DocumentRepository,
    private val statusLogDocumentRepository: StatusLogDocumentRepository,
    private val s3Service: S3Service,
    private val animalValidationService: AnimalValidationService
) : StatusLogMediaService {

    @Transactional
    override fun addStatusLogPhoto(
        username: String,
        animalId: Long,
        statusLogId: Long,
        file: MultipartFile
    ): S3FileResponse {
        val (_, _, statusLog) = animalValidationService.validateUserAndStatusLog(username, animalId, statusLogId)

        val objectKey = s3Service.uploadFile(file, "animals/$animalId/status-logs/$statusLogId/photos")
        val photo = photoRepository.save(Photo().apply {
            this.objectKey = objectKey
        })

        statusLogPhotoRepository.save(StatusLogPhoto().apply {
            this.animalStatusLog = statusLog
            this.photo = photo
        })

        return S3FileResponse(objectKey, s3Service.generatePresignedUrl(objectKey))
    }

    @Transactional
    override fun addStatusLogDocument(
        username: String,
        animalId: Long,
        statusLogId: Long,
        file: MultipartFile,
        type: String
    ): S3FileResponse {
        val (_, animal, statusLog) = animalValidationService.validateUserAndStatusLog(username, animalId, statusLogId)

        val objectKey = s3Service.uploadFile(file, "animals/$animalId/status-logs/$statusLogId/documents")
        val document = documentRepository.save(Document().apply {
            this.type = type
            this.objectKey = objectKey
            this.documentName = file.originalFilename
            this.animal = animal
        })

        statusLogDocumentRepository.save(StatusLogDocument().apply {
            this.animalStatusLog = statusLog
            this.document = document
        })

        return S3FileResponse(objectKey, s3Service.generatePresignedUrl(objectKey))
    }
}
```

=== Файл: service/impl/AnalyticsReportServiceImpl.kt ===
```kotlin
package ru.animaltracker.userservice.service.impl

import org.springframework.beans.factory.annotation.Autowired
import org.springframework.stereotype.Service
import org.springframework.transaction.annotation.Transactional
import ru.animaltracker.userservice.dto.AnimalAnalyticsResponse
import ru.animaltracker.userservice.dto.AttributeChange
import ru.animaltracker.userservice.dto.AttributeStats
import ru.animaltracker.userservice.pdfexport.PdfExporter
import ru.animaltracker.userservice.repository.AttributeRepository
import ru.animaltracker.userservice.service.interfaces.AnalyticsReportService
import ru.animaltracker.userservice.service.interfaces.AnimalValidationService
import java.time.LocalDate

@Service
class AnalyticsReportServiceImpl (
    private val attributeRepository: AttributeRepository,
    private val animalValidationService: AnimalValidationService
): AnalyticsReportService {

    @Autowired
    private lateinit var pdfExporter: PdfExporter

    @Transactional(readOnly = true)
    override fun getAnimalAnalytics(animalId: Long): List<AnimalAnalyticsResponse> {
        val attributes = attributeRepository.findByAnimalId(animalId)

        return attributes.map { attribute ->
            val histories = attribute.valueHistories
                .sortedBy { it.recordedAt }
                .map { history ->
                    AttributeChange(
                        date = history.recordedAt ?: LocalDate.now(),
                        value = history.value ?: "",
                        changedBy = history.user.username ?: ""
                    )
                }

            val numericValues = histories
                .mapNotNull { it.value.toDoubleOrNull() }

            val stats = if (numericValues.isNotEmpty()) {
                AttributeStats(
                    minValue = numericValues.min().toString(),
                    maxValue = numericValues.max().toString(),
                    avgValue = numericValues.average()
                )
            } else {
                null
            }

            AnimalAnalyticsResponse(
                attributeName = attribute.name ?: "Unknown",
                changes = histories,
                stats = stats
            )
        }
    }


    @Transactional(readOnly = true)
    override  fun exportAnimalToPdf(username: String, animalId: Long): ByteArray {
        val (_, animal) = animalValidationService.validateUserAndAnimal(username, animalId)

        return pdfExporter.exportAnimal(animal)
    }
}
```

=== Файл: service/interfaces/AnimalMediaService.kt ===
```kotlin
package ru.animaltracker.userservice.service.interfaces

import org.springframework.web.multipart.MultipartFile
import ru.animaltracker.userservice.dto.S3FileResponse

interface AnimalMediaService {
    fun addAnimalPhoto(username: String, animalId: Long, file: MultipartFile): S3FileResponse
    fun addAnimalDocument(username: String, animalId: Long, file: MultipartFile, type: String): S3FileResponse
    fun deleteAnimalPhoto(username: String, photoId: Long)
    fun deleteAnimalDocument(username: String, documentId: Long)
}
```

=== Файл: service/interfaces/AnimalValidationService.kt ===
```kotlin
package ru.animaltracker.userservice.service.interfaces

import ru.animaltracker.userservice.entity.*

interface AnimalValidationService {
    fun validateUserAndAnimal(username: String, animalId: Long): Pair<User, Animal>
    fun validateUserAndStatusLog(
        username: String,
        animalId: Long,
        statusLogId: Long
    ): Triple<User, Animal, AnimalStatusLog>
}
```

=== Файл: service/interfaces/UserService.kt ===
```kotlin
package ru.animaltracker.userservice.service.interfaces

import org.springframework.web.multipart.MultipartFile
import ru.animaltracker.userservice.dto.S3FileResponse
import ru.animaltracker.userservice.dto.UserResponse
import ru.animaltracker.userservice.dto.UserUpdateRequest

interface UserService {
    fun updateUser(username: String, request: UserUpdateRequest): UserResponse
    fun getUser(username: String): UserResponse
    fun uploadUserPhoto(username: String, file: MultipartFile): S3FileResponse
}
```

=== Файл: service/interfaces/AnalyticsReportService.kt ===
```kotlin
package ru.animaltracker.userservice.service.interfaces
import ru.animaltracker.userservice.dto.*
interface AnalyticsReportService {
    fun getAnimalAnalytics(animalId: Long): List<AnimalAnalyticsResponse>
    fun exportAnimalToPdf(username: String, animalId: Long): ByteArray
}
```

=== Файл: service/interfaces/StatusLogService.kt ===
```kotlin
package ru.animaltracker.userservice.service.interfaces

import ru.animaltracker.userservice.dto.StatusLogCreateRequest
import ru.animaltracker.userservice.dto.StatusLogResponse
import ru.animaltracker.userservice.dto.StatusLogUpdateRequest

interface StatusLogService {
    fun addStatusLog(username: String, animalId: Long, request: StatusLogCreateRequest): StatusLogResponse
    fun updateStatusLog(username: String, animalId: Long, statusLogId: Long, request: StatusLogUpdateRequest): StatusLogResponse
    fun deleteStatusLog(username: String, animalId: Long, statusLogId: Long)
    fun getStatusLogs(username: String, animalId: Long): List<StatusLogResponse>
    fun getStatusLog(id: Long): StatusLogResponse
}
```

=== Файл: service/interfaces/StatusLogMediaService.kt ===
```kotlin
package ru.animaltracker.userservice.service.interfaces

import org.springframework.web.multipart.MultipartFile
import ru.animaltracker.userservice.dto.S3FileResponse

interface StatusLogMediaService {
    fun addStatusLogPhoto(username: String, animalId: Long, statusLogId: Long, file: MultipartFile): S3FileResponse
    fun addStatusLogDocument(username: String, animalId: Long, statusLogId: Long, file: MultipartFile, type: String): S3FileResponse
}
```

=== Файл: service/interfaces/S3Service.kt ===
```kotlin
package ru.animaltracker.userservice.service.interfaces

import org.springframework.web.multipart.MultipartFile
import software.amazon.awssdk.services.s3.model.S3Object
import java.time.Duration

interface S3Service {
     fun uploadFile(
        file: MultipartFile,
        prefix: String,
        metadata: Map<String, String> = emptyMap()
    ): String

     fun generatePresignedUrl(objectKey: String, duration: Duration): String
     fun generatePresignedUrl(objectKey: String): String
     fun deleteFile(objectKey: String)
     fun getFileMetadata(objectKey: String): Map<String, String>
}
```

=== Файл: service/interfaces/AnimalManagementService.kt ===
```kotlin
package ru.animaltracker.userservice.service.interfaces

import ru.animaltracker.userservice.dto.*

interface AnimalManagementService {
    fun createAnimal(username: String, request: AnimalCreateRequest): AnimalResponse
    fun getAnimal(username: String, animalId: Long): AnimalResponse
    fun getUserAnimals(username: String): List<AnimalResponse>
    fun deleteAnimal(username: String, animalId: Long)
    fun updateAnimal(username: String, animalId: Long, request: AnimalUpdateRequest): AnimalResponse
    fun addAttribute(username: String, animalId: Long, request: AttributeRequest): AttributeResponse
    fun updateAttribute(username: String, animalId: Long, attributeId: Short, request: AttributeUpdateRequest): AttributeResponse
    fun deleteAttribute(username: String, animalId: Long, attributeId: Short)
    fun getAnimalAttributesHistory(animalId: Long): List<AttributeHistoryResponse>
}
```

=== Файл: exception/Exceptions.kt ===
```kotlin
package ru.animaltracker.userservice.exception

class FileUploadException(message: String) : RuntimeException(message)
class FileProcessingException(message: String) : RuntimeException(message)
```

=== Файл: entity/Photo.kt ===
```kotlin
package ru.animaltracker.userservice.entity

import jakarta.persistence.*
import org.springframework.data.annotation.CreatedDate
import org.springframework.data.jpa.domain.support.AuditingEntityListener
import java.time.LocalDateTime
import jakarta.persistence.*
import java.time.LocalDate
@Entity
@Table(name = "photo")
class Photo {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    var id: Long = 0

    @Column(name = "object_key", length = 512, unique = true)
    var objectKey: String? = null

    @Column(name = "created_at")
    var createdAt: LocalDate? = null

    @OneToMany(mappedBy = "photo", cascade = [CascadeType.ALL], orphanRemoval = true)
    var userPhotos: MutableSet<UserPhoto> = mutableSetOf()

    @OneToMany(mappedBy = "photo", cascade = [CascadeType.ALL], orphanRemoval = true)
    var animalPhotos: MutableSet<AnimalPhoto> = mutableSetOf()

    @OneToMany(mappedBy = "photo", cascade = [CascadeType.ALL], orphanRemoval = true)
    var statusLogPhotos: MutableSet<StatusLogPhoto> = mutableSetOf()

    override fun equals(other: Any?): Boolean {
        if (this === other) return true
        if (other !is Photo) return false
        return id == other.id
    }

    override fun hashCode(): Int = id.hashCode()

    override fun toString(): String = "Photo(id=$id)"
}
```

=== Файл: entity/AnimalStatusLog.kt ===
```kotlin
package ru.animaltracker.userservice.entity
import jakarta.persistence.*
import ru.animaltracker.userservice.dto.StatusLogResponse
import ru.animaltracker.userservice.service.interfaces.S3Service
import java.time.LocalDate
@Entity
@Table(name = "animal_status_log")
class AnimalStatusLog {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    var id: Long = 0

    @Column(name = "log_date")
    var logDate: LocalDate? = null

    @Column(columnDefinition = "text")
    var notes: String? = null

    @Column(name = "updated_at")
    var updatedAt: LocalDate? = null

    @ManyToOne(fetch = FetchType.LAZY, optional = false)
    @JoinColumn(name = "animal_id")
    lateinit var animal: Animal

    @OneToMany(mappedBy = "animalStatusLog", cascade = [CascadeType.ALL], orphanRemoval = true)
    var statusLogPhotos: MutableSet<StatusLogPhoto> = mutableSetOf()

    @OneToMany(mappedBy = "animalStatusLog", cascade = [CascadeType.ALL], orphanRemoval = true)
    var statusLogDocuments: MutableSet<StatusLogDocument> = mutableSetOf()

    @ManyToOne(fetch = FetchType.LAZY, optional = false)
    @JoinColumn(name = "user_id")
    lateinit var user: User

    constructor()

    constructor(notes: String?, logDate: LocalDate?, animal: Animal, user: User) : this() {
        this.notes = notes
        this.logDate = logDate
        this.animal = animal
        this.user = user
        this.updatedAt = LocalDate.now()
    }

    fun addPhoto(photo: Photo): StatusLogPhoto {
        val statusLogPhoto = StatusLogPhoto().apply {
            this.animalStatusLog = this@AnimalStatusLog
            this.photo = photo
        }
        statusLogPhotos.add(statusLogPhoto)
        return statusLogPhoto
    }

    fun addDocument(document: Document): StatusLogDocument {
        val statusLogDocument = StatusLogDocument().apply {
            this.animalStatusLog = this@AnimalStatusLog
            this.document = document
        }
        statusLogDocuments.add(statusLogDocument)
        return statusLogDocument
    }

    fun toDto(s3Service: S3Service): StatusLogResponse {
        return StatusLogResponse(
            id = id,
            logDate = logDate ?: LocalDate.now(),
            notes = notes,
            photos = statusLogPhotos.mapNotNull { it.photo?.objectKey?.let { it1 -> s3Service.generatePresignedUrl(it1) } },
            documents = statusLogDocuments.mapNotNull { it.document?.objectKey?.let { it1 ->
                s3Service.generatePresignedUrl(
                    it1
                )
            } }
        )
    }

    override fun equals(other: Any?): Boolean {
        if (this === other) return true
        if (other !is AnimalStatusLog) return false
        return id == other.id
    }

    override fun hashCode(): Int = id.hashCode()

    override fun toString(): String = "AnimalStatusLog(id=$id)"
}
```

=== Файл: entity/AnimalPhoto.kt ===
```kotlin
package ru.animaltracker.userservice.entity
import jakarta.persistence.*
import java.time.LocalDate

@Entity
@Table(name = "animal_photo")
class AnimalPhoto {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    var id: Long = 0

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "animal_id")
    var animal: Animal? = null

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "photo_id")
    var photo: Photo? = null

    override fun equals(other: Any?): Boolean {
        if (this === other) return true
        if (other !is AnimalPhoto) return false
        return id == other.id
    }

    override fun hashCode(): Int = id.hashCode()

    override fun toString(): String = "AnimalPhoto(id=$id)"
}
```

=== Файл: entity/User.kt ===
```kotlin
package ru.animaltracker.userservice.entity

import jakarta.persistence.*
import ru.animaltracker.userservice.dto.UserResponse
import ru.animaltracker.userservice.service.interfaces.S3Service
import java.time.LocalDate

@Entity
@Table(name = "users")
class User {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    var id: Long = 0

    @Column(length = 255)
    var email: String? = null

    @Column(length = 255)
    var username: String? = null

    @Column(name = "first_name", length = 255)
    var firstName: String? = null

    @Column(name = "last_name", length = 255)
    var lastName: String? = null

    @Column(length = 255)
    var city: String? = null

    @Column(name = "about_me", length = 255)
    var aboutMe: String? = null

    @OneToMany(mappedBy = "user", cascade = [CascadeType.ALL], orphanRemoval = true)
    var userPhotos: MutableSet<UserPhoto> = mutableSetOf()

    @OneToMany(mappedBy = "user", cascade = [CascadeType.ALL], orphanRemoval = true)
    var animalUsers: MutableSet<AnimalUser> = mutableSetOf()

    @OneToMany(mappedBy = "user", cascade = [CascadeType.ALL], orphanRemoval = true)
    var attributeValueHistories: MutableSet<AttributeValueHistory> = mutableSetOf()

    fun addAnimal(animal: Animal) {
        val animalUser = AnimalUser().apply {
            this.user = this@User
            this.animal = animal
        }
        animalUsers.add(animalUser)
        animal.animalUsers.add(animalUser)
    }

    fun getAnimals(): List<Animal> = animalUsers.mapNotNull { it.animal }

    fun toDto(s3Service : S3Service): UserResponse {
        return UserResponse(
            username = username ?: "",
            firstName = firstName,
            lastName = lastName,
            city = city,
            aboutMe = aboutMe,
            photoUrl = userPhotos.firstOrNull()?.photo?.objectKey?.let { s3Service.generatePresignedUrl(it) }
        )
    }

    override fun equals(other: Any?): Boolean {
        if (this === other) return true
        if (other !is User) return false
        return id == other.id
    }

    override fun hashCode(): Int = id.hashCode()

    override fun toString(): String = "User(id=$id, username=$username)"
}
```

=== Файл: entity/StatusLogPhoto.kt ===
```kotlin
package ru.animaltracker.userservice.entity
import jakarta.persistence.*
import java.time.LocalDate
@Entity
@Table(name = "status_log_photo")
class StatusLogPhoto {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    var id: Long = 0

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "photo_id")
    var photo: Photo? = null

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "animal_status_log_id")
    var animalStatusLog: AnimalStatusLog? = null

    constructor()

    constructor(statusLog: AnimalStatusLog, photo: Photo) : this() {
        this.animalStatusLog = statusLog
        this.photo = photo
    }

    override fun equals(other: Any?): Boolean {
        if (this === other) return true
        if (other !is StatusLogPhoto) return false
        return id == other.id
    }

    override fun hashCode(): Int = id.hashCode()

    override fun toString(): String = "StatusLogPhoto(id=$id)"
}
```

=== Файл: entity/StatusLogDocument.kt ===
```kotlin
package ru.animaltracker.userservice.entity
import jakarta.persistence.*
import java.time.LocalDate
@Entity
@Table(name = "status_log_document")
class StatusLogDocument {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    var id: Long = 0

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "document_id")
    var document: Document? = null

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "animal_status_log_id")
    var animalStatusLog: AnimalStatusLog? = null

    constructor()

    constructor(statusLog: AnimalStatusLog, document: Document) : this() {
        this.animalStatusLog = statusLog
        this.document = document
    }

    override fun equals(other: Any?): Boolean {
        if (this === other) return true
        if (other !is StatusLogDocument) return false
        return id == other.id
    }

    override fun hashCode(): Int = id.hashCode()

    override fun toString(): String = "StatusLogDocument(id=$id)"
}
```

=== Файл: entity/Attribute.kt ===
```kotlin
package ru.animaltracker.userservice.entity
import jakarta.persistence.*
import ru.animaltracker.userservice.dto.AttributeResponse
import java.time.LocalDate

@Entity
@Table(name = "attribute")
class Attribute {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    var id: Short = 0

    @Column(length = 255)
    var name: String? = null

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "animal_id")
    var animal: Animal? = null

    @OneToMany(mappedBy = "attribute", cascade = [CascadeType.ALL], orphanRemoval = true)
    var values: MutableSet<Value> = mutableSetOf()

    @OneToMany(mappedBy = "attribute")
    var valueHistories: MutableSet<AttributeValueHistory> = mutableSetOf()

    fun addValue(valueStr: String) {
        val value = Value().apply {
            this.value = valueStr
            this.attribute = this@Attribute
        }
        values.add(value)
    }

    fun addHistory(history: AttributeValueHistory) {
        history.attribute = this
        valueHistories.add(history)
    }

    fun toDto(): AttributeResponse {
        return AttributeResponse(
            id = id,
            name = name,
            value = values.firstOrNull()?.value
        )
    }

    override fun equals(other: Any?): Boolean {
        if (this === other) return true
        if (other !is Attribute) return false
        return id == other.id
    }

    override fun hashCode(): Int = id.hashCode()

    override fun toString(): String = "Attribute(id=$id)"
}
```

=== Файл: entity/UserPhoto.kt ===
```kotlin
package ru.animaltracker.userservice.entity
import jakarta.persistence.*
import java.time.LocalDate
@Entity
@Table(name = "user_photo")
class UserPhoto {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    var id: Long = 0

    @ManyToOne(fetch = FetchType.LAZY, optional = false)
    @JoinColumn(name = "user_id")
    lateinit var user: User

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "photo_id")
    var photo: Photo? = null

    override fun equals(other: Any?): Boolean {
        if (this === other) return true
        if (other !is UserPhoto) return false
        return id == other.id
    }

    override fun hashCode(): Int = id.hashCode()

    override fun toString(): String = "UserPhoto(id=$id)"
}
```

=== Файл: entity/Value.kt ===
```kotlin
package ru.animaltracker.userservice.entity
import jakarta.persistence.*
import java.time.LocalDate

@Entity
@Table(name = "value")
class Value{
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    var id: Long = 0

    @Column(length = 1024)
    var value: String? = null

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "attribute_id")
    var attribute: Attribute? = null

override fun equals(other: Any?): Boolean {
    if (this === other) return true
    if (other !is Value) return false
    return id == other.id
}

override fun hashCode(): Int = id.hashCode()

override fun toString(): String = "Value(id=$id, value=$value)"
}
```

=== Файл: entity/AnimalUser.kt ===
```kotlin
package ru.animaltracker.userservice.entity
import jakarta.persistence.*
import java.time.LocalDate
@Entity
@Table(name = "animal_user")
class AnimalUser {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    var id: Long = 0

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "user_id")
    var user: User? = null

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "animal_id")
    var animal: Animal? = null

    override fun equals(other: Any?): Boolean {
        if (this === other) return true
        if (other !is AnimalUser) return false
        return id == other.id
    }

    override fun hashCode(): Int = id.hashCode()

    override fun toString(): String = "AnimalUser(id=$id)"
}
```

=== Файл: entity/Animal.kt ===
```kotlin
package ru.animaltracker.userservice.entity

import jakarta.persistence.*
import ru.animaltracker.userservice.dto.AnimalResponse
import ru.animaltracker.userservice.service.interfaces.S3Service
import java.math.BigDecimal
import java.time.LocalDate

@Entity
@Table(name = "animal")
class Animal {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    var id: Long = 0

    @Column(name = "body_mass")
    var mass: BigDecimal? = null

    @Column(name = "birth_date")
    var birthDate: LocalDate? = null

    @Column(name = "created_at")
    var createdAt: LocalDate? = null

    @Column(length = 255)
    var name: String? = null

    @Column(columnDefinition = "text")
    var description: String? = null

    @OneToMany(mappedBy = "animal",  orphanRemoval = true)
    var attributes: MutableSet<Attribute> = mutableSetOf()

    @OneToMany(mappedBy = "animal",  orphanRemoval = true)
    var animalPhotos: MutableSet<AnimalPhoto> = mutableSetOf()

    @OneToMany(mappedBy = "animal",  orphanRemoval = true)
    var animalUsers: MutableSet<AnimalUser> = mutableSetOf()

    @OneToMany(mappedBy = "animal",  orphanRemoval = true)
    var documents: MutableSet<Document> = mutableSetOf()

    @OneToMany(mappedBy = "animal",  orphanRemoval = true)
    var statusLogs: MutableSet<AnimalStatusLog> = mutableSetOf()

    @OneToMany(mappedBy = "animal",  orphanRemoval = true)
    var attributeValueHistories: MutableSet<AttributeValueHistory> = mutableSetOf()

    fun addStatusLog(statusLog: AnimalStatusLog) {
        statusLogs.add(statusLog)
        statusLog.animal = this
    }

    fun addPhoto(photo: Photo): AnimalPhoto {
        val animalPhoto = AnimalPhoto().apply {
            this.animal = this@Animal
            this.photo = photo
        }
        animalPhotos.add(animalPhoto)
        photo.animalPhotos.add(animalPhoto)
        return animalPhoto
    }

    fun addDocument(document: Document) {
        documents.add(document)
        document.animal = this
    }

    fun toDto(s3Service: S3Service): AnimalResponse {
        return AnimalResponse(
            id = id,
            name = name,
            description = description,
            birthDate = birthDate,
            mass = mass,
            attributes = attributes.map { it.toDto() },
            photos = animalPhotos.mapNotNull { it.photo?.objectKey?.let { it1 -> s3Service.generatePresignedUrl(it1) } },
            documents = documents.mapNotNull { it.objectKey?.let { it1 -> s3Service.generatePresignedUrl(it1) } },
        )
    }

    override fun equals(other: Any?): Boolean {
        if (this === other) return true
        if (other !is Animal) return false
        return id == other.id
    }

    override fun hashCode(): Int = id.hashCode()

    override fun toString(): String = "Animal(id=$id, name=$name)"
}
```

=== Файл: entity/Document.kt ===
```kotlin
package ru.animaltracker.userservice.entity
import jakarta.persistence.*
import java.time.LocalDate
@Entity
@Table(name = "document")
class Document {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    var id: Long = 0

    @Column(length = 255)
    var type: String? = null

    @Column(name = "object_key", length = 512)
    var objectKey: String? = null

    @Column(name = "document_name", length = 255)
    var documentName: String? = null

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "animal_id")
    var animal: Animal? = null

    @OneToMany(mappedBy = "document", cascade = [CascadeType.ALL], orphanRemoval = true)
    var statusLogDocuments: MutableSet<StatusLogDocument> = mutableSetOf()

    override fun equals(other: Any?): Boolean {
        if (this === other) return true
        if (other !is Document) return false
        return id == other.id
    }

    override fun hashCode(): Int = id.hashCode()

    override fun toString(): String = "Document(id=$id)"
}
```

=== Файл: entity/AttributeValueHistory.kt ===
```kotlin
package ru.animaltracker.userservice.entity
import jakarta.persistence.*
import java.time.LocalDate
@Entity
@Table(name = "attribute_value_history")
class AttributeValueHistory {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    var id: Long = 0

    @Column(length = 1024)
    var value: String? = null

    @Column(name = "recorded_at")
    var recordedAt: LocalDate? = null

    @ManyToOne(fetch = FetchType.LAZY, optional = false)
    @JoinColumn(name = "user_id")
    lateinit var user: User

    @ManyToOne(fetch = FetchType.LAZY, optional = false)
    @JoinColumn(name = "animal_id")
    lateinit var animal: Animal

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "attribute_id")
    var attribute: Attribute? = null

    override fun equals(other: Any?): Boolean {
        if (this === other) return true
        if (other !is AttributeValueHistory) return false
        return id == other.id
    }

    override fun hashCode(): Int = id.hashCode()

    override fun toString(): String = "AttributeValueHistory(id=$id)"
}
```

=== Файл: dto/AttributeChange.kt ===
```kotlin
package ru.animaltracker.userservice.dto

import java.time.LocalDate

data class AttributeChange(
    val date: LocalDate,
    val value: String,
    val changedBy: String
)
```

=== Файл: dto/AttributeStats.kt ===
```kotlin
package ru.animaltracker.userservice.dto

data class AttributeStats(
    val minValue: String?,
    val maxValue: String?,
    val avgValue: Double?
)
```

=== Файл: dto/S3FileResponse.kt ===
```kotlin
package ru.animaltracker.userservice.dto

data class S3FileResponse(
    val objectKey: String,
    val presignedUrl: String
)
```

=== Файл: dto/StatusLogResponse.kt ===
```kotlin
package ru.animaltracker.userservice.dto

import java.time.LocalDate

data class StatusLogResponse(
    var id: Long = 0,
    var logDate: LocalDate = LocalDate.now(),
    var notes: String? = null,
    var photos: List<String> = emptyList(),
    var documents: List<String> = emptyList()
)
```

=== Файл: dto/AnimalResponse.kt ===
```kotlin
package ru.animaltracker.userservice.dto

import java.math.BigDecimal
import java.time.LocalDate

data class AnimalResponse(
    var id: Long = 0,
    var name: String? = null,
    var description: String? = null,
    var birthDate: LocalDate? = null,
    var mass: BigDecimal? = null,
    var attributes: List<AttributeResponse> = emptyList(),
    var photos: List<String> = emptyList(),
    var documents: List<String> = emptyList(),
)
```

=== Файл: dto/UserResponse.kt ===
```kotlin
package ru.animaltracker.userservice.dto

data class UserResponse(
    val username: String,
    val firstName: String?,
    val lastName: String?,
    val city: String?,
    val aboutMe: String?,
    var photoUrl: String?
)
```

=== Файл: dto/AttributeRequest.kt ===
```kotlin
package ru.animaltracker.userservice.dto

data class AttributeRequest(
    val name: String,
    val value: String
)
```

=== Файл: dto/AttributeHistoryResponse.kt ===
```kotlin
package ru.animaltracker.userservice.dto

import java.time.LocalDate

data class AttributeHistoryResponse(
    val attributeName: String,
    val oldValue: String?,
    val changedAt: LocalDate,
    val changedBy: String
)
```

=== Файл: dto/UserCreatedEvent.kt ===
```kotlin
package ru.animaltracker.userservice.dto

data class UserCreatedEvent(
    val email: String,
    val username: String
)
```

=== Файл: dto/AnimalUpdateRequest.kt ===
```kotlin
package ru.animaltracker.userservice.dto

import java.math.BigDecimal
import java.time.LocalDate

data class AnimalUpdateRequest(
    val name: String?,
    val description: String?,
    val birthDate: LocalDate?,
    val mass: BigDecimal?
)
```

=== Файл: dto/StatusLogUpdateRequest.kt ===
```kotlin
package ru.animaltracker.userservice.dto

import java.time.LocalDate

data class StatusLogUpdateRequest(
    val notes: String?,
    val logDate: LocalDate?
)
```

=== Файл: dto/StatusLogCreateRequest.kt ===
```kotlin
package ru.animaltracker.userservice.dto

import jakarta.validation.constraints.NotBlank
import jakarta.validation.constraints.PastOrPresent
import java.time.LocalDate

data class StatusLogCreateRequest(
    @field:NotBlank
    val notes: String?,

    val logDate: LocalDate?
)
```

=== Файл: dto/UserUpdateRequest.kt ===
```kotlin
package ru.animaltracker.userservice.dto

import jakarta.validation.constraints.Size

data class UserUpdateRequest(
    @field:Size(max = 255)
    val firstName: String?,

    @field:Size(max = 255)
    val lastName: String?,

    @field:Size(max = 255)
    val city: String?,

    @field:Size(max = 255)
    val aboutMe: String?
)

```

=== Файл: dto/AnimalCreateRequest.kt ===
```kotlin
package ru.animaltracker.userservice.dto

import java.math.BigDecimal
import java.time.LocalDate

data class AnimalCreateRequest(
    val name: String,
    val description: String?,
    val birthDate: LocalDate?,
    val mass: BigDecimal?,
    val attributes: List<AttributeRequest>
)
```

=== Файл: dto/AnimalAnalyticsResponse.kt ===
```kotlin
package ru.animaltracker.userservice.dto

data class AnimalAnalyticsResponse(
    val attributeName: String,
    val changes: List<AttributeChange>,
    val stats: AttributeStats?
)
```

=== Файл: dto/AttributeResponse.kt ===
```kotlin
package ru.animaltracker.userservice.dto

data class AttributeResponse(
    var id: Short = 0,
    var name: String? = null,
    var value: String? = null
)
```

=== Файл: dto/AttributeUpdateRequest.kt ===
```kotlin
package ru.animaltracker.userservice.dto

data class AttributeUpdateRequest(
    val name: String?,
    val value: String?
)
```

=== Файл: config/KafkaConsumerConfig.kt ===
```kotlin
package ru.animaltracker.userservice.config

import org.apache.kafka.clients.consumer.ConsumerConfig
import org.springframework.context.annotation.Bean
import org.springframework.context.annotation.Configuration
import org.springframework.kafka.config.ConcurrentKafkaListenerContainerFactory
import org.springframework.kafka.core.ConsumerFactory
import org.springframework.kafka.core.DefaultKafkaConsumerFactory

@Configuration
class KafkaConsumerConfig {

    @Bean
    fun consumerFactory(): ConsumerFactory<String, String> {
        val configProps = mapOf(
            ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG to "kafka:9092",
            ConsumerConfig.GROUP_ID_CONFIG to "db-event",
            ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG to "org.apache.kafka.common.serialization.StringDeserializer",
            ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG to "org.apache.kafka.common.serialization.StringDeserializer"
        )
        return DefaultKafkaConsumerFactory(configProps)
    }

    @Bean
    fun kafkaListenerContainerFactory(): ConcurrentKafkaListenerContainerFactory<String, String> {
        val factory = ConcurrentKafkaListenerContainerFactory<String, String>()
        factory.consumerFactory = consumerFactory()
        return factory
    }
}
```

=== Файл: config/GlobalExceptionHandler.kt ===
```kotlin
package ru.animaltracker.userservice.config

import org.springframework.http.HttpStatus
import org.springframework.http.ResponseEntity
import org.springframework.web.bind.annotation.ExceptionHandler
import org.springframework.web.bind.annotation.RestControllerAdvice
import ru.animaltracker.userservice.exception.FileProcessingException
import ru.animaltracker.userservice.exception.FileUploadException

@RestControllerAdvice
class GlobalExceptionHandler {

    @ExceptionHandler(FileUploadException::class)
    fun handleFileUploadException(ex: FileUploadException): ResponseEntity<Map<String, String>> {
        return ResponseEntity.status(HttpStatus.BAD_REQUEST)
            .body(mapOf("error" to ex.message!!))
    }

    @ExceptionHandler(FileProcessingException::class)
    fun handleFileProcessingException(ex: FileProcessingException): ResponseEntity<Map<String, String>> {
        return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
            .body(mapOf("error" to ex.message!!))
    }
}
```

=== Файл: config/S3ClientConfig.kt ===
```kotlin
package ru.animaltracker.userservice.config

import org.springframework.beans.factory.annotation.Value
import org.springframework.context.annotation.Bean
import org.springframework.context.annotation.Configuration
import software.amazon.awssdk.auth.credentials.AwsBasicCredentials
import software.amazon.awssdk.auth.credentials.StaticCredentialsProvider
import software.amazon.awssdk.regions.Region
import software.amazon.awssdk.services.s3.S3AsyncClient
import software.amazon.awssdk.services.s3.S3Client
import software.amazon.awssdk.services.s3.presigner.S3Presigner
import java.net.URI

@Configuration
class S3ClientConfig(
    @Value("\${s3.region}") val region: String,
    @Value("\${s3.s3Url}") val s3Url: String,
    @Value("\${s3.accessKeyId}") val accessKeyId: String,
    @Value("\${s3.secretAccessKey}") val secretAccessKey: String
) {
    @Bean
    fun s3Client(): S3Client {
        val credentials = AwsBasicCredentials.create(accessKeyId, secretAccessKey)

        return S3Client.builder()
            .apply {
                if (s3Url.isNotEmpty()) {
                    endpointOverride(URI.create(s3Url))
                    forcePathStyle(true)
                }
            }
            .credentialsProvider(StaticCredentialsProvider.create(credentials))
            .region(Region.of(region))
            .build()
    }

    @Bean
    fun s3Presigner(): S3Presigner {
        val credentials = AwsBasicCredentials.create(accessKeyId, secretAccessKey)

        return S3Presigner.builder()
            .apply {
                if (s3Url.isNotEmpty()) {
                    endpointOverride(URI.create(s3Url))
                }
            }
            .credentialsProvider(StaticCredentialsProvider.create(credentials))
            .region(Region.of(region))
            .build()
    }
}
```

=== Файл: config/WebConfig.kt ===
```kotlin
package ru.animaltracker.userservice.config

import org.springframework.context.annotation.Bean
import org.springframework.context.annotation.Configuration
import org.springframework.web.client.RestTemplate
import org.springframework.web.servlet.config.annotation.CorsRegistry
import org.springframework.web.servlet.config.annotation.WebMvcConfigurer

@Configuration
class WebConfig {

    @Bean
    fun restTemplate(): RestTemplate = RestTemplate()

    @Bean
    fun corsConfigurer(): WebMvcConfigurer {
        return object : WebMvcConfigurer {
            override fun addCorsMappings(registry: CorsRegistry) {
                registry.addMapping("/**")
                    .allowedOrigins("*")
                    .allowedMethods("GET", "POST", "PUT", "DELETE", "OPTIONS", "PATCH")
                    .allowedHeaders("*")
            }
        }
    }
}
```

=== Файл: repository/AnimalStatusLogRepository.kt ===
```kotlin
package ru.animaltracker.userservice.repository

import org.springframework.data.jpa.repository.JpaRepository
import ru.animaltracker.userservice.entity.AnimalStatusLog

interface AnimalStatusLogRepository : JpaRepository<AnimalStatusLog, Long>{
    fun findByAnimalId(animalId: Long): List<AnimalStatusLog>
}
```

=== Файл: repository/AttributeRepository.kt ===
```kotlin
package ru.animaltracker.userservice.repository

import org.springframework.data.jpa.repository.JpaRepository
import ru.animaltracker.userservice.entity.Attribute

interface AttributeRepository : JpaRepository<Attribute, Short> {
    fun findByAnimalId(animalId: Long): List<Attribute>
}
```

=== Файл: repository/StatusLogDocumentRepository.kt ===
```kotlin
package ru.animaltracker.userservice.repository

import org.springframework.data.jpa.repository.JpaRepository
import ru.animaltracker.userservice.entity.StatusLogDocument

interface StatusLogDocumentRepository: JpaRepository<StatusLogDocument, Long> {
}
```

=== Файл: repository/PhotoRepository.kt ===
```kotlin
package ru.animaltracker.userservice.repository

import org.springframework.data.jpa.repository.JpaRepository
import ru.animaltracker.userservice.entity.Photo

interface PhotoRepository : JpaRepository<Photo, Long>
```

=== Файл: repository/UserRepository.kt ===
```kotlin
package ru.animaltracker.userservice.repository

import org.springframework.data.jpa.repository.JpaRepository
import ru.animaltracker.userservice.entity.User

interface UserRepository : JpaRepository<User, Long> {
    fun findByEmail(email: String): User?
    fun findByUsername(username: String): User?
}
```

=== Файл: repository/UserPhotoRepository.kt ===
```kotlin
package ru.animaltracker.userservice.repository

import org.springframework.data.jpa.repository.JpaRepository
import ru.animaltracker.userservice.entity.User
import ru.animaltracker.userservice.entity.UserPhoto

interface UserPhotoRepository : JpaRepository<UserPhoto, Long> {
    fun deleteAllByUser(user: User)
}
```

=== Файл: repository/DocumentRepository.kt ===
```kotlin
package ru.animaltracker.userservice.repository

import org.springframework.data.jpa.repository.JpaRepository
import ru.animaltracker.userservice.entity.Document

interface DocumentRepository : JpaRepository<Document, Long>
```

=== Файл: repository/AnimalPhotoRepository.kt ===
```kotlin
package ru.animaltracker.userservice.repository

import org.springframework.data.jpa.repository.JpaRepository
import ru.animaltracker.userservice.entity.AnimalPhoto

interface AnimalPhotoRepository : JpaRepository<AnimalPhoto, Long>{
    fun findByPhotoId(photoId: Long): AnimalPhoto?
}
```

=== Файл: repository/AnimalRepository.kt ===
```kotlin
package ru.animaltracker.userservice.repository

import org.springframework.data.jpa.repository.JpaRepository
import ru.animaltracker.userservice.entity.Animal

interface AnimalRepository : JpaRepository<Animal, Long>
```

=== Файл: repository/StatusLogPhotoRepository.kt ===
```kotlin
package ru.animaltracker.userservice.repository

import org.springframework.data.jpa.repository.JpaRepository
import ru.animaltracker.userservice.entity.StatusLogPhoto

interface StatusLogPhotoRepository: JpaRepository<StatusLogPhoto, Long> {
}
```

=== Файл: repository/AttributeValueHistoryRepository.kt ===
```kotlin
package ru.animaltracker.userservice.repository

import org.springframework.data.jpa.repository.JpaRepository
import ru.animaltracker.userservice.entity.AttributeValueHistory

interface AttributeValueHistoryRepository: JpaRepository<AttributeValueHistory, Long> {
}
```

