=== Файл: AnimalMediaController.kt ===
```kotlin
package ru.animaltracker.userservice.controller

import ru.animaltracker.userservice.service.interfaces.AnimalMediaService
import jakarta.validation.Valid
import org.springframework.http.HttpStatus
import org.springframework.http.MediaType
import org.springframework.http.ResponseEntity
import org.springframework.web.bind.annotation.*
import org.springframework.web.multipart.MultipartFile
import ru.animaltracker.userservice.dto.*

@RestController
@RequestMapping("/api/animals/{animalId}/media")
class AnimalMediaController(
    private val animalMediaService: AnimalMediaService
) {

    @PostMapping("/photos", consumes = [MediaType.MULTIPART_FORM_DATA_VALUE])
    fun uploadAnimalPhoto(
        @RequestHeader("X-User-Name") username: String,
        @PathVariable animalId: Long,
        @RequestParam("file") file: MultipartFile
    ): ResponseEntity<S3FileResponse> {
        return ResponseEntity.ok(animalMediaService.addAnimalPhoto(username, animalId, file))
    }

    @PostMapping("/documents", consumes = [MediaType.MULTIPART_FORM_DATA_VALUE])
    fun uploadAnimalDocument(
        @RequestHeader("X-User-Name") username: String,
        @PathVariable animalId: Long,
        @RequestParam("file") file: MultipartFile,
        @RequestParam type: String
    ): ResponseEntity<S3FileResponse> {
        return ResponseEntity.ok(animalMediaService.addAnimalDocument(username, animalId, file, type))
    }

    @DeleteMapping("/photos/{photoId}")
    fun deleteAnimalPhoto(
        @RequestHeader("X-User-Name") username: String,
        @PathVariable photoId: Long
    ): ResponseEntity<Void> {
        animalMediaService.deleteAnimalPhoto(username, photoId)
        return ResponseEntity.noContent().build()
    }

    @DeleteMapping("/documents/{documentId}")
    fun deleteAnimalDocument(
        @RequestHeader("X-User-Name") username: String,
        @PathVariable documentId: Long
    ): ResponseEntity<Void> {
        animalMediaService.deleteAnimalDocument(username, documentId)
        return ResponseEntity.noContent().build()
    }
}
```

=== Файл: UserController.kt ===
```kotlin
package ru.animaltracker.userservice.controller

import jakarta.validation.Valid
import org.springframework.http.MediaType
import org.springframework.http.ResponseEntity
import org.springframework.web.bind.annotation.*
import org.springframework.web.multipart.MultipartFile
import ru.animaltracker.userservice.dto.AnimalResponse
import ru.animaltracker.userservice.dto.S3FileResponse
import ru.animaltracker.userservice.dto.UserResponse
import ru.animaltracker.userservice.dto.UserUpdateRequest
import ru.animaltracker.userservice.service.interfaces.AnimalManagementService
import ru.animaltracker.userservice.service.interfaces.UserService

@RestController
@RequestMapping("/api/users")
class UserController(
    private val userService: UserService,
    private val animalService: AnimalManagementService
) {

    @GetMapping("/me")
     fun getCurrentUser(
        @RequestHeader("X-User-Name") username: String
    ): ResponseEntity<UserResponse> {
        return ResponseEntity.ok(userService.getUser(username))
    }

    @PatchMapping("/me")
     fun updateUser(
        @RequestHeader("X-User-Name") username: String,
        @Valid @RequestBody request: UserUpdateRequest
    ): ResponseEntity<UserResponse> {
        return ResponseEntity.ok(userService.updateUser(username, request))
    }

    @PostMapping("/me/photo", consumes = [MediaType.MULTIPART_FORM_DATA_VALUE])
     fun uploadUserPhoto(
        @RequestHeader("X-User-Name") username: String,
        @RequestParam("file") file: MultipartFile
    ): ResponseEntity<S3FileResponse> {
        return ResponseEntity.ok(userService.uploadUserPhoto(username, file))
    }

    @GetMapping("/me/animals")
     fun getUserAnimals(
        @RequestHeader("X-User-Name") username: String
    ): ResponseEntity<List<AnimalResponse>> {
        return ResponseEntity.ok(animalService.getUserAnimals(username))
    }
}
```

=== Файл: StatusLogMediaController.kt ===
```kotlin
package ru.animaltracker.userservice.controller
import jakarta.validation.Valid
import org.springframework.http.HttpStatus
import org.springframework.http.ResponseEntity
import org.springframework.web.bind.annotation.*
import org.springframework.web.multipart.MultipartFile
import ru.animaltracker.userservice.dto.*
import ru.animaltracker.userservice.service.interfaces.StatusLogMediaService
import org.springframework.http.MediaType

@RestController
@RequestMapping("/api/animals/{animalId}/status-logs/{statusLogId}/media")
class StatusLogMediaController(
    private val statusLogMediaService: StatusLogMediaService
) {

    @PostMapping("/photos", consumes = [MediaType.MULTIPART_FORM_DATA_VALUE])
    fun uploadStatusLogPhoto(
        @RequestHeader("X-User-Name") username: String,
        @PathVariable animalId: Long,
        @PathVariable statusLogId: Long,
        @RequestParam("file") file: MultipartFile
    ): ResponseEntity<S3FileResponse> {
        return ResponseEntity.ok(
            statusLogMediaService.addStatusLogPhoto(username, animalId, statusLogId, file)
        )
    }

    @PostMapping("/documents", consumes = [MediaType.MULTIPART_FORM_DATA_VALUE])
    fun uploadStatusLogDocument(
        @RequestHeader("X-User-Name") username: String,
        @PathVariable animalId: Long,
        @PathVariable statusLogId: Long,
        @RequestParam("file") file: MultipartFile,
        @RequestParam type: String
    ): ResponseEntity<S3FileResponse> {
        return ResponseEntity.ok(
            statusLogMediaService.addStatusLogDocument(username, animalId, statusLogId, file, type)
        )
    }
}
```

=== Файл: StatusLogController.kt ===
```kotlin
package ru.animaltracker.userservice.controller

import jakarta.validation.Valid
import org.springframework.http.HttpStatus
import org.springframework.http.ResponseEntity
import org.springframework.web.bind.annotation.*
import ru.animaltracker.userservice.dto.*
import ru.animaltracker.userservice.service.interfaces.StatusLogService


@RestController
@RequestMapping("/api/animals/{animalId}/status-logs")
class StatusLogController(
    private val statusLogService: StatusLogService
) {

    @PostMapping
    fun addStatusLog(
        @RequestHeader("X-User-Name") username: String,
        @PathVariable animalId: Long,
        @Valid @RequestBody request: StatusLogCreateRequest
    ): ResponseEntity<StatusLogResponse> {
        return ResponseEntity.ok(statusLogService.addStatusLog(username, animalId, request))
    }

    @GetMapping
    fun getStatusLogs(
        @RequestHeader("X-User-Name") username: String,
        @PathVariable animalId: Long
    ): ResponseEntity<List<StatusLogResponse>> {
        return ResponseEntity.ok(statusLogService.getStatusLogs(username, animalId))
    }

    @GetMapping("/{statusLogId}")
    fun getStatusLog(
        @RequestHeader("X-User-Name") username: String,
        @PathVariable animalId: Long,
        @PathVariable statusLogId: Long
    ): ResponseEntity<StatusLogResponse> {
        return ResponseEntity.ok(statusLogService.getStatusLog(statusLogId))
    }

    @PutMapping("/{statusLogId}")
    fun updateStatusLog(
        @RequestHeader("X-User-Name") username: String,
        @PathVariable animalId: Long,
        @PathVariable statusLogId: Long,
        @Valid @RequestBody request: StatusLogUpdateRequest
    ): ResponseEntity<StatusLogResponse> {
        return ResponseEntity.ok(
            statusLogService.updateStatusLog(username, animalId, statusLogId, request)
        )
    }

    @DeleteMapping("/{statusLogId}")
    fun deleteStatusLog(
        @RequestHeader("X-User-Name") username: String,
        @PathVariable animalId: Long,
        @PathVariable statusLogId: Long
    ): ResponseEntity<Void> {
        statusLogService.deleteStatusLog(username, animalId, statusLogId)
        return ResponseEntity.noContent().build()
    }
}
```

=== Файл: AnalyticsReportController.kt ===
```kotlin
package ru.animaltracker.userservice.controller
import jakarta.validation.Valid
import org.springframework.http.HttpStatus
import org.springframework.http.ResponseEntity
import org.springframework.web.bind.annotation.*
import ru.animaltracker.userservice.dto.*
import ru.animaltracker.userservice.service.interfaces.AnalyticsReportService

@RestController
@RequestMapping("/api/animals/{animalId}/analytics")
class AnalyticsReportController(
    private val analyticsReportService: AnalyticsReportService
) {

    @GetMapping
    fun getAnimalAnalytics(
        @RequestHeader("X-User-Name") username: String,
        @PathVariable animalId: Long
    ): ResponseEntity<List<AnimalAnalyticsResponse>> {
        return ResponseEntity.ok(analyticsReportService.getAnimalAnalytics(animalId))
    }

    @GetMapping("/export/pdf")
    fun exportAnimalToPdf(
        @RequestHeader("X-User-Name") username: String,
        @PathVariable animalId: Long
    ): ResponseEntity<ByteArray> {
        val pdfBytes = analyticsReportService.exportAnimalToPdf(username, animalId)

        return ResponseEntity.ok()
            .header("Content-Type", "application/pdf")
            .header("Content-Disposition", "attachment; filename=animal_${animalId}.pdf")
            .body(pdfBytes)
    }
}
```

=== Файл: AnimalParametersController.kt ===
```kotlin
package ru.animaltracker.userservice.controller

import org.springframework.http.ResponseEntity
import org.springframework.web.bind.annotation.*
import ru.animaltracker.userservice.dto.ParameterChangeResponse
import ru.animaltracker.userservice.dto.ParameterStats
import ru.animaltracker.userservice.service.interfaces.StatusLogService

@RestController
@RequestMapping("/api/animals/{animalId}/parameters")
class AnimalParametersController(
    private val statusLogService: StatusLogService
) {

    @GetMapping("/history/{parameterName}")
    fun getParameterHistory(
        @RequestHeader("X-User-Name") username: String,
        @PathVariable animalId: Long,
        @PathVariable parameterName: String
    ): ResponseEntity<List<ParameterChangeResponse>> {
        return ResponseEntity.ok(
            statusLogService.getParameterHistory(username, animalId, parameterName)
        )
    }

    @GetMapping("/stats/{parameterName}")
    fun getParameterStats(
        @RequestHeader("X-User-Name") username: String,
        @PathVariable animalId: Long,
        @PathVariable parameterName: String
    ): ResponseEntity<ParameterStats> {
        val history = statusLogService.getParameterHistory(username, animalId, parameterName)

        val numericValues = history
            .mapNotNull { it.newValue.toDoubleOrNull() }
            .takeIf { it.isNotEmpty() }

        val stats = numericValues?.let {
            ParameterStats(
                minValue = it.min().toString(),
                maxValue = it.max().toString(),
                avgValue = it.average(),
                firstValue = history.first().newValue,
                lastValue = history.last().newValue
            )
        } ?: ParameterStats(
            minValue = null,
            maxValue = null,
            avgValue = null,
            firstValue = history.firstOrNull()?.newValue,
            lastValue = history.lastOrNull()?.newValue
        )

        return ResponseEntity.ok(stats)
    }
}
```

=== Файл: AnimalManagementController.kt ===
```kotlin
package ru.animaltracker.userservice.controller

import jakarta.validation.Valid
import org.springframework.http.HttpStatus
import org.springframework.http.ResponseEntity
import org.springframework.web.bind.annotation.*
import ru.animaltracker.userservice.dto.*
import ru.animaltracker.userservice.service.interfaces.AnimalManagementService

@RestController
@RequestMapping("/api/animals")
class AnimalManagementController(
    private val animalManagementService: AnimalManagementService
) {

    @PostMapping
    fun createAnimal(
        @RequestHeader("X-User-Name") username: String,
        @Valid @RequestBody request: AnimalCreateRequest
    ): ResponseEntity<AnimalResponse> {
        return ResponseEntity.ok(animalManagementService.createAnimal(username, request))
    }

    @GetMapping("/{animalId}")
    fun getAnimal(
        @RequestHeader("X-User-Name") username: String,
        @PathVariable animalId: Long
    ): ResponseEntity<AnimalResponse> {
        return ResponseEntity.ok(animalManagementService.getAnimal(username, animalId))
    }

    @GetMapping
    fun getUserAnimals(
        @RequestHeader("X-User-Name") username: String
    ): ResponseEntity<List<AnimalResponse>> {
        return ResponseEntity.ok(animalManagementService.getUserAnimals(username))
    }

    @DeleteMapping("/{animalId}")
    fun deleteAnimal(
        @RequestHeader("X-User-Name") username: String,
        @PathVariable animalId: Long
    ): ResponseEntity<Void> {
        animalManagementService.deleteAnimal(username, animalId)
        return ResponseEntity.noContent().build()
    }

    @PatchMapping("/{animalId}")
    fun updateAnimal(
        @RequestHeader("X-User-Name") username: String,
        @PathVariable animalId: Long,
        @Valid @RequestBody request: AnimalUpdateRequest
    ): ResponseEntity<AnimalResponse> {
        return ResponseEntity.ok(animalManagementService.updateAnimal(username, animalId, request))
    }

    @PostMapping("/{animalId}/attributes")
    fun addAttribute(
        @RequestHeader("X-User-Name") username: String,
        @PathVariable animalId: Long,
        @Valid @RequestBody request: AttributeRequest
    ): ResponseEntity<AttributeResponse> {
        return ResponseEntity.status(HttpStatus.CREATED)
            .body(animalManagementService.addAttribute(username, animalId, request))
    }

    @PatchMapping("/{animalId}/attributes/{attributeId}")
    fun updateAttribute(
        @RequestHeader("X-User-Name") username: String,
        @PathVariable animalId: Long,
        @PathVariable attributeId: Short,
        @Valid @RequestBody request: AttributeUpdateRequest
    ): ResponseEntity<AttributeResponse> {
        return ResponseEntity.ok(
            animalManagementService.updateAttribute(username, animalId, attributeId, request)
        )
    }

    @DeleteMapping("/{animalId}/attributes/{attributeId}")
    fun deleteAttribute(
        @RequestHeader("X-User-Name") username: String,
        @PathVariable animalId: Long,
        @PathVariable attributeId: Short
    ): ResponseEntity<Void> {
        animalManagementService.deleteAttribute(username, animalId, attributeId)
        return ResponseEntity.noContent().build()
    }
}
```

